
GPS_M8N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b32c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800b510  0800b510  0001b510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd54  0800bd54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd5c  0800bd5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001e0  0800bf44  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800bf44  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbf4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251b  00000000  00000000  0002fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e493  00000000  00000000  00033938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3d2  00000000  00000000  00051dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8692  00000000  00000000  0006119d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011982f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  00119880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b4f4 	.word	0x0800b4f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b4f4 	.word	0x0800b4f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->numSV = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	GNSS->satCount = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	GNSS->lon = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->lat = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->height = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hMSL = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	GNSS->hAcc = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->vAcc = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->gSpeed = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	GNSS->headMot = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	GNSS_LoadConfig(GNSS);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fbb6 	bl	8001850 <GNSS_LoadConfig>

	HAL_Delay(300);
 80010e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010e8:	f001 f990 	bl	800240c <HAL_Delay>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	// [var]     = Header #1
	// [var + 1] = Header #2
	// [var + 2] = Class
	// [var + 3] = ID
	//***********************
	for (int var = 0; var <= 100; ++var) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e069      	b.n	80011d6 <GNSS_ParseBuffer+0xe2>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	3308      	adds	r3, #8
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2bb5      	cmp	r3, #181	; 0xb5
 800110e:	d15f      	bne.n	80011d0 <GNSS_ParseBuffer+0xdc>
			&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	7a1b      	ldrb	r3, [r3, #8]
 800111a:	2b62      	cmp	r3, #98	; 0x62
 800111c:	d158      	bne.n	80011d0 <GNSS_ParseBuffer+0xdc>

				if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3302      	adds	r3, #2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	7a1b      	ldrb	r3, [r3, #8]
 8001128:	2b27      	cmp	r3, #39	; 0x27
 800112a:	d10a      	bne.n	8001142 <GNSS_ParseBuffer+0x4e>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3303      	adds	r3, #3
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d103      	bne.n	8001142 <GNSS_ParseBuffer+0x4e>
					GNSS_ParseUniqID(GNSS);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f86e 	bl	800121c <GNSS_ParseUniqID>
 8001140:	e046      	b.n	80011d0 <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3302      	adds	r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	7a1b      	ldrb	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <GNSS_ParseBuffer+0x72>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3303      	adds	r3, #3
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	7a1b      	ldrb	r3, [r3, #8]
 800115a:	2b21      	cmp	r3, #33	; 0x21
 800115c:	d103      	bne.n	8001166 <GNSS_ParseBuffer+0x72>
					GNSS_ParseNavigatorData(GNSS);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fa78 	bl	8001654 <GNSS_ParseNavigatorData>
 8001164:	e034      	b.n	80011d0 <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3302      	adds	r3, #2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	7a1b      	ldrb	r3, [r3, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10a      	bne.n	800118a <GNSS_ParseBuffer+0x96>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //Look at: 32.17.17.1 u-blox 8 Receiver description
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3303      	adds	r3, #3
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	7a1b      	ldrb	r3, [r3, #8]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d103      	bne.n	800118a <GNSS_ParseBuffer+0x96>
					GNSS_ParsePVTData(GNSS);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f900 	bl	8001388 <GNSS_ParsePVTData>
 8001188:	e022      	b.n	80011d0 <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	7a1b      	ldrb	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d10a      	bne.n	80011ae <GNSS_ParseBuffer+0xba>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { //Look at: 32.17.15.1 u-blox 8 Receiver description
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3303      	adds	r3, #3
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	7a1b      	ldrb	r3, [r3, #8]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d103      	bne.n	80011ae <GNSS_ParseBuffer+0xba>
					GNSS_ParsePOSLLHData(GNSS);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa98 	bl	80016dc <GNSS_ParsePOSLLHData>
 80011ac:	e010      	b.n	80011d0 <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3302      	adds	r3, #2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d109      	bne.n	80011d0 <GNSS_ParseBuffer+0xdc>
					    && GNSS->uartWorkingBuffer[var + 3] == 0x35) {  //Look at: 32.17.20.1 u-blox 8 Receiver description
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3303      	adds	r3, #3
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	7a1b      	ldrb	r3, [r3, #8]
 80011c6:	2b35      	cmp	r3, #53	; 0x35
 80011c8:	d102      	bne.n	80011d0 <GNSS_ParseBuffer+0xdc>
					GNSS_ParseNAVSATData(GNSS);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa76 	bl	80016bc <GNSS_ParseNAVSATData>
	for (int var = 0; var <= 100; ++var) {
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b64      	cmp	r3, #100	; 0x64
 80011da:	dd92      	ble.n	8001102 <GNSS_ParseBuffer+0xe>
				}
		}
	}
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2208      	movs	r2, #8
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <GNSS_GetPVTData+0x30>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f9ff 	bl	80045fc <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS->uartWorkingBuffer, 100);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3308      	adds	r3, #8
 8001206:	2264      	movs	r2, #100	; 0x64
 8001208:	4619      	mov	r1, r3
 800120a:	f003 f9a1 	bl	8004550 <HAL_UART_Receive_IT>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800b6d0 	.word	0x0800b6d0

0800121c <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e00d      	b.n	8001246 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS->uartWorkingBuffer[10 + var];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	330a      	adds	r3, #10
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	7a19      	ldrb	r1, [r3, #8]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	3304      	adds	r3, #4
 800123c:	460a      	mov	r2, r1
 800123e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b04      	cmp	r3, #4
 800124a:	ddee      	ble.n	800122a <GNSS_ParseUniqID+0xe>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 8001268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	222c      	movs	r2, #44	; 0x2c
 8001276:	493a      	ldr	r1, [pc, #232]	; (8001360 <GNSS_SetMode+0x104>)
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f9bf 	bl	80045fc <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 800127e:	e06a      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 8001280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	222c      	movs	r2, #44	; 0x2c
 800128e:	4935      	ldr	r1, [pc, #212]	; (8001364 <GNSS_SetMode+0x108>)
 8001290:	4618      	mov	r0, r3
 8001292:	f003 f9b3 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 8001296:	e05e      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 8001298:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d107      	bne.n	80012b0 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	222c      	movs	r2, #44	; 0x2c
 80012a6:	4930      	ldr	r1, [pc, #192]	; (8001368 <GNSS_SetMode+0x10c>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 f9a7 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 80012ae:	e052      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 80012b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d107      	bne.n	80012c8 <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	222c      	movs	r2, #44	; 0x2c
 80012be:	492b      	ldr	r1, [pc, #172]	; (800136c <GNSS_SetMode+0x110>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f99b 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 80012c6:	e046      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 80012c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d107      	bne.n	80012e0 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	222c      	movs	r2, #44	; 0x2c
 80012d6:	4925      	ldr	r1, [pc, #148]	; (800136c <GNSS_SetMode+0x110>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f98f 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 80012de:	e03a      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 80012e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d107      	bne.n	80012f8 <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	222c      	movs	r2, #44	; 0x2c
 80012ee:	4920      	ldr	r1, [pc, #128]	; (8001370 <GNSS_SetMode+0x114>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 f983 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 80012f6:	e02e      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 80012f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d107      	bne.n	8001310 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	222c      	movs	r2, #44	; 0x2c
 8001306:	491b      	ldr	r1, [pc, #108]	; (8001374 <GNSS_SetMode+0x118>)
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f977 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 800130e:	e022      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 8001310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001314:	2b07      	cmp	r3, #7
 8001316:	d107      	bne.n	8001328 <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	222c      	movs	r2, #44	; 0x2c
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <GNSS_SetMode+0x11c>)
 8001320:	4618      	mov	r0, r3
 8001322:	f003 f96b 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 8001326:	e016      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 8001328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800132c:	2b08      	cmp	r3, #8
 800132e:	d107      	bne.n	8001340 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	222c      	movs	r2, #44	; 0x2c
 8001336:	4911      	ldr	r1, [pc, #68]	; (800137c <GNSS_SetMode+0x120>)
 8001338:	4618      	mov	r0, r3
 800133a:	f003 f95f 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 800133e:	e00a      	b.n	8001356 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 8001340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d106      	bne.n	8001356 <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	222c      	movs	r2, #44	; 0x2c
 800134e:	490c      	ldr	r1, [pc, #48]	; (8001380 <GNSS_SetMode+0x124>)
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f953 	bl	80045fc <HAL_UART_Transmit_DMA>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800b6d8 	.word	0x0800b6d8
 8001364:	0800b704 	.word	0x0800b704
 8001368:	0800b730 	.word	0x0800b730
 800136c:	0800b75c 	.word	0x0800b75c
 8001370:	0800b788 	.word	0x0800b788
 8001374:	0800b7b4 	.word	0x0800b7b4
 8001378:	0800b7e0 	.word	0x0800b7e0
 800137c:	0800b80c 	.word	0x0800b80c
 8001380:	0800b838 	.word	0x0800b838
 8001384:	00000000 	.word	0x00000000

08001388 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7c9a      	ldrb	r2, [r3, #18]
 8001394:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <GNSS_ParsePVTData+0x260>)
 8001396:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7c9a      	ldrb	r2, [r3, #18]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7cda      	ldrb	r2, [r3, #19]
 80013a6:	4b90      	ldr	r3, [pc, #576]	; (80015e8 <GNSS_ParsePVTData+0x260>)
 80013a8:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7cda      	ldrb	r2, [r3, #19]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 80013b4:	4b8c      	ldr	r3, [pc, #560]	; (80015e8 <GNSS_ParsePVTData+0x260>)
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7d1a      	ldrb	r2, [r3, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7d5a      	ldrb	r2, [r3, #21]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7d9a      	ldrb	r2, [r3, #22]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7dda      	ldrb	r2, [r3, #23]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e1a      	ldrb	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	for (int var = 0; var < 4; ++var) {
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	e017      	b.n	800143e <GNSS_ParsePVTData+0xb6>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	331e      	adds	r3, #30
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	7a19      	ldrb	r1, [r3, #8]
 8001418:	4a74      	ldr	r2, [pc, #464]	; (80015ec <GNSS_ParsePVTData+0x264>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	4413      	add	r3, r2
 800141e:	460a      	mov	r2, r1
 8001420:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	331e      	adds	r3, #30
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	7a19      	ldrb	r1, [r3, #8]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	4413      	add	r3, r2
 8001432:	3380      	adds	r3, #128	; 0x80
 8001434:	460a      	mov	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	3301      	adds	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	2b03      	cmp	r3, #3
 8001442:	dde4      	ble.n	800140e <GNSS_ParsePVTData+0x86>
	}
	GNSS->lon = iLong.iLong;
 8001444:	4b69      	ldr	r3, [pc, #420]	; (80015ec <GNSS_ParsePVTData+0x264>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800144c:	4b67      	ldr	r3, [pc, #412]	; (80015ec <GNSS_ParsePVTData+0x264>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001458:	eddf 6a65 	vldr	s13, [pc, #404]	; 80015f0 <GNSS_ParsePVTData+0x268>
 800145c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	e017      	b.n	800149c <GNSS_ParsePVTData+0x114>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	3322      	adds	r3, #34	; 0x22
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	7a19      	ldrb	r1, [r3, #8]
 8001476:	4a5d      	ldr	r2, [pc, #372]	; (80015ec <GNSS_ParsePVTData+0x264>)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	4413      	add	r3, r2
 800147c:	460a      	mov	r2, r1
 800147e:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	3322      	adds	r3, #34	; 0x22
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	7a19      	ldrb	r1, [r3, #8]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	4413      	add	r3, r2
 8001490:	3388      	adds	r3, #136	; 0x88
 8001492:	460a      	mov	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	3301      	adds	r3, #1
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	dde4      	ble.n	800146c <GNSS_ParsePVTData+0xe4>
	}
	GNSS->lat = iLong.iLong;
 80014a2:	4b52      	ldr	r3, [pc, #328]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b8:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80015f0 <GNSS_ParsePVTData+0x268>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	for (int var = 0; var < 4; ++var) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e00c      	b.n	80014e6 <GNSS_ParsePVTData+0x15e>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3326      	adds	r3, #38	; 0x26
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	7a19      	ldrb	r1, [r3, #8]
 80014d6:	4a45      	ldr	r2, [pc, #276]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	460a      	mov	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	ddef      	ble.n	80014cc <GNSS_ParsePVTData+0x144>
	}
	GNSS->height = iLong.iLong;
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e017      	b.n	800152c <GNSS_ParsePVTData+0x1a4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	332a      	adds	r3, #42	; 0x2a
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	7a19      	ldrb	r1, [r3, #8]
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <GNSS_ParsePVTData+0x264>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	4413      	add	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	332a      	adds	r3, #42	; 0x2a
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	7a19      	ldrb	r1, [r3, #8]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4413      	add	r3, r2
 8001520:	339c      	adds	r3, #156	; 0x9c
 8001522:	460a      	mov	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	3301      	adds	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b03      	cmp	r3, #3
 8001530:	dde4      	ble.n	80014fc <GNSS_ParsePVTData+0x174>
	}
	GNSS->hMSL = iLong.iLong;
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <GNSS_ParsePVTData+0x264>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	for (int var = 0; var < 4; ++var) {
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00c      	b.n	800155c <GNSS_ParsePVTData+0x1d4>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	332e      	adds	r3, #46	; 0x2e
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	7a19      	ldrb	r1, [r3, #8]
 800154c:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <GNSS_ParsePVTData+0x26c>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	4413      	add	r3, r2
 8001552:	460a      	mov	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	ddef      	ble.n	8001542 <GNSS_ParsePVTData+0x1ba>
	}
	GNSS->hAcc = uLong.uLong;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <GNSS_ParsePVTData+0x26c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	e00c      	b.n	800158c <GNSS_ParsePVTData+0x204>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	3332      	adds	r3, #50	; 0x32
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	7a19      	ldrb	r1, [r3, #8]
 800157c:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <GNSS_ParsePVTData+0x26c>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	460a      	mov	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b03      	cmp	r3, #3
 8001590:	ddef      	ble.n	8001572 <GNSS_ParsePVTData+0x1ea>
	}
	GNSS->vAcc = uLong.uLong;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <GNSS_ParsePVTData+0x26c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e017      	b.n	80015d2 <GNSS_ParsePVTData+0x24a>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3342      	adds	r3, #66	; 0x42
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	7a19      	ldrb	r1, [r3, #8]
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3342      	adds	r3, #66	; 0x42
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	7a19      	ldrb	r1, [r3, #8]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	33ac      	adds	r3, #172	; 0xac
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	dde4      	ble.n	80015a2 <GNSS_ParsePVTData+0x21a>
	}
	GNSS->gSpeed = iLong.iLong;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <GNSS_ParsePVTData+0x264>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	for (int var = 0; var < 4; ++var) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	e014      	b.n	8001612 <GNSS_ParsePVTData+0x28a>
 80015e8:	200001fc 	.word	0x200001fc
 80015ec:	20000204 	.word	0x20000204
 80015f0:	4b189680 	.word	0x4b189680
 80015f4:	20000200 	.word	0x20000200
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	3346      	adds	r3, #70	; 0x46
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	7a19      	ldrb	r1, [r3, #8]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <GNSS_ParsePVTData+0x2c8>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4413      	add	r3, r2
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b03      	cmp	r3, #3
 8001616:	ddef      	ble.n	80015f8 <GNSS_ParsePVTData+0x270>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <GNSS_ParsePVTData+0x2c8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffa9 	bl	8000574 <__aeabi_i2d>
 8001622:	a309      	add	r3, pc, #36	; (adr r3, 8001648 <GNSS_ParsePVTData+0x2c0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f80e 	bl	8000648 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fab8 	bl	8000ba8 <__aeabi_d2iz>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	88e368f1 	.word	0x88e368f1
 800164c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001650:	20000204 	.word	0x20000204

08001654 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[18];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e9a      	ldrb	r2, [r3, #26]
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <GNSS_ParseNavigatorData+0x64>)
 8001662:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS->uartWorkingBuffer[19];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7eda      	ldrb	r2, [r3, #27]
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <GNSS_ParseNavigatorData+0x64>)
 800166a:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <GNSS_ParseNavigatorData+0x64>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[20];
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7f1a      	ldrb	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS->uartWorkingBuffer[21];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f5a      	ldrb	r2, [r3, #29]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[22];
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7f9a      	ldrb	r2, [r3, #30]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS->uartWorkingBuffer[23];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7fda      	ldrb	r2, [r3, #31]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[24];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200001fc 	.word	0x200001fc

080016bc <GNSS_ParseNAVSATData>:

void GNSS_ParseNAVSATData(GNSS_StateHandle *GNSS) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	GNSS->satCount = GNSS->uartWorkingBuffer[11];
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7cda      	ldrb	r2, [r3, #19]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	e00c      	b.n	8001704 <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 10];
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	330a      	adds	r3, #10
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	7a19      	ldrb	r1, [r3, #8]
 80016f4:	4a53      	ldr	r2, [pc, #332]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b03      	cmp	r3, #3
 8001708:	ddef      	ble.n	80016ea <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 800170a:	4b4e      	ldr	r3, [pc, #312]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001848 <GNSS_ParsePOSLLHData+0x16c>
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e00c      	b.n	800174c <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 14];
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	330e      	adds	r3, #14
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	7a19      	ldrb	r1, [r3, #8]
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	460a      	mov	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	3301      	adds	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b03      	cmp	r3, #3
 8001750:	ddef      	ble.n	8001732 <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001848 <GNSS_ParsePOSLLHData+0x16c>
 800176c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e00c      	b.n	8001796 <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 18];
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3312      	adds	r3, #18
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	7a19      	ldrb	r1, [r3, #8]
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4413      	add	r3, r2
 800178c:	460a      	mov	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b03      	cmp	r3, #3
 800179a:	ddef      	ble.n	800177c <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e00c      	b.n	80017c6 <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 22];
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	3316      	adds	r3, #22
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	7a19      	ldrb	r1, [r3, #8]
 80017b6:	4a23      	ldr	r2, [pc, #140]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4413      	add	r3, r2
 80017bc:	460a      	mov	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	ddef      	ble.n	80017ac <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <GNSS_ParsePOSLLHData+0x168>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	for (int var = 0; var < 4; ++var) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e00c      	b.n	80017f6 <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 26];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	331a      	adds	r3, #26
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	7a19      	ldrb	r1, [r3, #8]
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <GNSS_ParsePOSLLHData+0x170>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	ddef      	ble.n	80017dc <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <GNSS_ParsePOSLLHData+0x170>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	e00c      	b.n	8001826 <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	331e      	adds	r3, #30
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	7a19      	ldrb	r1, [r3, #8]
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <GNSS_ParsePOSLLHData+0x170>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	460a      	mov	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b03      	cmp	r3, #3
 800182a:	ddef      	ble.n	800180c <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <GNSS_ParsePOSLLHData+0x170>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000204 	.word	0x20000204
 8001848:	4b189680 	.word	0x4b189680
 800184c:	20000200 	.word	0x20000200

08001850 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	221c      	movs	r2, #28
 800185e:	4911      	ldr	r1, [pc, #68]	; (80018a4 <GNSS_LoadConfig+0x54>)
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fecb 	bl	80045fc <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(300);
 8001866:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800186a:	f000 fdcf 	bl	800240c <HAL_Delay>

//	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
//			sizeof(configUBXBaud) / sizeof(uint8_t));
//	HAL_Delay(300);

	HAL_UART_Transmit_DMA(GNSS->huart, setRateTo5hz,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	220e      	movs	r2, #14
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <GNSS_LoadConfig+0x58>)
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fec0 	bl	80045fc <HAL_UART_Transmit_DMA>
			sizeof(setRateTo5hz) / sizeof(uint8_t));
	HAL_Delay(300);
 800187c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001880:	f000 fdc4 	bl	800240c <HAL_Delay>

	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	222c      	movs	r2, #44	; 0x2c
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <GNSS_LoadConfig+0x5c>)
 800188c:	4618      	mov	r0, r3
 800188e:	f002 feb5 	bl	80045fc <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(300);
 8001892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001896:	f000 fdb9 	bl	800240c <HAL_Delay>

//	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
//			sizeof(configUBXSave) / sizeof(uint8_t));
//	HAL_Delay(300);
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0800b678 	.word	0x0800b678
 80018a8:	0800b694 	.word	0x0800b694
 80018ac:	0800b6a4 	.word	0x0800b6a4

080018b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_DMA_Init+0x60>)
 80018b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <MX_DMA_Init+0x60>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6493      	str	r3, [r2, #72]	; 0x48
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_DMA_Init+0x60>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_DMA_Init+0x60>)
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <MX_DMA_Init+0x60>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6493      	str	r3, [r2, #72]	; 0x48
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_DMA_Init+0x60>)
 80018dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	200d      	movs	r0, #13
 80018ec:	f000 feaf 	bl	800264e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018f0:	200d      	movs	r0, #13
 80018f2:	f000 fec6 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	200e      	movs	r0, #14
 80018fc:	f000 fea7 	bl	800264e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001900:	200e      	movs	r0, #14
 8001902:	f000 febe 	bl	8002682 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <MX_GPIO_Init+0xc8>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a25      	ldr	r2, [pc, #148]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_GPIO_Init+0xc8>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|OSC_PROBE_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 fcca 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_GPIO_Init+0xcc>)
 80019b0:	f001 fa58 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|OSC_PROBE_Pin;
 80019b4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f001 fa48 	bl	8002e64 <HAL_GPIO_Init>

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000800 	.word	0x48000800

080019e4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <_write+0x28>)
 80019fc:	f002 fd12 	bl	8004424 <HAL_UART_Transmit>
	return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200002c8 	.word	0x200002c8

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a16:	f000 fc88 	bl	800232a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1a:	f000 f917 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f7ff ff79 	bl	8001914 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001a22:	f000 fa8b 	bl	8001f3c <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 8001a26:	f7ff ff43 	bl	80018b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001a2a:	f000 fad1 	bl	8001fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Start to configure GNSS module. Set baudrate to 115200, disable NMEA, set rate to 5 Hz, etc.
	GNSS_Init(&GNSS_Handle, &huart1);
 8001a2e:	4976      	ldr	r1, [pc, #472]	; (8001c08 <main+0x1f8>)
 8001a30:	4876      	ldr	r0, [pc, #472]	; (8001c0c <main+0x1fc>)
 8001a32:	f7ff fb09 	bl	8001048 <GNSS_Init>

	// Because we changed GNSS baud rate to 115200, we need to change also UART1 baud rate and init it again.
	HAL_UART_Abort_IT(&huart1);
 8001a36:	4874      	ldr	r0, [pc, #464]	; (8001c08 <main+0x1f8>)
 8001a38:	f002 fe72 	bl	8004720 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&huart1);
 8001a3c:	4872      	ldr	r0, [pc, #456]	; (8001c08 <main+0x1f8>)
 8001a3e:	f002 fcb5 	bl	80043ac <HAL_UART_DeInit>
	huart1.Init.BaudRate = 115200;
 8001a42:	4b71      	ldr	r3, [pc, #452]	; (8001c08 <main+0x1f8>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a4a:	486f      	ldr	r0, [pc, #444]	; (8001c08 <main+0x1f8>)
 8001a4c:	f002 fc5e 	bl	800430c <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <main+0x4a>
	    Error_Handler();
 8001a56:	f000 f944 	bl	8001ce2 <Error_Handler>
	}
	HAL_Delay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f000 fcd5 	bl	800240c <HAL_Delay>

	// Timer values for GNSS requester and Hz counter
	uint32_t Timer = HAL_GetTick();
 8001a62:	f000 fcc7 	bl	80023f4 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
	uint32_t TimeHz = HAL_GetTick();
 8001a68:	f000 fcc4 	bl	80023f4 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
	int printFlag = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]

	// Set GNSS mode to desired aplication case
	GNSS_SetMode(&GNSS_Handle, Stationary);
 8001a72:	2101      	movs	r1, #1
 8001a74:	4865      	ldr	r0, [pc, #404]	; (8001c0c <main+0x1fc>)
 8001a76:	f7ff fbf1 	bl	800125c <GNSS_SetMode>

	HAL_Delay(250);
 8001a7a:	20fa      	movs	r0, #250	; 0xfa
 8001a7c:	f000 fcc6 	bl	800240c <HAL_Delay>
    /* USER CODE BEGIN 3 */

	// Request GNSS data whenever timer hits 100 ms.
	// As HAL_GetTick returns SysTime as milliseconds, 100 ms means we are getting
	// 		GNSS values at 5 Hz rate
	if ((HAL_GetTick() - Timer) > 200) {
 8001a80:	f000 fcb8 	bl	80023f4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2bc8      	cmp	r3, #200	; 0xc8
 8001a8c:	d90f      	bls.n	8001aae <main+0x9e>

		// Request "Navigation Position Velocity Time Solution"
		// Refeer to "32.17.17 UBX-NAV-PVT (0x01 0x07)" at M8N Interface manual
		GNSS_GetPVTData(&GNSS_Handle);
 8001a8e:	485f      	ldr	r0, [pc, #380]	; (8001c0c <main+0x1fc>)
 8001a90:	f7ff fbaa 	bl	80011e8 <GNSS_GetPVTData>
		GNSS_ParseBuffer(&GNSS_Handle);
 8001a94:	485d      	ldr	r0, [pc, #372]	; (8001c0c <main+0x1fc>)
 8001a96:	f7ff fb2d 	bl	80010f4 <GNSS_ParseBuffer>

		Timer = HAL_GetTick();
 8001a9a:	f000 fcab 	bl	80023f4 <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]

		printFlag = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
		count ++;
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <main+0x200>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <main+0x200>)
 8001aac:	6013      	str	r3, [r2, #0]
	}

	// As printing to external com port is time consuming, we are doing this task
	//		outside our 5 Hz time-dependent loop
	if (printFlag == 1){
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	f040 8086 	bne.w	8001bc2 <main+0x1b2>
		printf("Day: %d-%d-%d \r\n", GNSS_Handle.day, GNSS_Handle.month,GNSS_Handle.year);
 8001ab6:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <main+0x1fc>)
 8001ab8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001abc:	4619      	mov	r1, r3
 8001abe:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <main+0x1fc>)
 8001ac0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <main+0x1fc>)
 8001ac8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001acc:	4851      	ldr	r0, [pc, #324]	; (8001c14 <main+0x204>)
 8001ace:	f005 fe8f 	bl	80077f0 <iprintf>
		printf("Time: %d:%d:%d \r\n", GNSS_Handle.hour, GNSS_Handle.min,GNSS_Handle.sec);
 8001ad2:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <main+0x1fc>)
 8001ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <main+0x1fc>)
 8001adc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <main+0x1fc>)
 8001ae4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001ae8:	484b      	ldr	r0, [pc, #300]	; (8001c18 <main+0x208>)
 8001aea:	f005 fe81 	bl	80077f0 <iprintf>
		printf("Status of fix: %d \r\n", GNSS_Handle.fixType);
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <main+0x1fc>)
 8001af0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001af4:	4619      	mov	r1, r3
 8001af6:	4849      	ldr	r0, [pc, #292]	; (8001c1c <main+0x20c>)
 8001af8:	f005 fe7a 	bl	80077f0 <iprintf>
		printf("Number of satellites used: %d \r\n", GNSS_Handle.numSV);
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <main+0x1fc>)
 8001afe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001b02:	4619      	mov	r1, r3
 8001b04:	4846      	ldr	r0, [pc, #280]	; (8001c20 <main+0x210>)
 8001b06:	f005 fe73 	bl	80077f0 <iprintf>
		printf("Number of Sat.: %d \r\n", GNSS_Handle.satCount);
 8001b0a:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <main+0x1fc>)
 8001b0c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001b10:	4619      	mov	r1, r3
 8001b12:	4844      	ldr	r0, [pc, #272]	; (8001c24 <main+0x214>)
 8001b14:	f005 fe6c 	bl	80077f0 <iprintf>
		printf("Latitude: %f \r\n", GNSS_Handle.fLat);
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <main+0x1fc>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd3a 	bl	8000598 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	483f      	ldr	r0, [pc, #252]	; (8001c28 <main+0x218>)
 8001b2a:	f005 fe61 	bl	80077f0 <iprintf>
		printf("Longitude: %f \r\n",(float) GNSS_Handle.lon / 10000000.0);
 8001b2e:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <main+0x1fc>)
 8001b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	ee17 0a90 	vmov	r0, s15
 8001b3e:	f7fe fd2b 	bl	8000598 <__aeabi_f2d>
 8001b42:	a32f      	add	r3, pc, #188	; (adr r3, 8001c00 <main+0x1f0>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fea8 	bl	800089c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4836      	ldr	r0, [pc, #216]	; (8001c2c <main+0x21c>)
 8001b52:	f005 fe4d 	bl	80077f0 <iprintf>
		printf("Height above ellipsoid (meters): %f \r\n", (float) (GNSS_Handle.height) / 1000.0);
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <main+0x1fc>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	ee17 0a90 	vmov	r0, s15
 8001b68:	f7fe fd16 	bl	8000598 <__aeabi_f2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <main+0x220>)
 8001b72:	f7fe fe93 	bl	800089c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <main+0x224>)
 8001b7c:	f005 fe38 	bl	80077f0 <iprintf>
		printf("Height above mean sea level (meters): %f \r\n", (float) (GNSS_Handle.hMSL) / 1000.0);
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <main+0x1fc>)
 8001b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	ee17 0a90 	vmov	r0, s15
 8001b92:	f7fe fd01 	bl	8000598 <__aeabi_f2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <main+0x220>)
 8001b9c:	f7fe fe7e 	bl	800089c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4824      	ldr	r0, [pc, #144]	; (8001c38 <main+0x228>)
 8001ba6:	f005 fe23 	bl	80077f0 <iprintf>
		printf("Ground Speed (2-D): %ld \r\n", GNSS_Handle.gSpeed);
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <main+0x1fc>)
 8001bac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4822      	ldr	r0, [pc, #136]	; (8001c3c <main+0x22c>)
 8001bb4:	f005 fe1c 	bl	80077f0 <iprintf>
		printf("***************************************************\r\n");
 8001bb8:	4821      	ldr	r0, [pc, #132]	; (8001c40 <main+0x230>)
 8001bba:	f005 fe9f 	bl	80078fc <puts>

		printFlag = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	}

	if ((HAL_GetTick() - TimeHz) > 1000) {
 8001bc2:	f000 fc17 	bl	80023f4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd0:	f67f af56 	bls.w	8001a80 <main+0x70>
		printf("Hz rate is: %d, time is: %lu \r\n", count, TimeHz);
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <main+0x200>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4819      	ldr	r0, [pc, #100]	; (8001c44 <main+0x234>)
 8001bde:	f005 fe07 	bl	80077f0 <iprintf>
		printf("***************************************************\r\n");
 8001be2:	4817      	ldr	r0, [pc, #92]	; (8001c40 <main+0x230>)
 8001be4:	f005 fe8a 	bl	80078fc <puts>
		countMax = count;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <main+0x200>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <main+0x238>)
 8001bee:	6013      	str	r3, [r2, #0]
		count = 0;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <main+0x200>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		TimeHz = HAL_GetTick();
 8001bf6:	f000 fbfd 	bl	80023f4 <HAL_GetTick>
 8001bfa:	60b8      	str	r0, [r7, #8]
	if ((HAL_GetTick() - Timer) > 200) {
 8001bfc:	e740      	b.n	8001a80 <main+0x70>
 8001bfe:	bf00      	nop
 8001c00:	00000000 	.word	0x00000000
 8001c04:	416312d0 	.word	0x416312d0
 8001c08:	20000358 	.word	0x20000358
 8001c0c:	20000208 	.word	0x20000208
 8001c10:	200002bc 	.word	0x200002bc
 8001c14:	0800b510 	.word	0x0800b510
 8001c18:	0800b524 	.word	0x0800b524
 8001c1c:	0800b538 	.word	0x0800b538
 8001c20:	0800b550 	.word	0x0800b550
 8001c24:	0800b574 	.word	0x0800b574
 8001c28:	0800b58c 	.word	0x0800b58c
 8001c2c:	0800b59c 	.word	0x0800b59c
 8001c30:	408f4000 	.word	0x408f4000
 8001c34:	0800b5b0 	.word	0x0800b5b0
 8001c38:	0800b5d8 	.word	0x0800b5d8
 8001c3c:	0800b604 	.word	0x0800b604
 8001c40:	0800b620 	.word	0x0800b620
 8001c44:	0800b658 	.word	0x0800b658
 8001c48:	200002c0 	.word	0x200002c0

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	; 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 ff46 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f001 fb74 	bl	800335c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c8e:	2355      	movs	r3, #85	; 0x55
 8001c90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fc0e 	bl	80034c4 <HAL_RCC_OscConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cae:	f000 f818 	bl	8001ce2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 ff12 	bl	8003af4 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cd6:	f000 f804 	bl	8001ce2 <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3750      	adds	r7, #80	; 0x50
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce6:	b672      	cpsid	i
}
 8001ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cea:	e7fe      	b.n	8001cea <Error_Handler+0x8>

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x44>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x44>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x44>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x44>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d22:	f001 fbbf 	bl	80034a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 fb26 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Channel3_IRQHandler+0x10>)
 8001d8e:	f000 ff1a 	bl	8002bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003e8 	.word	0x200003e8

08001d9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Channel4_IRQHandler+0x10>)
 8001da2:	f000 ff10 	bl	8002bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000448 	.word	0x20000448

08001db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART1_IRQHandler+0x10>)
 8001db6:	f002 fde9 	bl	800498c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000358 	.word	0x20000358

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dde:	f004 fe5b 	bl	8006a98 <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2216      	movs	r2, #22
 8001de6:	601a      	str	r2, [r3, #0]
	return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe7 	bl	8001dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e06:	e7fe      	b.n	8001e06 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
	}

return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
	return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_isatty>:

int _isatty(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f004 fddc 	bl	8006a98 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20008000 	.word	0x20008000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	200002c4 	.word	0x200002c4
 8001f14:	200004c0 	.word	0x200004c0

08001f18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f42:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <MX_LPUART1_UART_Init+0x90>)
 8001f44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f7e:	4812      	ldr	r0, [pc, #72]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f80:	f002 f9c4 	bl	800430c <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f8a:	f7ff feaa 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001f92:	f004 fcb6 	bl	8006902 <HAL_UARTEx_SetTxFifoThreshold>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f9c:	f7ff fea1 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001fa4:	f004 fceb 	bl	800697e <HAL_UARTEx_SetRxFifoThreshold>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001fae:	f7ff fe98 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_LPUART1_UART_Init+0x8c>)
 8001fb4:	f004 fc6c 	bl	8006890 <HAL_UARTEx_DisableFifoMode>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001fbe:	f7ff fe90 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200002c8 	.word	0x200002c8
 8001fcc:	40008000 	.word	0x40008000

08001fd0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001fd6:	4a23      	ldr	r2, [pc, #140]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USART1_UART_Init+0x90>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <MX_USART1_UART_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <MX_USART1_UART_Init+0x90>)
 800201a:	f002 f977 	bl	800430c <HAL_UART_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002024:	f7ff fe5d 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002028:	2100      	movs	r1, #0
 800202a:	480d      	ldr	r0, [pc, #52]	; (8002060 <MX_USART1_UART_Init+0x90>)
 800202c:	f004 fc69 	bl	8006902 <HAL_UARTEx_SetTxFifoThreshold>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002036:	f7ff fe54 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203a:	2100      	movs	r1, #0
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <MX_USART1_UART_Init+0x90>)
 800203e:	f004 fc9e 	bl	800697e <HAL_UARTEx_SetRxFifoThreshold>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002048:	f7ff fe4b 	bl	8001ce2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_USART1_UART_Init+0x90>)
 800204e:	f004 fc1f 	bl	8006890 <HAL_UARTEx_DisableFifoMode>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002058:	f7ff fe43 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000358 	.word	0x20000358
 8002064:	40013800 	.word	0x40013800

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b09c      	sub	sp, #112	; 0x70
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	2244      	movs	r2, #68	; 0x44
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fd2f 	bl	8006aec <memset>
  if(uartHandle->Instance==LPUART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_UART_MspInit+0x1d4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d137      	bne.n	8002108 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002098:	2320      	movs	r3, #32
 800209a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 ff41 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020b0:	f7ff fe17 	bl	8001ce2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	4a5b      	ldr	r2, [pc, #364]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80020e4:	230c      	movs	r3, #12
 80020e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80020f4:	230c      	movs	r3, #12
 80020f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020fc:	4619      	mov	r1, r3
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f000 feaf 	bl	8002e64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002106:	e095      	b.n	8002234 <HAL_UART_MspInit+0x1cc>
  else if(uartHandle->Instance==USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_UART_MspInit+0x1dc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f040 8090 	bne.w	8002234 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002114:	2301      	movs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4618      	mov	r0, r3
 8002122:	f001 ff03 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800212c:	f7ff fdd9 	bl	8001ce2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 8002136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213a:	6613      	str	r3, [r2, #96]	; 0x60
 800213c:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	4a3c      	ldr	r2, [pc, #240]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002154:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_UART_MspInit+0x1d8>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002160:	2330      	movs	r3, #48	; 0x30
 8002162:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002170:	2307      	movs	r3, #7
 8002172:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002174:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002178:	4619      	mov	r1, r3
 800217a:	4833      	ldr	r0, [pc, #204]	; (8002248 <HAL_UART_MspInit+0x1e0>)
 800217c:	f000 fe72 	bl	8002e64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002180:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_UART_MspInit+0x1e4>)
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <HAL_UART_MspInit+0x1e8>)
 8002184:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_UART_MspInit+0x1e4>)
 8002188:	2218      	movs	r2, #24
 800218a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_UART_MspInit+0x1e4>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_UART_MspInit+0x1e4>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_UART_MspInit+0x1e4>)
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021b6:	4825      	ldr	r0, [pc, #148]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021b8:	f000 fa8c 	bl	80026d4 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 80021c2:	f7ff fd8e 	bl	8001ce2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80021cc:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_UART_MspInit+0x1e4>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021d4:	4a20      	ldr	r2, [pc, #128]	; (8002258 <HAL_UART_MspInit+0x1f0>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021da:	2219      	movs	r2, #25
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021e0:	2210      	movs	r2, #16
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002208:	4812      	ldr	r0, [pc, #72]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 800220a:	f000 fa63 	bl	80026d4 <HAL_DMA_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002214:	f7ff fd65 	bl	8001ce2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 800221c:	679a      	str	r2, [r3, #120]	; 0x78
 800221e:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_UART_MspInit+0x1ec>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2025      	movs	r0, #37	; 0x25
 800222a:	f000 fa10 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800222e:	2025      	movs	r0, #37	; 0x25
 8002230:	f000 fa27 	bl	8002682 <HAL_NVIC_EnableIRQ>
}
 8002234:	bf00      	nop
 8002236:	3770      	adds	r7, #112	; 0x70
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40008000 	.word	0x40008000
 8002240:	40021000 	.word	0x40021000
 8002244:	40013800 	.word	0x40013800
 8002248:	48000800 	.word	0x48000800
 800224c:	200003e8 	.word	0x200003e8
 8002250:	40020030 	.word	0x40020030
 8002254:	20000448 	.word	0x20000448
 8002258:	40020044 	.word	0x40020044

0800225c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_UART_MspDeInit+0x6c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10b      	bne.n	8002286 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_UART_MspDeInit+0x70>)
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_UART_MspDeInit+0x70>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, LPUART1_TX_Pin|LPUART1_RX_Pin);
 800227a:	210c      	movs	r1, #12
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f000 ff72 	bl	8003168 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002284:	e01b      	b.n	80022be <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_UART_MspDeInit+0x74>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d116      	bne.n	80022be <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART1_CLK_DISABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_UART_MspDeInit+0x70>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_UART_MspDeInit+0x70>)
 8002296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800229a:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800229c:	2130      	movs	r1, #48	; 0x30
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <HAL_UART_MspDeInit+0x78>)
 80022a0:	f000 ff62 	bl	8003168 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fabb 	bl	8002824 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fab6 	bl	8002824 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80022b8:	2025      	movs	r0, #37	; 0x25
 80022ba:	f000 f9f0 	bl	800269e <HAL_NVIC_DisableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40008000 	.word	0x40008000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40013800 	.word	0x40013800
 80022d4:	48000800 	.word	0x48000800

080022d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <LoopForever+0x6>)
  ldr r1, =_edata
 80022de:	490e      	ldr	r1, [pc, #56]	; (8002318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <LoopForever+0xe>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f4:	4c0b      	ldr	r4, [pc, #44]	; (8002324 <LoopForever+0x16>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002302:	f7ff fe09 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002306:	f004 fbcd 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800230a:	f7ff fb81 	bl	8001a10 <main>

0800230e <LoopForever>:

LoopForever:
    b LoopForever
 800230e:	e7fe      	b.n	800230e <LoopForever>
  ldr   r0, =_estack
 8002310:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800231c:	0800bd64 	.word	0x0800bd64
  ldr r2, =_sbss
 8002320:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002324:	200004bc 	.word	0x200004bc

08002328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC1_2_IRQHandler>

0800232a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f97f 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f80e 	bl	800235c <HAL_InitTick>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	71fb      	strb	r3, [r7, #7]
 800234a:	e001      	b.n	8002350 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800234c:	f7ff fcce 	bl	8001cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002350:	79fb      	ldrb	r3, [r7, #7]

}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_InitTick+0x68>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d022      	beq.n	80023b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_InitTick+0x6c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_InitTick+0x68>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800237c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f998 	bl	80026ba <HAL_SYSTICK_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10f      	bne.n	80023b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	d809      	bhi.n	80023aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002396:	2200      	movs	r2, #0
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	f000 f956 	bl	800264e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_InitTick+0x70>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e007      	b.n	80023ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e004      	b.n	80023ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e001      	b.n	80023ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000008 	.word	0x20000008
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_IncTick+0x1c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_IncTick+0x20>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	4a03      	ldr	r2, [pc, #12]	; (80023ec <HAL_IncTick+0x1c>)
 80023e0:	6013      	str	r3, [r2, #0]
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	200004a8 	.word	0x200004a8
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200004a8 	.word	0x200004a8

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d004      	beq.n	8002430 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_Delay+0x40>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002430:	bf00      	nop
 8002432:	f7ff ffdf 	bl	80023f4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8f7      	bhi.n	8002432 <HAL_Delay+0x26>
  {
  }
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000008 	.word	0x20000008

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db12      	blt.n	8002528 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	490a      	ldr	r1, [pc, #40]	; (8002534 <__NVIC_DisableIRQ+0x44>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	3320      	adds	r3, #32
 8002518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800251c:	f3bf 8f4f 	dsb	sy
}
 8002520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002522:	f3bf 8f6f 	isb	sy
}
 8002526:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f7ff ff8e 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff05 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff1c 	bl	8002498 <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff90 	bl	800258c <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5f 	bl	8002538 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff0f 	bl	80024b4 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff1f 	bl	80024f0 <__NVIC_DisableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff96 	bl	80025f4 <SysTick_Config>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08d      	b.n	8002802 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_DMA_Init+0x138>)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d80f      	bhi.n	8002712 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b45      	ldr	r3, [pc, #276]	; (8002810 <HAL_DMA_Init+0x13c>)
 80026fa:	4413      	add	r3, r2
 80026fc:	4a45      	ldr	r2, [pc, #276]	; (8002814 <HAL_DMA_Init+0x140>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a42      	ldr	r2, [pc, #264]	; (8002818 <HAL_DMA_Init+0x144>)
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
 8002710:	e00e      	b.n	8002730 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4b40      	ldr	r3, [pc, #256]	; (800281c <HAL_DMA_Init+0x148>)
 800271a:	4413      	add	r3, r2
 800271c:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <HAL_DMA_Init+0x140>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a3c      	ldr	r2, [pc, #240]	; (8002820 <HAL_DMA_Init+0x14c>)
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb0c 	bl	8002da0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002790:	d102      	bne.n	8002798 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_DMA_Init+0x104>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d80c      	bhi.n	80027d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fb2c 	bl	8002e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e008      	b.n	80027ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020407 	.word	0x40020407
 8002810:	bffdfff8 	.word	0xbffdfff8
 8002814:	cccccccd 	.word	0xcccccccd
 8002818:	40020000 	.word	0x40020000
 800281c:	bffdfbf8 	.word	0xbffdfbf8
 8002820:	40020400 	.word	0x40020400

08002824 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07b      	b.n	800292e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_DMA_DeInit+0x114>)
 800284e:	429a      	cmp	r2, r3
 8002850:	d80f      	bhi.n	8002872 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_DMA_DeInit+0x118>)
 800285a:	4413      	add	r3, r2
 800285c:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_DMA_DeInit+0x11c>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	009a      	lsls	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a35      	ldr	r2, [pc, #212]	; (8002944 <HAL_DMA_DeInit+0x120>)
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
 8002870:	e00e      	b.n	8002890 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_DMA_DeInit+0x124>)
 800287a:	4413      	add	r3, r2
 800287c:	4a30      	ldr	r2, [pc, #192]	; (8002940 <HAL_DMA_DeInit+0x11c>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2f      	ldr	r2, [pc, #188]	; (800294c <HAL_DMA_DeInit+0x128>)
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fa77 	bl	8002da0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028c2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00f      	beq.n	80028ec <HAL_DMA_DeInit+0xc8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d80b      	bhi.n	80028ec <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 faa1 	bl	8002e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028ea:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40020407 	.word	0x40020407
 800293c:	bffdfff8 	.word	0xbffdfff8
 8002940:	cccccccd 	.word	0xcccccccd
 8002944:	40020000 	.word	0x40020000
 8002948:	bffdfbf8 	.word	0xbffdfbf8
 800294c:	40020400 	.word	0x40020400

08002950 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Start_IT+0x20>
 800296c:	2302      	movs	r3, #2
 800296e:	e066      	b.n	8002a3e <HAL_DMA_Start_IT+0xee>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d155      	bne.n	8002a30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f9bb 	bl	8002d24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020e 	orr.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00f      	b.n	80029e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020a 	orr.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e005      	b.n	8002a3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d005      	beq.n	8002a6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e037      	b.n	8002ada <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 020e 	bic.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ab6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ad8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	e047      	b.n	8002bbc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020e 	bic.w	r2, r2, #14
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
    }
  }
  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2204      	movs	r2, #4
 8002be8:	409a      	lsls	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d026      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x7a>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d021      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0204 	bic.w	r2, r2, #4
 8002c18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2104      	movs	r1, #4
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d071      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c3e:	e06c      	b.n	8002d1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2202      	movs	r2, #2
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02e      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d029      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 020a 	bic.w	r2, r2, #10
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2102      	movs	r1, #2
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d038      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cb0:	e033      	b.n	8002d1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2208      	movs	r2, #8
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d02a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d025      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 020e 	bic.w	r2, r2, #14
 8002cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
}
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f003 021f 	and.w	r2, r3, #31
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d108      	bne.n	8002d84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d82:	e007      	b.n	8002d94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d802      	bhi.n	8002dba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e001      	b.n	8002dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dbc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3b08      	subs	r3, #8
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	009a      	lsls	r2, r3, #2
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2201      	movs	r2, #1
 8002df4:	409a      	lsls	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40020407 	.word	0x40020407
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020820 	.word	0x40020820
 8002e14:	cccccccd 	.word	0xcccccccd
 8002e18:	40020880 	.word	0x40020880

08002e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2201      	movs	r2, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	1000823f 	.word	0x1000823f
 8002e60:	40020940 	.word	0x40020940

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e72:	e15a      	b.n	800312a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 814c 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d017      	beq.n	8002f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80a6 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	; (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fe4:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff0:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x1f8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1f4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4b      	ldr	r2, [pc, #300]	; (8003154 <HAL_GPIO_Init+0x2f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1ec>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a49      	ldr	r2, [pc, #292]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1e8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_GPIO_Init+0x2fc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1e4>
 8003044:	2305      	movs	r3, #5
 8003046:	e00a      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003048:	2306      	movs	r3, #6
 800304a:	e008      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800304c:	2304      	movs	r3, #4
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003050:	2303      	movs	r3, #3
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800305c:	2300      	movs	r3, #0
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306e:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_GPIO_Init+0x300>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a0:	4a30      	ldr	r2, [pc, #192]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_GPIO_Init+0x300>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_GPIO_Init+0x300>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae9d 	bne.w	8002e74 <HAL_GPIO_Init+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	48000400 	.word	0x48000400
 8003154:	48000800 	.word	0x48000800
 8003158:	48000c00 	.word	0x48000c00
 800315c:	48001000 	.word	0x48001000
 8003160:	48001400 	.word	0x48001400
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003176:	e0bd      	b.n	80032f4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003178:	2201      	movs	r2, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80b0 	beq.w	80032ee <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a60      	ldr	r2, [pc, #384]	; (8003310 <HAL_GPIO_DeInit+0x1a8>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d01f      	beq.n	80031f8 <HAL_GPIO_DeInit+0x90>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_DeInit+0x1ac>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d019      	beq.n	80031f4 <HAL_GPIO_DeInit+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_GPIO_DeInit+0x1b0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_GPIO_DeInit+0x88>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_GPIO_DeInit+0x1b4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00d      	beq.n	80031ec <HAL_GPIO_DeInit+0x84>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_GPIO_DeInit+0x1b8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <HAL_GPIO_DeInit+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_DeInit+0x1bc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_GPIO_DeInit+0x7c>
 80031e0:	2305      	movs	r3, #5
 80031e2:	e00a      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031e4:	2306      	movs	r3, #6
 80031e6:	e008      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e006      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031ec:	2303      	movs	r3, #3
 80031ee:	e004      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e002      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_GPIO_DeInit+0x92>
 80031f8:	2300      	movs	r3, #0
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	4093      	lsls	r3, r2
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	429a      	cmp	r2, r3
 8003208:	d132      	bne.n	8003270 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	4945      	ldr	r1, [pc, #276]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 8003214:	4013      	ands	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	4941      	ldr	r1, [pc, #260]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 8003222:	4013      	ands	r3, r2
 8003224:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	493e      	ldr	r1, [pc, #248]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 8003230:	4013      	ands	r3, r2
 8003232:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003234:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	493a      	ldr	r1, [pc, #232]	; (8003328 <HAL_GPIO_DeInit+0x1c0>)
 800323e:	4013      	ands	r3, r2
 8003240:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003252:	4a2f      	ldr	r2, [pc, #188]	; (8003310 <HAL_GPIO_DeInit+0x1a8>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43da      	mvns	r2, r3
 8003262:	482b      	ldr	r0, [pc, #172]	; (8003310 <HAL_GPIO_DeInit+0x1a8>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	400a      	ands	r2, r1
 800326a:	3302      	adds	r3, #2
 800326c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2103      	movs	r1, #3
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	08d2      	lsrs	r2, r2, #3
 80032a4:	4019      	ands	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2103      	movs	r1, #3
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2103      	movs	r1, #3
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	401a      	ands	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3301      	adds	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f af3b 	bne.w	8003178 <HAL_GPIO_DeInit+0x10>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40010000 	.word	0x40010000
 8003314:	48000400 	.word	0x48000400
 8003318:	48000800 	.word	0x48000800
 800331c:	48000c00 	.word	0x48000c00
 8003320:	48001000 	.word	0x48001000
 8003324:	48001400 	.word	0x48001400
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003348:	e002      	b.n	8003350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d141      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336a:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d131      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337e:	4a46      	ldr	r2, [pc, #280]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003390:	4a41      	ldr	r2, [pc, #260]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003398:	4b40      	ldr	r3, [pc, #256]	; (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2232      	movs	r2, #50	; 0x32
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ae:	e002      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d102      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f2      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	d158      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e057      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033ec:	e04d      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f4:	d141      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d131      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340a:	4a23      	ldr	r2, [pc, #140]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2232      	movs	r2, #50	; 0x32
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343a:	e002      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b01      	subs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d102      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d112      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e011      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003478:	e007      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40007000 	.word	0x40007000
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b2:	6093      	str	r3, [r2, #8]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e306      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d075      	beq.n	80035ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	4b97      	ldr	r3, [pc, #604]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ec:	4b94      	ldr	r3, [pc, #592]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0x3e>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d002      	beq.n	8003508 <HAL_RCC_OscConfig+0x44>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x108>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2e1      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x74>
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a84      	ldr	r2, [pc, #528]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b7f      	ldr	r3, [pc, #508]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7e      	ldr	r2, [pc, #504]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b7c      	ldr	r3, [pc, #496]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7b      	ldr	r2, [pc, #492]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 800355c:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a77      	ldr	r2, [pc, #476]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe ff3a 	bl	80023f4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe ff36 	bl	80023f4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e2a6      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xc0>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe ff26 	bl	80023f4 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe ff22 	bl	80023f4 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e292      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b60      	ldr	r3, [pc, #384]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0xe8>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0x136>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_OscConfig+0x13c>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11f      	bne.n	8003640 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003600:	4b4f      	ldr	r3, [pc, #316]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x154>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e265      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	4946      	ldr	r1, [pc, #280]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe93 	bl	800235c <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d043      	beq.n	80036c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e251      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fece 	bl	80023f4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fe feca 	bl	80023f4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e23a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	061b      	lsls	r3, r3, #24
 8003688:	492d      	ldr	r1, [pc, #180]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
 800368e:	e01a      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe feaa 	bl	80023f4 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fea6 	bl	80023f4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e216      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d041      	beq.n	8003756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01c      	beq.n	8003714 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fe83 	bl	80023f4 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fe7f 	bl	80023f4 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1ef      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCC_OscConfig+0x22e>
 8003712:	e020      	b.n	8003756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x27c>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fe66 	bl	80023f4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372a:	e00d      	b.n	8003748 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fe62 	bl	80023f4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d906      	bls.n	8003748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1d2      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003748:	4b8c      	ldr	r3, [pc, #560]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ea      	bne.n	800372c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a6 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003768:	4b84      	ldr	r3, [pc, #528]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x2b4>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x2b6>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a7e      	ldr	r2, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
 800378a:	4b7c      	ldr	r3, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b79      	ldr	r3, [pc, #484]	; (8003980 <HAL_RCC_OscConfig+0x4bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a75      	ldr	r2, [pc, #468]	; (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe fe1f 	bl	80023f4 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe fe1b 	bl	80023f4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e18b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_RCC_OscConfig+0x32e>
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f0:	e024      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d110      	bne.n	800381c <HAL_RCC_OscConfig+0x358>
 80037fa:	4b60      	ldr	r3, [pc, #384]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380a:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	4a5a      	ldr	r2, [pc, #360]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 800381c:	4b57      	ldr	r3, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a56      	ldr	r2, [pc, #344]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fdd6 	bl	80023f4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fdd2 	bl	80023f4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e140      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCC_OscConfig+0x388>
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fdbf 	bl	80023f4 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fdbb 	bl	80023f4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e129      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ed      	bne.n	800387a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b35      	ldr	r3, [pc, #212]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	4a34      	ldr	r2, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03c      	beq.n	8003936 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c4:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ca:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fd8e 	bl	80023f4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038dc:	f7fe fd8a 	bl	80023f4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e0fa      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ee:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <HAL_RCC_OscConfig+0x418>
 80038fc:	e01b      	b.n	8003936 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fe fd71 	bl	80023f4 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003916:	f7fe fd6d 	bl	80023f4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0dd      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ef      	bne.n	8003916 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80d1 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f000 808b 	beq.w	8003a64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d15e      	bne.n	8003a14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fd47 	bl	80023f4 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	e00c      	b.n	8003984 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fd43 	bl	80023f4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d905      	bls.n	8003984 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0b3      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ec      	bne.n	800396a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_OscConfig+0x62c>)
 8003996:	4013      	ands	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6a11      	ldr	r1, [r2, #32]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039aa:	0212      	lsls	r2, r2, #8
 80039ac:	4311      	orrs	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0552      	lsls	r2, r2, #21
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0652      	lsls	r2, r2, #25
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ca:	06d2      	lsls	r2, r2, #27
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4947      	ldr	r1, [pc, #284]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a44      	ldr	r2, [pc, #272]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a41      	ldr	r2, [pc, #260]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fd02 	bl	80023f4 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe fcfe 	bl	80023f4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e06e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x530>
 8003a12:	e066      	b.n	8003ae2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a31      	ldr	r2, [pc, #196]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fcda 	bl	80023f4 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe fcd6 	bl	80023f4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e046      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x580>
 8003a62:	e03e      	b.n	8003ae2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e039      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_OscConfig+0x628>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d12c      	bne.n	8003ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d123      	bne.n	8003ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11b      	bne.n	8003ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d113      	bne.n	8003ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	019f800c 	.word	0x019f800c

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e11e      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b8e      	ldr	r3, [pc, #568]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 020f 	bic.w	r2, r3, #15
 8003b22:	498c      	ldr	r1, [pc, #560]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b8a      	ldr	r3, [pc, #552]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e106      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d073      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d129      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b50:	4b81      	ldr	r3, [pc, #516]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0f4      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b60:	f000 f99e 	bl	8003ea0 <RCC_GetSysClockFreqFromPLLSource>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4a7c      	ldr	r2, [pc, #496]	; (8003d5c <HAL_RCC_ClockConfig+0x268>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d93f      	bls.n	8003bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b6e:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d033      	beq.n	8003bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d12f      	bne.n	8003bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b96:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e024      	b.n	8003bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0c6      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0be      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bcc:	f000 f8ce 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4a61      	ldr	r2, [pc, #388]	; (8003d5c <HAL_RCC_ClockConfig+0x268>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d909      	bls.n	8003bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bda:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be2:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4957      	ldr	r1, [pc, #348]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe fbf8 	bl	80023f4 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe fbf4 	bl	80023f4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e095      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c60:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c68:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4936      	ldr	r1, [pc, #216]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a32      	ldr	r2, [pc, #200]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d21d      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 020f 	bic.w	r2, r3, #15
 8003cac:	4929      	ldr	r1, [pc, #164]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe fb9e 	bl	80023f4 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe fb9a 	bl	80023f4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e03b      	b.n	8003d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d1ed      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4917      	ldr	r1, [pc, #92]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490f      	ldr	r1, [pc, #60]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d1e:	f000 f825 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <HAL_RCC_ClockConfig+0x264>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490c      	ldr	r1, [pc, #48]	; (8003d60 <HAL_RCC_ClockConfig+0x26c>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <HAL_RCC_ClockConfig+0x270>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_RCC_ClockConfig+0x274>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fb0a 	bl	800235c <HAL_InitTick>
 8003d48:	4603      	mov	r3, r0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	04c4b400 	.word	0x04c4b400
 8003d60:	0800b864 	.word	0x0800b864
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d72:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e047      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	e03e      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d136      	bne.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3301      	adds	r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dca:	68d2      	ldr	r2, [r2, #12]
 8003dcc:	0a12      	lsrs	r2, r2, #8
 8003dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	617b      	str	r3, [r7, #20]
      break;
 8003dd8:	e00c      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	0a12      	lsrs	r2, r2, #8
 8003de8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0e5b      	lsrs	r3, r3, #25
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	e001      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e14:	693b      	ldr	r3, [r7, #16]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	016e3600 	.word	0x016e3600

08003e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e4c:	f7ff fff0 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4904      	ldr	r1, [pc, #16]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	0800b874 	.word	0x0800b874

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e78:	f7ff ffda 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0adb      	lsrs	r3, r3, #11
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	0800b874 	.word	0x0800b874

08003ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d10c      	bne.n	8003ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ece:	68d2      	ldr	r2, [r2, #12]
 8003ed0:	0a12      	lsrs	r2, r2, #8
 8003ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
    break;
 8003edc:	e00c      	b.n	8003ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee8:	68d2      	ldr	r2, [r2, #12]
 8003eea:	0a12      	lsrs	r2, r2, #8
 8003eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
    break;
 8003ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0e5b      	lsrs	r3, r3, #25
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	3301      	adds	r3, #1
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f12:	687b      	ldr	r3, [r7, #4]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000
 8003f24:	016e3600 	.word	0x016e3600
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8098 	beq.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4b40      	ldr	r3, [pc, #256]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f76:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a39      	ldr	r2, [pc, #228]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f82:	f7fe fa37 	bl	80023f4 <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f88:	e009      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe fa33 	bl	80023f4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9e:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d159      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01e      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d019      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd8:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fe f9f3 	bl	80023f4 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	e00b      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe f9ef 	bl	80023f4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d902      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	74fb      	strb	r3, [r7, #19]
            break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ec      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004054:	e008      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	74bb      	strb	r3, [r7, #18]
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800405c:	40021000 	.word	0x40021000
 8004060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004068:	7c7b      	ldrb	r3, [r7, #17]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4ba6      	ldr	r3, [pc, #664]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4aa5      	ldr	r2, [pc, #660]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004086:	4ba0      	ldr	r3, [pc, #640]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f023 0203 	bic.w	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	499c      	ldr	r1, [pc, #624]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a8:	4b97      	ldr	r3, [pc, #604]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 020c 	bic.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4994      	ldr	r1, [pc, #592]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ca:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	498b      	ldr	r1, [pc, #556]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ec:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4983      	ldr	r1, [pc, #524]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410e:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	497a      	ldr	r1, [pc, #488]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004130:	4b75      	ldr	r3, [pc, #468]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	4972      	ldr	r1, [pc, #456]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4969      	ldr	r1, [pc, #420]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004174:	4b64      	ldr	r3, [pc, #400]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	4961      	ldr	r1, [pc, #388]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	4958      	ldr	r1, [pc, #352]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	4950      	ldr	r1, [pc, #320]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a4a      	ldr	r2, [pc, #296]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041f0:	4b45      	ldr	r3, [pc, #276]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	4942      	ldr	r1, [pc, #264]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004228:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4934      	ldr	r1, [pc, #208]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a2e      	ldr	r2, [pc, #184]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	4926      	ldr	r1, [pc, #152]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	490a      	ldr	r1, [pc, #40]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e042      	b.n	80043a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fd fe99 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2224      	movs	r2, #36	; 0x24
 800433a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fe72 	bl	8005038 <UART_SetConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 f932 	bl	80055d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 f9b9 	bl	8005714 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02e      	b.n	800441c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2224      	movs	r2, #36	; 0x24
 80043c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd ff34 	bl	800225c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 8083 	bne.w	8004546 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Transmit+0x28>
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e07b      	b.n	8004548 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_UART_Transmit+0x3a>
 800445a:	2302      	movs	r3, #2
 800445c:	e074      	b.n	8004548 <HAL_UART_Transmit+0x124>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	; 0x21
 8004472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004476:	f7fd ffbd 	bl	80023f4 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004494:	d108      	bne.n	80044a8 <HAL_UART_Transmit+0x84>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e003      	b.n	80044b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80044b8:	e02c      	b.n	8004514 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f001 f970 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e039      	b.n	8004548 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3302      	adds	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e007      	b.n	8004502 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1cc      	bne.n	80044ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2200      	movs	r2, #0
 8004528:	2140      	movs	r1, #64	; 0x40
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f001 f93d 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e006      	b.n	8004548 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	2b20      	cmp	r3, #32
 8004566:	d142      	bne.n	80045ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Receive_IT+0x24>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e03b      	b.n	80045f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UART_Receive_IT+0x36>
 8004582:	2302      	movs	r3, #2
 8004584:	e034      	b.n	80045f0 <HAL_UART_Receive_IT+0xa0>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_UART_Receive_IT+0xa8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01f      	beq.n	80045de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d018      	beq.n	80045de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	461a      	mov	r2, r3
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f001 f9a9 	bl	800593c <UART_Start_Receive_IT>
 80045ea:	4603      	mov	r3, r0
 80045ec:	e000      	b.n	80045f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40008000 	.word	0x40008000

080045fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	2b20      	cmp	r3, #32
 8004612:	d17a      	bne.n	800470a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Transmit_DMA+0x24>
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e073      	b.n	800470c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit_DMA+0x36>
 800462e:	2302      	movs	r3, #2
 8004630:	e06c      	b.n	800470c <HAL_UART_Transmit_DMA+0x110>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2221      	movs	r2, #33	; 0x21
 800465c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02c      	beq.n	80046c2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466c:	4a29      	ldr	r2, [pc, #164]	; (8004714 <HAL_UART_Transmit_DMA+0x118>)
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004674:	4a28      	ldr	r2, [pc, #160]	; (8004718 <HAL_UART_Transmit_DMA+0x11c>)
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800467c:	4a27      	ldr	r2, [pc, #156]	; (800471c <HAL_UART_Transmit_DMA+0x120>)
 800467e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004684:	2200      	movs	r2, #0
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	4619      	mov	r1, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3328      	adds	r3, #40	; 0x28
 8004698:	461a      	mov	r2, r3
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	f7fe f958 	bl	8002950 <HAL_DMA_Start_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e024      	b.n	800470c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	613b      	str	r3, [r7, #16]
   return(result);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	623a      	str	r2, [r7, #32]
 80046f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08005cdf 	.word	0x08005cdf
 8004718:	08005d79 	.word	0x08005d79
 800471c:	08005d95 	.word	0x08005d95

08004720 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b0a2      	sub	sp, #136	; 0x88
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800473c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004752:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004756:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800475e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e4      	bne.n	800472e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004776:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004788:	65ba      	str	r2, [r7, #88]	; 0x58
 800478a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800478e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e3      	bne.n	8004764 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d118      	bne.n	80047d6 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c2:	647b      	str	r3, [r7, #68]	; 0x44
 80047c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00f      	beq.n	80047fe <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d104      	bne.n	80047f6 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f0:	4a64      	ldr	r2, [pc, #400]	; (8004984 <HAL_UART_Abort_IT+0x264>)
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
 80047f4:	e003      	b.n	80047fe <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047fa:	2200      	movs	r2, #0
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00f      	beq.n	8004826 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d104      	bne.n	800481e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004818:	4a5b      	ldr	r2, [pc, #364]	; (8004988 <HAL_UART_Abort_IT+0x268>)
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
 800481c:	e003      	b.n	8004826 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	2200      	movs	r2, #0
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b80      	cmp	r3, #128	; 0x80
 8004832:	d12d      	bne.n	8004890 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	623b      	str	r3, [r7, #32]
   return(result);
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484a:	677b      	str	r3, [r7, #116]	; 0x74
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004854:	633a      	str	r2, [r7, #48]	; 0x30
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00f      	beq.n	8004890 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe f93f 	bl	8002af8 <HAL_DMA_Abort_IT>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004884:	2200      	movs	r2, #0
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
 8004888:	e002      	b.n	8004890 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d130      	bne.n	8004900 <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048be:	61fa      	str	r2, [r7, #28]
 80048c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	69b9      	ldr	r1, [r7, #24]
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	617b      	str	r3, [r7, #20]
   return(result);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe f90a 	bl	8002af8 <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ee:	2200      	movs	r2, #0
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048f8:	e002      	b.n	8004900 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004904:	2b01      	cmp	r3, #1
 8004906:	d138      	bne.n	800497a <HAL_UART_Abort_IT+0x25a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	220f      	movs	r2, #15
 8004932:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493c:	d107      	bne.n	800494e <HAL_UART_Abort_IT+0x22e>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0210 	orr.w	r2, r2, #16
 800494c:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0208 	orr.w	r2, r2, #8
 800495c:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fb49 	bl	800500c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3788      	adds	r7, #136	; 0x88
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08005e41 	.word	0x08005e41
 8004988:	08005ec9 	.word	0x08005ec9

0800498c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0ba      	sub	sp, #232	; 0xe8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80049ba:	4013      	ands	r3, r2
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11b      	bne.n	8004a00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d015      	beq.n	8004a00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 82d6 	beq.w	8004fa2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
      }
      return;
 80049fe:	e2d0      	b.n	8004fa2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 811f 	beq.w	8004c48 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_UART_IRQHandler+0x2b0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a1a:	4b89      	ldr	r3, [pc, #548]	; (8004c40 <HAL_UART_IRQHandler+0x2b4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8112 	beq.w	8004c48 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d011      	beq.n	8004a54 <HAL_UART_IRQHandler+0xc8>
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <HAL_UART_IRQHandler+0xf8>
 8004a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2202      	movs	r2, #2
 8004a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d011      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x128>
 8004a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aaa:	f043 0202 	orr.w	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d017      	beq.n	8004af0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004acc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <HAL_UART_IRQHandler+0x2b0>)
 8004ad2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae6:	f043 0208 	orr.w	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <HAL_UART_IRQHandler+0x196>
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00c      	beq.n	8004b22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 823c 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d013      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04f      	beq.n	8004c26 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f843 	bl	8005c12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d141      	bne.n	8004c1e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1d9      	bne.n	8004b9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf2:	4a14      	ldr	r2, [pc, #80]	; (8004c44 <HAL_UART_IRQHandler+0x2b8>)
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd ff7c 	bl	8002af8 <HAL_DMA_Abort_IT>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d017      	beq.n	8004c36 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c10:	4610      	mov	r0, r2
 8004c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e00f      	b.n	8004c36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f9ee 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00b      	b.n	8004c36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9ea 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e007      	b.n	8004c36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9e6 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c34:	e1b7      	b.n	8004fa6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c36:	bf00      	nop
    return;
 8004c38:	e1b5      	b.n	8004fa6 <HAL_UART_IRQHandler+0x61a>
 8004c3a:	bf00      	nop
 8004c3c:	10000001 	.word	0x10000001
 8004c40:	04000120 	.word	0x04000120
 8004c44:	08005e15 	.word	0x08005e15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 814a 	bne.w	8004ee6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8143 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 813c 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2210      	movs	r2, #16
 8004c74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	f040 80b5 	bne.w	8004df0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8187 	beq.w	8004faa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f080 817f 	bcs.w	8004faa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8086 	bne.w	8004dd4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cf6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1da      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e4      	bne.n	8004d94 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fe39 	bl	8002a46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f919 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dee:	e0dc      	b.n	8004faa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80ce 	beq.w	8004fae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80c9 	beq.w	8004fae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e4      	bne.n	8004e1c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e1      	bne.n	8004e52 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e4      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f89e 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ee4:	e063      	b.n	8004fae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <HAL_UART_IRQHandler+0x584>
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 fca3 	bl	8006854 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f0e:	e051      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d014      	beq.n	8004f46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d03a      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
    }
    return;
 8004f44:	e035      	b.n	8004fb2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5da>
 8004f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fff1 	bl	8005f46 <UART_EndTransmit_IT>
    return;
 8004f64:	e026      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_UART_IRQHandler+0x5fa>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fc7c 	bl	800687c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f84:	e016      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x628>
 8004f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da0c      	bge.n	8004fb4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fc64 	bl	8006868 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fa0:	e008      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
      return;
 8004fa2:	bf00      	nop
 8004fa4:	e006      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
    return;
 8004fa6:	bf00      	nop
 8004fa8:	e004      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
      return;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
      return;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_IRQHandler+0x628>
    return;
 8004fb2:	bf00      	nop
  }
}
 8004fb4:	37e8      	adds	r7, #232	; 0xe8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800503c:	b08c      	sub	sp, #48	; 0x30
 800503e:	af00      	add	r7, sp, #0
 8005040:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	431a      	orrs	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	431a      	orrs	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	4313      	orrs	r3, r2
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4bab      	ldr	r3, [pc, #684]	; (8005314 <UART_SetConfig+0x2dc>)
 8005068:	4013      	ands	r3, r2
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005070:	430b      	orrs	r3, r1
 8005072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4aa0      	ldr	r2, [pc, #640]	; (8005318 <UART_SetConfig+0x2e0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a0:	4313      	orrs	r3, r2
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f023 010f 	bic.w	r1, r3, #15
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a91      	ldr	r2, [pc, #580]	; (800531c <UART_SetConfig+0x2e4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d125      	bne.n	8005128 <UART_SetConfig+0xf0>
 80050dc:	4b90      	ldr	r3, [pc, #576]	; (8005320 <UART_SetConfig+0x2e8>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d81a      	bhi.n	8005120 <UART_SetConfig+0xe8>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0xb8>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005111 	.word	0x08005111
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005119 	.word	0x08005119
 8005100:	2301      	movs	r3, #1
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e0d6      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e0d2      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e0ce      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e0ca      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e0c6      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7d      	ldr	r2, [pc, #500]	; (8005324 <UART_SetConfig+0x2ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d138      	bne.n	80051a4 <UART_SetConfig+0x16c>
 8005132:	4b7b      	ldr	r3, [pc, #492]	; (8005320 <UART_SetConfig+0x2e8>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d82d      	bhi.n	800519c <UART_SetConfig+0x164>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x110>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800517d 	.word	0x0800517d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800519d 	.word	0x0800519d
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800519d 	.word	0x0800519d
 8005170:	0800519d 	.word	0x0800519d
 8005174:	0800519d 	.word	0x0800519d
 8005178:	08005195 	.word	0x08005195
 800517c:	2300      	movs	r3, #0
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e098      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e094      	b.n	80052b6 <UART_SetConfig+0x27e>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e090      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e08c      	b.n	80052b6 <UART_SetConfig+0x27e>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e088      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5f      	ldr	r2, [pc, #380]	; (8005328 <UART_SetConfig+0x2f0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d125      	bne.n	80051fa <UART_SetConfig+0x1c2>
 80051ae:	4b5c      	ldr	r3, [pc, #368]	; (8005320 <UART_SetConfig+0x2e8>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d016      	beq.n	80051ea <UART_SetConfig+0x1b2>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d818      	bhi.n	80051f2 <UART_SetConfig+0x1ba>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d00a      	beq.n	80051da <UART_SetConfig+0x1a2>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d814      	bhi.n	80051f2 <UART_SetConfig+0x1ba>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <UART_SetConfig+0x19a>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d008      	beq.n	80051e2 <UART_SetConfig+0x1aa>
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0x1ba>
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d8:	e06d      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051da:	2302      	movs	r3, #2
 80051dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e0:	e069      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051e2:	2304      	movs	r3, #4
 80051e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e8:	e065      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051ea:	2308      	movs	r3, #8
 80051ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f0:	e061      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051f2:	2310      	movs	r3, #16
 80051f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f8:	e05d      	b.n	80052b6 <UART_SetConfig+0x27e>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4b      	ldr	r2, [pc, #300]	; (800532c <UART_SetConfig+0x2f4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d125      	bne.n	8005250 <UART_SetConfig+0x218>
 8005204:	4b46      	ldr	r3, [pc, #280]	; (8005320 <UART_SetConfig+0x2e8>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520e:	2bc0      	cmp	r3, #192	; 0xc0
 8005210:	d016      	beq.n	8005240 <UART_SetConfig+0x208>
 8005212:	2bc0      	cmp	r3, #192	; 0xc0
 8005214:	d818      	bhi.n	8005248 <UART_SetConfig+0x210>
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d00a      	beq.n	8005230 <UART_SetConfig+0x1f8>
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d814      	bhi.n	8005248 <UART_SetConfig+0x210>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <UART_SetConfig+0x1f0>
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d008      	beq.n	8005238 <UART_SetConfig+0x200>
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x210>
 8005228:	2300      	movs	r3, #0
 800522a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522e:	e042      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005236:	e03e      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523e:	e03a      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005246:	e036      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524e:	e032      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a30      	ldr	r2, [pc, #192]	; (8005318 <UART_SetConfig+0x2e0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d12a      	bne.n	80052b0 <UART_SetConfig+0x278>
 800525a:	4b31      	ldr	r3, [pc, #196]	; (8005320 <UART_SetConfig+0x2e8>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005268:	d01a      	beq.n	80052a0 <UART_SetConfig+0x268>
 800526a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0x270>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	d00c      	beq.n	8005290 <UART_SetConfig+0x258>
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527a:	d815      	bhi.n	80052a8 <UART_SetConfig+0x270>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <UART_SetConfig+0x250>
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005284:	d008      	beq.n	8005298 <UART_SetConfig+0x260>
 8005286:	e00f      	b.n	80052a8 <UART_SetConfig+0x270>
 8005288:	2300      	movs	r3, #0
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528e:	e012      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005296:	e00e      	b.n	80052b6 <UART_SetConfig+0x27e>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529e:	e00a      	b.n	80052b6 <UART_SetConfig+0x27e>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a6:	e006      	b.n	80052b6 <UART_SetConfig+0x27e>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ae:	e002      	b.n	80052b6 <UART_SetConfig+0x27e>
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <UART_SetConfig+0x2e0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	f040 80a8 	bne.w	8005412 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d834      	bhi.n	8005334 <UART_SetConfig+0x2fc>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x298>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	08005335 	.word	0x08005335
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005303 	.word	0x08005303
 80052e4:	08005335 	.word	0x08005335
 80052e8:	08005335 	.word	0x08005335
 80052ec:	08005335 	.word	0x08005335
 80052f0:	0800530b 	.word	0x0800530b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f4:	f7fe fda8 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80052f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052fa:	e021      	b.n	8005340 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <UART_SetConfig+0x2f8>)
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005300:	e01e      	b.n	8005340 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005302:	f7fe fd33 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005308:	e01a      	b.n	8005340 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005310:	e016      	b.n	8005340 <UART_SetConfig+0x308>
 8005312:	bf00      	nop
 8005314:	cfff69f3 	.word	0xcfff69f3
 8005318:	40008000 	.word	0x40008000
 800531c:	40013800 	.word	0x40013800
 8005320:	40021000 	.word	0x40021000
 8005324:	40004400 	.word	0x40004400
 8005328:	40004800 	.word	0x40004800
 800532c:	40004c00 	.word	0x40004c00
 8005330:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800533e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 812a 	beq.w	800559c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	4a9e      	ldr	r2, [pc, #632]	; (80055c8 <UART_SetConfig+0x590>)
 800534e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005352:	461a      	mov	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	fbb3 f3f2 	udiv	r3, r3, r2
 800535a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d305      	bcc.n	8005378 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	429a      	cmp	r2, r3
 8005376:	d903      	bls.n	8005380 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800537e:	e10d      	b.n	800559c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	2200      	movs	r2, #0
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	4a8e      	ldr	r2, [pc, #568]	; (80055c8 <UART_SetConfig+0x590>)
 800538e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005392:	b29b      	uxth	r3, r3
 8005394:	2200      	movs	r2, #0
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053a2:	f7fb fc99 	bl	8000cd8 <__aeabi_uldivmod>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	020b      	lsls	r3, r1, #8
 80053b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053bc:	0202      	lsls	r2, r0, #8
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	6849      	ldr	r1, [r1, #4]
 80053c2:	0849      	lsrs	r1, r1, #1
 80053c4:	2000      	movs	r0, #0
 80053c6:	460c      	mov	r4, r1
 80053c8:	4605      	mov	r5, r0
 80053ca:	eb12 0804 	adds.w	r8, r2, r4
 80053ce:	eb43 0905 	adc.w	r9, r3, r5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	469a      	mov	sl, r3
 80053da:	4693      	mov	fp, r2
 80053dc:	4652      	mov	r2, sl
 80053de:	465b      	mov	r3, fp
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fb fc78 	bl	8000cd8 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4613      	mov	r3, r2
 80053ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f6:	d308      	bcc.n	800540a <UART_SetConfig+0x3d2>
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fe:	d204      	bcs.n	800540a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	e0c8      	b.n	800559c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005410:	e0c4      	b.n	800559c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d167      	bne.n	80054ec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800541c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005420:	2b08      	cmp	r3, #8
 8005422:	d828      	bhi.n	8005476 <UART_SetConfig+0x43e>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0x3f4>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005451 	.word	0x08005451
 8005430:	08005459 	.word	0x08005459
 8005434:	08005461 	.word	0x08005461
 8005438:	08005477 	.word	0x08005477
 800543c:	08005467 	.word	0x08005467
 8005440:	08005477 	.word	0x08005477
 8005444:	08005477 	.word	0x08005477
 8005448:	08005477 	.word	0x08005477
 800544c:	0800546f 	.word	0x0800546f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005450:	f7fe fcfa 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005456:	e014      	b.n	8005482 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005458:	f7fe fd0c 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800545e:	e010      	b.n	8005482 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b5a      	ldr	r3, [pc, #360]	; (80055cc <UART_SetConfig+0x594>)
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005464:	e00d      	b.n	8005482 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7fe fc81 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 800546a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800546c:	e009      	b.n	8005482 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005474:	e005      	b.n	8005482 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8089 	beq.w	800559c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	4a4e      	ldr	r2, [pc, #312]	; (80055c8 <UART_SetConfig+0x590>)
 8005490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005494:	461a      	mov	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	fbb3 f3f2 	udiv	r3, r3, r2
 800549c:	005a      	lsls	r2, r3, #1
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	441a      	add	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d916      	bls.n	80054e4 <UART_SetConfig+0x4ac>
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d212      	bcs.n	80054e4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f023 030f 	bic.w	r3, r3, #15
 80054c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	8bfb      	ldrh	r3, [r7, #30]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	8bfa      	ldrh	r2, [r7, #30]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	e05b      	b.n	800559c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ea:	e057      	b.n	800559c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d828      	bhi.n	8005546 <UART_SetConfig+0x50e>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x4c4>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	08005547 	.word	0x08005547
 800550c:	08005537 	.word	0x08005537
 8005510:	08005547 	.word	0x08005547
 8005514:	08005547 	.word	0x08005547
 8005518:	08005547 	.word	0x08005547
 800551c:	0800553f 	.word	0x0800553f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005520:	f7fe fc92 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8005524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005526:	e014      	b.n	8005552 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005528:	f7fe fca4 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800552e:	e010      	b.n	8005552 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005530:	4b26      	ldr	r3, [pc, #152]	; (80055cc <UART_SetConfig+0x594>)
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005534:	e00d      	b.n	8005552 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005536:	f7fe fc19 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005550:	bf00      	nop
    }

    if (pclk != 0U)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d021      	beq.n	800559c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <UART_SetConfig+0x590>)
 800555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005562:	461a      	mov	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	fbb3 f2f2 	udiv	r2, r3, r2
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	441a      	add	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d909      	bls.n	8005596 <UART_SetConfig+0x55e>
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d205      	bcs.n	8005596 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	b29a      	uxth	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e002      	b.n	800559c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2201      	movs	r2, #1
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	0800b87c 	.word	0x0800b87c
 80055cc:	00f42400 	.word	0x00f42400

080055d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ce:	d10a      	bne.n	80056e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005724:	f7fc fe66 	bl	80023f4 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d10e      	bne.n	8005756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f82f 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e025      	b.n	80057a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d10e      	bne.n	8005782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f819 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e00f      	b.n	80057a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b09c      	sub	sp, #112	; 0x70
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	e0a9      	b.n	8005910 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	f000 80a5 	beq.w	8005910 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c6:	f7fc fe15 	bl	80023f4 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <UART_WaitOnFlagUntilTimeout+0x32>
 80057d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d140      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f0:	667b      	str	r3, [r7, #100]	; 0x64
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e6      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	663b      	str	r3, [r7, #96]	; 0x60
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800582e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e069      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d051      	beq.n	8005910 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587a:	d149      	bne.n	8005910 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005884:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
 80058a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058d8:	623a      	str	r2, [r7, #32]
 80058da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e010      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	f43f af46 	beq.w	80057bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3770      	adds	r7, #112	; 0x70
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b0a3      	sub	sp, #140	; 0x8c
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d10e      	bne.n	800598e <UART_Start_Receive_IT+0x52>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <UART_Start_Receive_IT+0x48>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800597e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005982:	e02d      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	22ff      	movs	r2, #255	; 0xff
 8005988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800598c:	e028      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10d      	bne.n	80059b2 <UART_Start_Receive_IT+0x76>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <UART_Start_Receive_IT+0x6c>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059a6:	e01b      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	227f      	movs	r2, #127	; 0x7f
 80059ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059b0:	e016      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ba:	d10d      	bne.n	80059d8 <UART_Start_Receive_IT+0x9c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <UART_Start_Receive_IT+0x92>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	227f      	movs	r2, #127	; 0x7f
 80059c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059cc:	e008      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	223f      	movs	r2, #63	; 0x3f
 80059d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059d6:	e003      	b.n	80059e0 <UART_Start_Receive_IT+0xa4>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2222      	movs	r2, #34	; 0x22
 80059ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a14:	673a      	str	r2, [r7, #112]	; 0x70
 8005a16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005a1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e3      	bne.n	80059f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a30:	d153      	bne.n	8005ada <UART_Start_Receive_IT+0x19e>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d34d      	bcc.n	8005ada <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d107      	bne.n	8005a58 <UART_Start_Receive_IT+0x11c>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <UART_Start_Receive_IT+0x244>)
 8005a54:	671a      	str	r2, [r3, #112]	; 0x70
 8005a56:	e002      	b.n	8005a5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a4a      	ldr	r2, [pc, #296]	; (8005b84 <UART_Start_Receive_IT+0x248>)
 8005a5c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01a      	beq.n	8005aa4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a92:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e4      	bne.n	8005a6e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ac4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_Start_Receive_IT+0x168>
 8005ad8:	e04a      	b.n	8005b70 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d107      	bne.n	8005af4 <UART_Start_Receive_IT+0x1b8>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <UART_Start_Receive_IT+0x24c>)
 8005af0:	671a      	str	r2, [r3, #112]	; 0x70
 8005af2:	e002      	b.n	8005afa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a25      	ldr	r2, [pc, #148]	; (8005b8c <UART_Start_Receive_IT+0x250>)
 8005af8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d019      	beq.n	8005b3e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_Start_Receive_IT+0x1ce>
 8005b3c:	e018      	b.n	8005b70 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	378c      	adds	r7, #140	; 0x8c
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	08006555 	.word	0x08006555
 8005b84:	0800625d 	.word	0x0800625d
 8005b88:	080060fd 	.word	0x080060fd
 8005b8c:	08005f9d 	.word	0x08005f9d

08005b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b08f      	sub	sp, #60	; 0x3c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e6      	bne.n	8005b98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	61ba      	str	r2, [r7, #24]
 8005bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6979      	ldr	r1, [r7, #20]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005c06:	bf00      	nop
 8005c08:	373c      	adds	r7, #60	; 0x3c
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b095      	sub	sp, #84	; 0x54
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e3      	bne.n	8005c4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d118      	bne.n	8005cbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e6      	bne.n	8005c8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005cd2:	bf00      	nop
 8005cd4:	3754      	adds	r7, #84	; 0x54
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b090      	sub	sp, #64	; 0x40
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d137      	bne.n	8005d6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	623b      	str	r3, [r7, #32]
   return(result);
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d22:	633a      	str	r2, [r7, #48]	; 0x30
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	617b      	str	r3, [r7, #20]
   return(result);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d68:	e002      	b.n	8005d70 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005d6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d6c:	f7ff f926 	bl	8004fbc <HAL_UART_TxCpltCallback>
}
 8005d70:	bf00      	nop
 8005d72:	3740      	adds	r7, #64	; 0x40
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff f922 	bl	8004fd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d109      	bne.n	8005dd4 <UART_DMAError+0x40>
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b21      	cmp	r3, #33	; 0x21
 8005dc4:	d106      	bne.n	8005dd4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005dce:	6978      	ldr	r0, [r7, #20]
 8005dd0:	f7ff fede 	bl	8005b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d109      	bne.n	8005df6 <UART_DMAError+0x62>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b22      	cmp	r3, #34	; 0x22
 8005de6:	d106      	bne.n	8005df6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005df0:	6978      	ldr	r0, [r7, #20]
 8005df2:	f7ff ff0e 	bl	8005c12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfc:	f043 0210 	orr.w	r2, r3, #16
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f7ff f8f6 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0c:	bf00      	nop
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff f8e0 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e52:	2200      	movs	r2, #0
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d12b      	bne.n	8005ec0 <UART_DMATxAbortCallback+0x80>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	220f      	movs	r2, #15
 8005e86:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e90:	d107      	bne.n	8005ea2 <UART_DMATxAbortCallback+0x62>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0210 	orr.w	r2, r2, #16
 8005ea0:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff f8a7 	bl	800500c <HAL_UART_AbortCpltCallback>
 8005ebe:	e000      	b.n	8005ec2 <UART_DMATxAbortCallback+0x82>
      return;
 8005ec0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eda:	2200      	movs	r2, #0
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d126      	bne.n	8005f3e <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	220f      	movs	r2, #15
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0208 	orr.w	r2, r2, #8
 8005f1e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff f868 	bl	800500c <HAL_UART_AbortCpltCallback>
 8005f3c:	e000      	b.n	8005f40 <UART_DMARxAbortCallback+0x78>
      return;
 8005f3e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff f814 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f94:	bf00      	nop
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b096      	sub	sp, #88	; 0x58
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005faa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	2b22      	cmp	r3, #34	; 0x22
 8005fb6:	f040 8095 	bne.w	80060e4 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fc4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005fc8:	b2d9      	uxtb	r1, r3
 8005fca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	400a      	ands	r2, r1
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d178      	bne.n	80060f4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006016:	653b      	str	r3, [r7, #80]	; 0x50
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006020:	647b      	str	r3, [r7, #68]	; 0x44
 8006022:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	623b      	str	r3, [r7, #32]
   return(result);
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006054:	633a      	str	r2, [r7, #48]	; 0x30
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800605a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d12e      	bne.n	80060dc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	60fb      	str	r3, [r7, #12]
   return(result);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 0310 	bic.w	r3, r3, #16
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	617b      	str	r3, [r7, #20]
   return(result);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d103      	bne.n	80060cc <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2210      	movs	r2, #16
 80060ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fe ffa3 	bl	8005020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060da:	e00b      	b.n	80060f4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fe ff81 	bl	8004fe4 <HAL_UART_RxCpltCallback>
}
 80060e2:	e007      	b.n	80060f4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	619a      	str	r2, [r3, #24]
}
 80060f4:	bf00      	nop
 80060f6:	3758      	adds	r7, #88	; 0x58
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b096      	sub	sp, #88	; 0x58
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800610a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	2b22      	cmp	r3, #34	; 0x22
 8006116:	f040 8095 	bne.w	8006244 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800612a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800612e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006132:	4013      	ands	r3, r2
 8006134:	b29a      	uxth	r2, r3
 8006136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006138:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d178      	bne.n	8006254 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
 8006182:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3308      	adds	r3, #8
 800619a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d12e      	bne.n	800623c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	647b      	str	r3, [r7, #68]	; 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6979      	ldr	r1, [r7, #20]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	613b      	str	r3, [r7, #16]
   return(result);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d103      	bne.n	800622c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe fef3 	bl	8005020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800623a:	e00b      	b.n	8006254 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fe fed1 	bl	8004fe4 <HAL_UART_RxCpltCallback>
}
 8006242:	e007      	b.n	8006254 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0208 	orr.w	r2, r2, #8
 8006252:	619a      	str	r2, [r3, #24]
}
 8006254:	bf00      	nop
 8006256:	3758      	adds	r7, #88	; 0x58
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b0a6      	sub	sp, #152	; 0x98
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800626a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	2b22      	cmp	r3, #34	; 0x22
 8006294:	f040 814f 	bne.w	8006536 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800629e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062a2:	e0f6      	b.n	8006492 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062ae:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80062b2:	b2d9      	uxtb	r1, r3
 80062b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	400a      	ands	r2, r1
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d053      	beq.n	800639e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d011      	beq.n	8006326 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2201      	movs	r2, #1
 8006314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631c:	f043 0201 	orr.w	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d011      	beq.n	8006356 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2202      	movs	r2, #2
 8006344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	f043 0204 	orr.w	r2, r3, #4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006356:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2204      	movs	r2, #4
 8006374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637c:	f043 0202 	orr.w	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fe fe31 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d173      	bne.n	8006492 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80063b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ce:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80063d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80063da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e4      	bne.n	80063aa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006404:	657a      	str	r2, [r7, #84]	; 0x54
 8006406:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800640a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e3      	bne.n	80063e0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d12e      	bne.n	800648c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f023 0310 	bic.w	r3, r3, #16
 8006448:	67bb      	str	r3, [r7, #120]	; 0x78
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006452:	643b      	str	r3, [r7, #64]	; 0x40
 8006454:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d103      	bne.n	800647c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2210      	movs	r2, #16
 800647a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fe fdcb 	bl	8005020 <HAL_UARTEx_RxEventCallback>
 800648a:	e002      	b.n	8006492 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe fda9 	bl	8004fe4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006492:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006496:	2b00      	cmp	r3, #0
 8006498:	d006      	beq.n	80064a8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800649a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f47f aefe 	bne.w	80062a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064b2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d045      	beq.n	8006546 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d23e      	bcs.n	8006546 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064de:	673b      	str	r3, [r7, #112]	; 0x70
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80064e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a14      	ldr	r2, [pc, #80]	; (8006550 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006500:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006534:	e007      	b.n	8006546 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699a      	ldr	r2, [r3, #24]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0208 	orr.w	r2, r2, #8
 8006544:	619a      	str	r2, [r3, #24]
}
 8006546:	bf00      	nop
 8006548:	3798      	adds	r7, #152	; 0x98
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	08005f9d 	.word	0x08005f9d

08006554 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b0a8      	sub	sp, #160	; 0xa0
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006562:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	2b22      	cmp	r3, #34	; 0x22
 800658c:	f040 8153 	bne.w	8006836 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006596:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800659a:	e0fa      	b.n	8006792 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80065ae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80065b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065b6:	4013      	ands	r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	1c9a      	adds	r2, r3, #2
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80065e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d053      	beq.n	800669a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <UART_RxISR_16BIT_FIFOEN+0xce>
 80065fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006618:	f043 0201 	orr.w	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800662e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2202      	movs	r2, #2
 8006640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	f043 0204 	orr.w	r2, r3, #4
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d011      	beq.n	8006682 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800665e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2204      	movs	r2, #4
 8006670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	f043 0202 	orr.w	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fe fcb3 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d175      	bne.n	8006792 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ca:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e4      	bne.n	80066a6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006704:	65ba      	str	r2, [r7, #88]	; 0x58
 8006706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800670a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e1      	bne.n	80066dc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d12e      	bne.n	800678c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	f023 0310 	bic.w	r3, r3, #16
 8006748:	67fb      	str	r3, [r7, #124]	; 0x7c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e6      	bne.n	8006734 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	d103      	bne.n	800677c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2210      	movs	r2, #16
 800677a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fe fc4b 	bl	8005020 <HAL_UARTEx_RxEventCallback>
 800678a:	e002      	b.n	8006792 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fe fc29 	bl	8004fe4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006792:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <UART_RxISR_16BIT_FIFOEN+0x254>
 800679a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f47f aefa 	bne.w	800659c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d045      	beq.n	8006846 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d23e      	bcs.n	8006846 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	623b      	str	r3, [r7, #32]
   return(result);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067de:	677b      	str	r3, [r7, #116]	; 0x74
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3308      	adds	r3, #8
 80067e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067e8:	633a      	str	r2, [r7, #48]	; 0x30
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e5      	bne.n	80067c8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	; (8006850 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006800:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f043 0320 	orr.w	r3, r3, #32
 8006816:	673b      	str	r3, [r7, #112]	; 0x70
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	69b9      	ldr	r1, [r7, #24]
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	617b      	str	r3, [r7, #20]
   return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e6      	bne.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006834:	e007      	b.n	8006846 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0208 	orr.w	r2, r2, #8
 8006844:	619a      	str	r2, [r3, #24]
}
 8006846:	bf00      	nop
 8006848:	37a0      	adds	r7, #160	; 0xa0
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	080060fd 	.word	0x080060fd

08006854 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e027      	b.n	80068f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2224      	movs	r2, #36	; 0x24
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006916:	2302      	movs	r3, #2
 8006918:	e02d      	b.n	8006976 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2224      	movs	r2, #36	; 0x24
 8006926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f850 	bl	80069fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006992:	2302      	movs	r3, #2
 8006994:	e02d      	b.n	80069f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2224      	movs	r2, #36	; 0x24
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f812 	bl	80069fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d108      	bne.n	8006a1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a1c:	e031      	b.n	8006a82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a1e:	2308      	movs	r3, #8
 8006a20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a22:	2308      	movs	r3, #8
 8006a24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	0e5b      	lsrs	r3, r3, #25
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	0f5b      	lsrs	r3, r3, #29
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	7b3a      	ldrb	r2, [r7, #12]
 8006a4a:	4911      	ldr	r1, [pc, #68]	; (8006a90 <UARTEx_SetNbDataToProcess+0x94>)
 8006a4c:	5c8a      	ldrb	r2, [r1, r2]
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a52:	7b3a      	ldrb	r2, [r7, #12]
 8006a54:	490f      	ldr	r1, [pc, #60]	; (8006a94 <UARTEx_SetNbDataToProcess+0x98>)
 8006a56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	7b7a      	ldrb	r2, [r7, #13]
 8006a68:	4909      	ldr	r1, [pc, #36]	; (8006a90 <UARTEx_SetNbDataToProcess+0x94>)
 8006a6a:	5c8a      	ldrb	r2, [r1, r2]
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a70:	7b7a      	ldrb	r2, [r7, #13]
 8006a72:	4908      	ldr	r1, [pc, #32]	; (8006a94 <UARTEx_SetNbDataToProcess+0x98>)
 8006a74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	0800b894 	.word	0x0800b894
 8006a94:	0800b89c 	.word	0x0800b89c

08006a98 <__errno>:
 8006a98:	4b01      	ldr	r3, [pc, #4]	; (8006aa0 <__errno+0x8>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	2000000c 	.word	0x2000000c

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4d0d      	ldr	r5, [pc, #52]	; (8006adc <__libc_init_array+0x38>)
 8006aa8:	4c0d      	ldr	r4, [pc, #52]	; (8006ae0 <__libc_init_array+0x3c>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	2600      	movs	r6, #0
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	4d0b      	ldr	r5, [pc, #44]	; (8006ae4 <__libc_init_array+0x40>)
 8006ab6:	4c0c      	ldr	r4, [pc, #48]	; (8006ae8 <__libc_init_array+0x44>)
 8006ab8:	f004 fd1c 	bl	800b4f4 <_init>
 8006abc:	1b64      	subs	r4, r4, r5
 8006abe:	10a4      	asrs	r4, r4, #2
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	0800bd5c 	.word	0x0800bd5c
 8006ae0:	0800bd5c 	.word	0x0800bd5c
 8006ae4:	0800bd5c 	.word	0x0800bd5c
 8006ae8:	0800bd60 	.word	0x0800bd60

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <__cvt>:
 8006afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	ec55 4b10 	vmov	r4, r5, d0
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	460e      	mov	r6, r1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	bfbb      	ittet	lt
 8006b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b12:	461d      	movlt	r5, r3
 8006b14:	2300      	movge	r3, #0
 8006b16:	232d      	movlt	r3, #45	; 0x2d
 8006b18:	700b      	strb	r3, [r1, #0]
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b20:	4691      	mov	r9, r2
 8006b22:	f023 0820 	bic.w	r8, r3, #32
 8006b26:	bfbc      	itt	lt
 8006b28:	4622      	movlt	r2, r4
 8006b2a:	4614      	movlt	r4, r2
 8006b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b30:	d005      	beq.n	8006b3e <__cvt+0x42>
 8006b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b36:	d100      	bne.n	8006b3a <__cvt+0x3e>
 8006b38:	3601      	adds	r6, #1
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	e000      	b.n	8006b40 <__cvt+0x44>
 8006b3e:	2103      	movs	r1, #3
 8006b40:	ab03      	add	r3, sp, #12
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	ab02      	add	r3, sp, #8
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	ec45 4b10 	vmov	d0, r4, r5
 8006b4c:	4653      	mov	r3, sl
 8006b4e:	4632      	mov	r2, r6
 8006b50:	f001 fefa 	bl	8008948 <_dtoa_r>
 8006b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b58:	4607      	mov	r7, r0
 8006b5a:	d102      	bne.n	8006b62 <__cvt+0x66>
 8006b5c:	f019 0f01 	tst.w	r9, #1
 8006b60:	d022      	beq.n	8006ba8 <__cvt+0xac>
 8006b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b66:	eb07 0906 	add.w	r9, r7, r6
 8006b6a:	d110      	bne.n	8006b8e <__cvt+0x92>
 8006b6c:	783b      	ldrb	r3, [r7, #0]
 8006b6e:	2b30      	cmp	r3, #48	; 0x30
 8006b70:	d10a      	bne.n	8006b88 <__cvt+0x8c>
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4620      	mov	r0, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 8006b7e:	b918      	cbnz	r0, 8006b88 <__cvt+0x8c>
 8006b80:	f1c6 0601 	rsb	r6, r6, #1
 8006b84:	f8ca 6000 	str.w	r6, [sl]
 8006b88:	f8da 3000 	ldr.w	r3, [sl]
 8006b8c:	4499      	add	r9, r3
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2300      	movs	r3, #0
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 8006b9a:	b108      	cbz	r0, 8006ba0 <__cvt+0xa4>
 8006b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ba0:	2230      	movs	r2, #48	; 0x30
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	454b      	cmp	r3, r9
 8006ba6:	d307      	bcc.n	8006bb8 <__cvt+0xbc>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bac:	1bdb      	subs	r3, r3, r7
 8006bae:	4638      	mov	r0, r7
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	b004      	add	sp, #16
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e7f0      	b.n	8006ba2 <__cvt+0xa6>

08006bc0 <__exponent>:
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	bfb8      	it	lt
 8006bc8:	4249      	neglt	r1, r1
 8006bca:	f803 2b02 	strb.w	r2, [r3], #2
 8006bce:	bfb4      	ite	lt
 8006bd0:	222d      	movlt	r2, #45	; 0x2d
 8006bd2:	222b      	movge	r2, #43	; 0x2b
 8006bd4:	2909      	cmp	r1, #9
 8006bd6:	7042      	strb	r2, [r0, #1]
 8006bd8:	dd2a      	ble.n	8006c30 <__exponent+0x70>
 8006bda:	f10d 0407 	add.w	r4, sp, #7
 8006bde:	46a4      	mov	ip, r4
 8006be0:	270a      	movs	r7, #10
 8006be2:	46a6      	mov	lr, r4
 8006be4:	460a      	mov	r2, r1
 8006be6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bea:	fb07 1516 	mls	r5, r7, r6, r1
 8006bee:	3530      	adds	r5, #48	; 0x30
 8006bf0:	2a63      	cmp	r2, #99	; 0x63
 8006bf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	dcf1      	bgt.n	8006be2 <__exponent+0x22>
 8006bfe:	3130      	adds	r1, #48	; 0x30
 8006c00:	f1ae 0502 	sub.w	r5, lr, #2
 8006c04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c08:	1c44      	adds	r4, r0, #1
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4561      	cmp	r1, ip
 8006c0e:	d30a      	bcc.n	8006c26 <__exponent+0x66>
 8006c10:	f10d 0209 	add.w	r2, sp, #9
 8006c14:	eba2 020e 	sub.w	r2, r2, lr
 8006c18:	4565      	cmp	r5, ip
 8006c1a:	bf88      	it	hi
 8006c1c:	2200      	movhi	r2, #0
 8006c1e:	4413      	add	r3, r2
 8006c20:	1a18      	subs	r0, r3, r0
 8006c22:	b003      	add	sp, #12
 8006c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c2e:	e7ed      	b.n	8006c0c <__exponent+0x4c>
 8006c30:	2330      	movs	r3, #48	; 0x30
 8006c32:	3130      	adds	r1, #48	; 0x30
 8006c34:	7083      	strb	r3, [r0, #2]
 8006c36:	70c1      	strb	r1, [r0, #3]
 8006c38:	1d03      	adds	r3, r0, #4
 8006c3a:	e7f1      	b.n	8006c20 <__exponent+0x60>

08006c3c <_printf_float>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	ed2d 8b02 	vpush	{d8}
 8006c44:	b08d      	sub	sp, #52	; 0x34
 8006c46:	460c      	mov	r4, r1
 8006c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	461f      	mov	r7, r3
 8006c50:	4605      	mov	r5, r0
 8006c52:	f003 f98d 	bl	8009f70 <_localeconv_r>
 8006c56:	f8d0 a000 	ldr.w	sl, [r0]
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f7f9 fae0 	bl	8000220 <strlen>
 8006c60:	2300      	movs	r3, #0
 8006c62:	930a      	str	r3, [sp, #40]	; 0x28
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	f8d8 3000 	ldr.w	r3, [r8]
 8006c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	f103 0208 	add.w	r2, r3, #8
 8006c7a:	f8c8 2000 	str.w	r2, [r8]
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c94:	ee08 0a10 	vmov	s16, r0
 8006c98:	4b9f      	ldr	r3, [pc, #636]	; (8006f18 <_printf_float+0x2dc>)
 8006c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca2:	f7f9 ff6b 	bl	8000b7c <__aeabi_dcmpun>
 8006ca6:	bb88      	cbnz	r0, 8006d0c <_printf_float+0xd0>
 8006ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cac:	4b9a      	ldr	r3, [pc, #616]	; (8006f18 <_printf_float+0x2dc>)
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb2:	f7f9 ff45 	bl	8000b40 <__aeabi_dcmple>
 8006cb6:	bb48      	cbnz	r0, 8006d0c <_printf_float+0xd0>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 ff34 	bl	8000b2c <__aeabi_dcmplt>
 8006cc4:	b110      	cbz	r0, 8006ccc <_printf_float+0x90>
 8006cc6:	232d      	movs	r3, #45	; 0x2d
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	4b93      	ldr	r3, [pc, #588]	; (8006f1c <_printf_float+0x2e0>)
 8006cce:	4894      	ldr	r0, [pc, #592]	; (8006f20 <_printf_float+0x2e4>)
 8006cd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cd4:	bf94      	ite	ls
 8006cd6:	4698      	movls	r8, r3
 8006cd8:	4680      	movhi	r8, r0
 8006cda:	2303      	movs	r3, #3
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	9b05      	ldr	r3, [sp, #20]
 8006ce0:	f023 0204 	bic.w	r2, r3, #4
 8006ce4:	6022      	str	r2, [r4, #0]
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	9700      	str	r7, [sp, #0]
 8006cec:	4633      	mov	r3, r6
 8006cee:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f9d8 	bl	80070a8 <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f040 8090 	bne.w	8006e1e <_printf_float+0x1e2>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	b00d      	add	sp, #52	; 0x34
 8006d04:	ecbd 8b02 	vpop	{d8}
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 ff32 	bl	8000b7c <__aeabi_dcmpun>
 8006d18:	b140      	cbz	r0, 8006d2c <_printf_float+0xf0>
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbc      	itt	lt
 8006d20:	232d      	movlt	r3, #45	; 0x2d
 8006d22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d26:	487f      	ldr	r0, [pc, #508]	; (8006f24 <_printf_float+0x2e8>)
 8006d28:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <_printf_float+0x2ec>)
 8006d2a:	e7d1      	b.n	8006cd0 <_printf_float+0x94>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d32:	9206      	str	r2, [sp, #24]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	d13f      	bne.n	8006db8 <_printf_float+0x17c>
 8006d38:	2306      	movs	r3, #6
 8006d3a:	6063      	str	r3, [r4, #4]
 8006d3c:	9b05      	ldr	r3, [sp, #20]
 8006d3e:	6861      	ldr	r1, [r4, #4]
 8006d40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d44:	2300      	movs	r3, #0
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	ab0a      	add	r3, sp, #40	; 0x28
 8006d4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d4e:	ab09      	add	r3, sp, #36	; 0x24
 8006d50:	ec49 8b10 	vmov	d0, r8, r9
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6022      	str	r2, [r4, #0]
 8006d58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fecd 	bl	8006afc <__cvt>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d66:	2b47      	cmp	r3, #71	; 0x47
 8006d68:	4680      	mov	r8, r0
 8006d6a:	d108      	bne.n	8006d7e <_printf_float+0x142>
 8006d6c:	1cc8      	adds	r0, r1, #3
 8006d6e:	db02      	blt.n	8006d76 <_printf_float+0x13a>
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	4299      	cmp	r1, r3
 8006d74:	dd41      	ble.n	8006dfa <_printf_float+0x1be>
 8006d76:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d7a:	fa5f fb8b 	uxtb.w	fp, fp
 8006d7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d82:	d820      	bhi.n	8006dc6 <_printf_float+0x18a>
 8006d84:	3901      	subs	r1, #1
 8006d86:	465a      	mov	r2, fp
 8006d88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d8c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d8e:	f7ff ff17 	bl	8006bc0 <__exponent>
 8006d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d94:	1813      	adds	r3, r2, r0
 8006d96:	2a01      	cmp	r2, #1
 8006d98:	4681      	mov	r9, r0
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	dc02      	bgt.n	8006da4 <_printf_float+0x168>
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	07d2      	lsls	r2, r2, #31
 8006da2:	d501      	bpl.n	8006da8 <_printf_float+0x16c>
 8006da4:	3301      	adds	r3, #1
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d09c      	beq.n	8006cea <_printf_float+0xae>
 8006db0:	232d      	movs	r3, #45	; 0x2d
 8006db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db6:	e798      	b.n	8006cea <_printf_float+0xae>
 8006db8:	9a06      	ldr	r2, [sp, #24]
 8006dba:	2a47      	cmp	r2, #71	; 0x47
 8006dbc:	d1be      	bne.n	8006d3c <_printf_float+0x100>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1bc      	bne.n	8006d3c <_printf_float+0x100>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e7b9      	b.n	8006d3a <_printf_float+0xfe>
 8006dc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dca:	d118      	bne.n	8006dfe <_printf_float+0x1c2>
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	dd0b      	ble.n	8006dea <_printf_float+0x1ae>
 8006dd2:	6121      	str	r1, [r4, #16]
 8006dd4:	b913      	cbnz	r3, 8006ddc <_printf_float+0x1a0>
 8006dd6:	6822      	ldr	r2, [r4, #0]
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d502      	bpl.n	8006de2 <_printf_float+0x1a6>
 8006ddc:	3301      	adds	r3, #1
 8006dde:	440b      	add	r3, r1
 8006de0:	6123      	str	r3, [r4, #16]
 8006de2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	e7de      	b.n	8006da8 <_printf_float+0x16c>
 8006dea:	b913      	cbnz	r3, 8006df2 <_printf_float+0x1b6>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	07d2      	lsls	r2, r2, #31
 8006df0:	d501      	bpl.n	8006df6 <_printf_float+0x1ba>
 8006df2:	3302      	adds	r3, #2
 8006df4:	e7f4      	b.n	8006de0 <_printf_float+0x1a4>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f2      	b.n	8006de0 <_printf_float+0x1a4>
 8006dfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	4299      	cmp	r1, r3
 8006e02:	db05      	blt.n	8006e10 <_printf_float+0x1d4>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	6121      	str	r1, [r4, #16]
 8006e08:	07d8      	lsls	r0, r3, #31
 8006e0a:	d5ea      	bpl.n	8006de2 <_printf_float+0x1a6>
 8006e0c:	1c4b      	adds	r3, r1, #1
 8006e0e:	e7e7      	b.n	8006de0 <_printf_float+0x1a4>
 8006e10:	2900      	cmp	r1, #0
 8006e12:	bfd4      	ite	le
 8006e14:	f1c1 0202 	rsble	r2, r1, #2
 8006e18:	2201      	movgt	r2, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	e7e0      	b.n	8006de0 <_printf_float+0x1a4>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	055a      	lsls	r2, r3, #21
 8006e22:	d407      	bmi.n	8006e34 <_printf_float+0x1f8>
 8006e24:	6923      	ldr	r3, [r4, #16]
 8006e26:	4642      	mov	r2, r8
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d12c      	bne.n	8006e8c <_printf_float+0x250>
 8006e32:	e764      	b.n	8006cfe <_printf_float+0xc2>
 8006e34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e38:	f240 80e0 	bls.w	8006ffc <_printf_float+0x3c0>
 8006e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	f7f9 fe68 	bl	8000b18 <__aeabi_dcmpeq>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d034      	beq.n	8006eb6 <_printf_float+0x27a>
 8006e4c:	4a37      	ldr	r2, [pc, #220]	; (8006f2c <_printf_float+0x2f0>)
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f af51 	beq.w	8006cfe <_printf_float+0xc2>
 8006e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e60:	429a      	cmp	r2, r3
 8006e62:	db02      	blt.n	8006e6a <_printf_float+0x22e>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07d8      	lsls	r0, r3, #31
 8006e68:	d510      	bpl.n	8006e8c <_printf_float+0x250>
 8006e6a:	ee18 3a10 	vmov	r3, s16
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f af41 	beq.w	8006cfe <_printf_float+0xc2>
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	f104 091a 	add.w	r9, r4, #26
 8006e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e86:	3b01      	subs	r3, #1
 8006e88:	4543      	cmp	r3, r8
 8006e8a:	dc09      	bgt.n	8006ea0 <_printf_float+0x264>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	079b      	lsls	r3, r3, #30
 8006e90:	f100 8105 	bmi.w	800709e <_printf_float+0x462>
 8006e94:	68e0      	ldr	r0, [r4, #12]
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	bfb8      	it	lt
 8006e9c:	4618      	movlt	r0, r3
 8006e9e:	e730      	b.n	8006d02 <_printf_float+0xc6>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	464a      	mov	r2, r9
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f af27 	beq.w	8006cfe <_printf_float+0xc2>
 8006eb0:	f108 0801 	add.w	r8, r8, #1
 8006eb4:	e7e6      	b.n	8006e84 <_printf_float+0x248>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc39      	bgt.n	8006f30 <_printf_float+0x2f4>
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <_printf_float+0x2f0>)
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f af19 	beq.w	8006cfe <_printf_float+0xc2>
 8006ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d102      	bne.n	8006eda <_printf_float+0x29e>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07d9      	lsls	r1, r3, #31
 8006ed8:	d5d8      	bpl.n	8006e8c <_printf_float+0x250>
 8006eda:	ee18 3a10 	vmov	r3, s16
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af09 	beq.w	8006cfe <_printf_float+0xc2>
 8006eec:	f04f 0900 	mov.w	r9, #0
 8006ef0:	f104 0a1a 	add.w	sl, r4, #26
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	425b      	negs	r3, r3
 8006ef8:	454b      	cmp	r3, r9
 8006efa:	dc01      	bgt.n	8006f00 <_printf_float+0x2c4>
 8006efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efe:	e792      	b.n	8006e26 <_printf_float+0x1ea>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f aef7 	beq.w	8006cfe <_printf_float+0xc2>
 8006f10:	f109 0901 	add.w	r9, r9, #1
 8006f14:	e7ee      	b.n	8006ef4 <_printf_float+0x2b8>
 8006f16:	bf00      	nop
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	0800b8a8 	.word	0x0800b8a8
 8006f20:	0800b8ac 	.word	0x0800b8ac
 8006f24:	0800b8b4 	.word	0x0800b8b4
 8006f28:	0800b8b0 	.word	0x0800b8b0
 8006f2c:	0800b8b8 	.word	0x0800b8b8
 8006f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f34:	429a      	cmp	r2, r3
 8006f36:	bfa8      	it	ge
 8006f38:	461a      	movge	r2, r3
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	4691      	mov	r9, r2
 8006f3e:	dc37      	bgt.n	8006fb0 <_printf_float+0x374>
 8006f40:	f04f 0b00 	mov.w	fp, #0
 8006f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f48:	f104 021a 	add.w	r2, r4, #26
 8006f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	eba3 0309 	sub.w	r3, r3, r9
 8006f54:	455b      	cmp	r3, fp
 8006f56:	dc33      	bgt.n	8006fc0 <_printf_float+0x384>
 8006f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	db3b      	blt.n	8006fd8 <_printf_float+0x39c>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	07da      	lsls	r2, r3, #31
 8006f64:	d438      	bmi.n	8006fd8 <_printf_float+0x39c>
 8006f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f68:	9a05      	ldr	r2, [sp, #20]
 8006f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f6c:	1a9a      	subs	r2, r3, r2
 8006f6e:	eba3 0901 	sub.w	r9, r3, r1
 8006f72:	4591      	cmp	r9, r2
 8006f74:	bfa8      	it	ge
 8006f76:	4691      	movge	r9, r2
 8006f78:	f1b9 0f00 	cmp.w	r9, #0
 8006f7c:	dc35      	bgt.n	8006fea <_printf_float+0x3ae>
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f86:	f104 0a1a 	add.w	sl, r4, #26
 8006f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	eba3 0309 	sub.w	r3, r3, r9
 8006f94:	4543      	cmp	r3, r8
 8006f96:	f77f af79 	ble.w	8006e8c <_printf_float+0x250>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f aeaa 	beq.w	8006cfe <_printf_float+0xc2>
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	e7ec      	b.n	8006f8a <_printf_float+0x34e>
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1c0      	bne.n	8006f40 <_printf_float+0x304>
 8006fbe:	e69e      	b.n	8006cfe <_printf_float+0xc2>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	9205      	str	r2, [sp, #20]
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f ae97 	beq.w	8006cfe <_printf_float+0xc2>
 8006fd0:	9a05      	ldr	r2, [sp, #20]
 8006fd2:	f10b 0b01 	add.w	fp, fp, #1
 8006fd6:	e7b9      	b.n	8006f4c <_printf_float+0x310>
 8006fd8:	ee18 3a10 	vmov	r3, s16
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d1be      	bne.n	8006f66 <_printf_float+0x32a>
 8006fe8:	e689      	b.n	8006cfe <_printf_float+0xc2>
 8006fea:	9a05      	ldr	r2, [sp, #20]
 8006fec:	464b      	mov	r3, r9
 8006fee:	4442      	add	r2, r8
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d1c1      	bne.n	8006f7e <_printf_float+0x342>
 8006ffa:	e680      	b.n	8006cfe <_printf_float+0xc2>
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffe:	2a01      	cmp	r2, #1
 8007000:	dc01      	bgt.n	8007006 <_printf_float+0x3ca>
 8007002:	07db      	lsls	r3, r3, #31
 8007004:	d538      	bpl.n	8007078 <_printf_float+0x43c>
 8007006:	2301      	movs	r3, #1
 8007008:	4642      	mov	r2, r8
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae74 	beq.w	8006cfe <_printf_float+0xc2>
 8007016:	ee18 3a10 	vmov	r3, s16
 800701a:	4652      	mov	r2, sl
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	f43f ae6b 	beq.w	8006cfe <_printf_float+0xc2>
 8007028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800702c:	2200      	movs	r2, #0
 800702e:	2300      	movs	r3, #0
 8007030:	f7f9 fd72 	bl	8000b18 <__aeabi_dcmpeq>
 8007034:	b9d8      	cbnz	r0, 800706e <_printf_float+0x432>
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	f108 0201 	add.w	r2, r8, #1
 800703c:	3b01      	subs	r3, #1
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	d10e      	bne.n	8007066 <_printf_float+0x42a>
 8007048:	e659      	b.n	8006cfe <_printf_float+0xc2>
 800704a:	2301      	movs	r3, #1
 800704c:	4652      	mov	r2, sl
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f ae52 	beq.w	8006cfe <_printf_float+0xc2>
 800705a:	f108 0801 	add.w	r8, r8, #1
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	3b01      	subs	r3, #1
 8007062:	4543      	cmp	r3, r8
 8007064:	dcf1      	bgt.n	800704a <_printf_float+0x40e>
 8007066:	464b      	mov	r3, r9
 8007068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800706c:	e6dc      	b.n	8006e28 <_printf_float+0x1ec>
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	f104 0a1a 	add.w	sl, r4, #26
 8007076:	e7f2      	b.n	800705e <_printf_float+0x422>
 8007078:	2301      	movs	r3, #1
 800707a:	4642      	mov	r2, r8
 800707c:	e7df      	b.n	800703e <_printf_float+0x402>
 800707e:	2301      	movs	r3, #1
 8007080:	464a      	mov	r2, r9
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	f43f ae38 	beq.w	8006cfe <_printf_float+0xc2>
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007096:	1a5b      	subs	r3, r3, r1
 8007098:	4543      	cmp	r3, r8
 800709a:	dcf0      	bgt.n	800707e <_printf_float+0x442>
 800709c:	e6fa      	b.n	8006e94 <_printf_float+0x258>
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	f104 0919 	add.w	r9, r4, #25
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x456>

080070a8 <_printf_common>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	4616      	mov	r6, r2
 80070ae:	4699      	mov	r9, r3
 80070b0:	688a      	ldr	r2, [r1, #8]
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	bfb8      	it	lt
 80070bc:	4613      	movlt	r3, r2
 80070be:	6033      	str	r3, [r6, #0]
 80070c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c4:	4607      	mov	r7, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b10a      	cbz	r2, 80070ce <_printf_common+0x26>
 80070ca:	3301      	adds	r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	6833      	ldrmi	r3, [r6, #0]
 80070d6:	3302      	addmi	r3, #2
 80070d8:	6033      	strmi	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d106      	bne.n	80070f0 <_printf_common+0x48>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dc26      	bgt.n	800713e <_printf_common+0x96>
 80070f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f4:	1e13      	subs	r3, r2, #0
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	0692      	lsls	r2, r2, #26
 80070fe:	d42b      	bmi.n	8007158 <_printf_common+0xb0>
 8007100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007104:	4649      	mov	r1, r9
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	3001      	adds	r0, #1
 800710c:	d01e      	beq.n	800714c <_printf_common+0xa4>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	68e5      	ldr	r5, [r4, #12]
 8007112:	6832      	ldr	r2, [r6, #0]
 8007114:	f003 0306 	and.w	r3, r3, #6
 8007118:	2b04      	cmp	r3, #4
 800711a:	bf08      	it	eq
 800711c:	1aad      	subeq	r5, r5, r2
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	bf0c      	ite	eq
 8007124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007128:	2500      	movne	r5, #0
 800712a:	4293      	cmp	r3, r2
 800712c:	bfc4      	itt	gt
 800712e:	1a9b      	subgt	r3, r3, r2
 8007130:	18ed      	addgt	r5, r5, r3
 8007132:	2600      	movs	r6, #0
 8007134:	341a      	adds	r4, #26
 8007136:	42b5      	cmp	r5, r6
 8007138:	d11a      	bne.n	8007170 <_printf_common+0xc8>
 800713a:	2000      	movs	r0, #0
 800713c:	e008      	b.n	8007150 <_printf_common+0xa8>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4649      	mov	r1, r9
 8007144:	4638      	mov	r0, r7
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d103      	bne.n	8007154 <_printf_common+0xac>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e7c6      	b.n	80070e6 <_printf_common+0x3e>
 8007158:	18e1      	adds	r1, r4, r3
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	2030      	movs	r0, #48	; 0x30
 800715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007162:	4422      	add	r2, r4
 8007164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716c:	3302      	adds	r3, #2
 800716e:	e7c7      	b.n	8007100 <_printf_common+0x58>
 8007170:	2301      	movs	r3, #1
 8007172:	4622      	mov	r2, r4
 8007174:	4649      	mov	r1, r9
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d0e6      	beq.n	800714c <_printf_common+0xa4>
 800717e:	3601      	adds	r6, #1
 8007180:	e7d9      	b.n	8007136 <_printf_common+0x8e>
	...

08007184 <_printf_i>:
 8007184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	7e0f      	ldrb	r7, [r1, #24]
 800718a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800718c:	2f78      	cmp	r7, #120	; 0x78
 800718e:	4691      	mov	r9, r2
 8007190:	4680      	mov	r8, r0
 8007192:	460c      	mov	r4, r1
 8007194:	469a      	mov	sl, r3
 8007196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800719a:	d807      	bhi.n	80071ac <_printf_i+0x28>
 800719c:	2f62      	cmp	r7, #98	; 0x62
 800719e:	d80a      	bhi.n	80071b6 <_printf_i+0x32>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	f000 80d8 	beq.w	8007356 <_printf_i+0x1d2>
 80071a6:	2f58      	cmp	r7, #88	; 0x58
 80071a8:	f000 80a3 	beq.w	80072f2 <_printf_i+0x16e>
 80071ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b4:	e03a      	b.n	800722c <_printf_i+0xa8>
 80071b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ba:	2b15      	cmp	r3, #21
 80071bc:	d8f6      	bhi.n	80071ac <_printf_i+0x28>
 80071be:	a101      	add	r1, pc, #4	; (adr r1, 80071c4 <_printf_i+0x40>)
 80071c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	08007231 	.word	0x08007231
 80071cc:	080071ad 	.word	0x080071ad
 80071d0:	080071ad 	.word	0x080071ad
 80071d4:	080071ad 	.word	0x080071ad
 80071d8:	080071ad 	.word	0x080071ad
 80071dc:	08007231 	.word	0x08007231
 80071e0:	080071ad 	.word	0x080071ad
 80071e4:	080071ad 	.word	0x080071ad
 80071e8:	080071ad 	.word	0x080071ad
 80071ec:	080071ad 	.word	0x080071ad
 80071f0:	0800733d 	.word	0x0800733d
 80071f4:	08007261 	.word	0x08007261
 80071f8:	0800731f 	.word	0x0800731f
 80071fc:	080071ad 	.word	0x080071ad
 8007200:	080071ad 	.word	0x080071ad
 8007204:	0800735f 	.word	0x0800735f
 8007208:	080071ad 	.word	0x080071ad
 800720c:	08007261 	.word	0x08007261
 8007210:	080071ad 	.word	0x080071ad
 8007214:	080071ad 	.word	0x080071ad
 8007218:	08007327 	.word	0x08007327
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	602a      	str	r2, [r5, #0]
 8007224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722c:	2301      	movs	r3, #1
 800722e:	e0a3      	b.n	8007378 <_printf_i+0x1f4>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	6829      	ldr	r1, [r5, #0]
 8007234:	0606      	lsls	r6, r0, #24
 8007236:	f101 0304 	add.w	r3, r1, #4
 800723a:	d50a      	bpl.n	8007252 <_printf_i+0xce>
 800723c:	680e      	ldr	r6, [r1, #0]
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	2e00      	cmp	r6, #0
 8007242:	da03      	bge.n	800724c <_printf_i+0xc8>
 8007244:	232d      	movs	r3, #45	; 0x2d
 8007246:	4276      	negs	r6, r6
 8007248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800724c:	485e      	ldr	r0, [pc, #376]	; (80073c8 <_printf_i+0x244>)
 800724e:	230a      	movs	r3, #10
 8007250:	e019      	b.n	8007286 <_printf_i+0x102>
 8007252:	680e      	ldr	r6, [r1, #0]
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800725a:	bf18      	it	ne
 800725c:	b236      	sxthne	r6, r6
 800725e:	e7ef      	b.n	8007240 <_printf_i+0xbc>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	6820      	ldr	r0, [r4, #0]
 8007264:	1d19      	adds	r1, r3, #4
 8007266:	6029      	str	r1, [r5, #0]
 8007268:	0601      	lsls	r1, r0, #24
 800726a:	d501      	bpl.n	8007270 <_printf_i+0xec>
 800726c:	681e      	ldr	r6, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0xf2>
 8007270:	0646      	lsls	r6, r0, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0xe8>
 8007274:	881e      	ldrh	r6, [r3, #0]
 8007276:	4854      	ldr	r0, [pc, #336]	; (80073c8 <_printf_i+0x244>)
 8007278:	2f6f      	cmp	r7, #111	; 0x6f
 800727a:	bf0c      	ite	eq
 800727c:	2308      	moveq	r3, #8
 800727e:	230a      	movne	r3, #10
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007286:	6865      	ldr	r5, [r4, #4]
 8007288:	60a5      	str	r5, [r4, #8]
 800728a:	2d00      	cmp	r5, #0
 800728c:	bfa2      	ittt	ge
 800728e:	6821      	ldrge	r1, [r4, #0]
 8007290:	f021 0104 	bicge.w	r1, r1, #4
 8007294:	6021      	strge	r1, [r4, #0]
 8007296:	b90e      	cbnz	r6, 800729c <_printf_i+0x118>
 8007298:	2d00      	cmp	r5, #0
 800729a:	d04d      	beq.n	8007338 <_printf_i+0x1b4>
 800729c:	4615      	mov	r5, r2
 800729e:	fbb6 f1f3 	udiv	r1, r6, r3
 80072a2:	fb03 6711 	mls	r7, r3, r1, r6
 80072a6:	5dc7      	ldrb	r7, [r0, r7]
 80072a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ac:	4637      	mov	r7, r6
 80072ae:	42bb      	cmp	r3, r7
 80072b0:	460e      	mov	r6, r1
 80072b2:	d9f4      	bls.n	800729e <_printf_i+0x11a>
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d10b      	bne.n	80072d0 <_printf_i+0x14c>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	07de      	lsls	r6, r3, #31
 80072bc:	d508      	bpl.n	80072d0 <_printf_i+0x14c>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	4299      	cmp	r1, r3
 80072c4:	bfde      	ittt	le
 80072c6:	2330      	movle	r3, #48	; 0x30
 80072c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072d0:	1b52      	subs	r2, r2, r5
 80072d2:	6122      	str	r2, [r4, #16]
 80072d4:	f8cd a000 	str.w	sl, [sp]
 80072d8:	464b      	mov	r3, r9
 80072da:	aa03      	add	r2, sp, #12
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7ff fee2 	bl	80070a8 <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d14c      	bne.n	8007382 <_printf_i+0x1fe>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b004      	add	sp, #16
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	4835      	ldr	r0, [pc, #212]	; (80073c8 <_printf_i+0x244>)
 80072f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072f8:	6829      	ldr	r1, [r5, #0]
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007300:	6029      	str	r1, [r5, #0]
 8007302:	061d      	lsls	r5, r3, #24
 8007304:	d514      	bpl.n	8007330 <_printf_i+0x1ac>
 8007306:	07df      	lsls	r7, r3, #31
 8007308:	bf44      	itt	mi
 800730a:	f043 0320 	orrmi.w	r3, r3, #32
 800730e:	6023      	strmi	r3, [r4, #0]
 8007310:	b91e      	cbnz	r6, 800731a <_printf_i+0x196>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f023 0320 	bic.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	2310      	movs	r3, #16
 800731c:	e7b0      	b.n	8007280 <_printf_i+0xfc>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	f043 0320 	orr.w	r3, r3, #32
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2378      	movs	r3, #120	; 0x78
 8007328:	4828      	ldr	r0, [pc, #160]	; (80073cc <_printf_i+0x248>)
 800732a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800732e:	e7e3      	b.n	80072f8 <_printf_i+0x174>
 8007330:	0659      	lsls	r1, r3, #25
 8007332:	bf48      	it	mi
 8007334:	b2b6      	uxthmi	r6, r6
 8007336:	e7e6      	b.n	8007306 <_printf_i+0x182>
 8007338:	4615      	mov	r5, r2
 800733a:	e7bb      	b.n	80072b4 <_printf_i+0x130>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6826      	ldr	r6, [r4, #0]
 8007340:	6961      	ldr	r1, [r4, #20]
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	6028      	str	r0, [r5, #0]
 8007346:	0635      	lsls	r5, r6, #24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	d501      	bpl.n	8007350 <_printf_i+0x1cc>
 800734c:	6019      	str	r1, [r3, #0]
 800734e:	e002      	b.n	8007356 <_printf_i+0x1d2>
 8007350:	0670      	lsls	r0, r6, #25
 8007352:	d5fb      	bpl.n	800734c <_printf_i+0x1c8>
 8007354:	8019      	strh	r1, [r3, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	4615      	mov	r5, r2
 800735c:	e7ba      	b.n	80072d4 <_printf_i+0x150>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	602a      	str	r2, [r5, #0]
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	2100      	movs	r1, #0
 800736a:	4628      	mov	r0, r5
 800736c:	f7f8 ff60 	bl	8000230 <memchr>
 8007370:	b108      	cbz	r0, 8007376 <_printf_i+0x1f2>
 8007372:	1b40      	subs	r0, r0, r5
 8007374:	6060      	str	r0, [r4, #4]
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	2300      	movs	r3, #0
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	e7a8      	b.n	80072d4 <_printf_i+0x150>
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	462a      	mov	r2, r5
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	47d0      	blx	sl
 800738c:	3001      	adds	r0, #1
 800738e:	d0ab      	beq.n	80072e8 <_printf_i+0x164>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	079b      	lsls	r3, r3, #30
 8007394:	d413      	bmi.n	80073be <_printf_i+0x23a>
 8007396:	68e0      	ldr	r0, [r4, #12]
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	4298      	cmp	r0, r3
 800739c:	bfb8      	it	lt
 800739e:	4618      	movlt	r0, r3
 80073a0:	e7a4      	b.n	80072ec <_printf_i+0x168>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4632      	mov	r2, r6
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	47d0      	blx	sl
 80073ac:	3001      	adds	r0, #1
 80073ae:	d09b      	beq.n	80072e8 <_printf_i+0x164>
 80073b0:	3501      	adds	r5, #1
 80073b2:	68e3      	ldr	r3, [r4, #12]
 80073b4:	9903      	ldr	r1, [sp, #12]
 80073b6:	1a5b      	subs	r3, r3, r1
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dcf2      	bgt.n	80073a2 <_printf_i+0x21e>
 80073bc:	e7eb      	b.n	8007396 <_printf_i+0x212>
 80073be:	2500      	movs	r5, #0
 80073c0:	f104 0619 	add.w	r6, r4, #25
 80073c4:	e7f5      	b.n	80073b2 <_printf_i+0x22e>
 80073c6:	bf00      	nop
 80073c8:	0800b8ba 	.word	0x0800b8ba
 80073cc:	0800b8cb 	.word	0x0800b8cb

080073d0 <_scanf_float>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	b087      	sub	sp, #28
 80073d6:	4617      	mov	r7, r2
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	688b      	ldr	r3, [r1, #8]
 80073dc:	1e5a      	subs	r2, r3, #1
 80073de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073e2:	bf83      	ittte	hi
 80073e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073e8:	195b      	addhi	r3, r3, r5
 80073ea:	9302      	strhi	r3, [sp, #8]
 80073ec:	2300      	movls	r3, #0
 80073ee:	bf86      	itte	hi
 80073f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073f4:	608b      	strhi	r3, [r1, #8]
 80073f6:	9302      	strls	r3, [sp, #8]
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	468b      	mov	fp, r1
 80073fc:	2500      	movs	r5, #0
 80073fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007402:	f84b 3b1c 	str.w	r3, [fp], #28
 8007406:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800740a:	4680      	mov	r8, r0
 800740c:	460c      	mov	r4, r1
 800740e:	465e      	mov	r6, fp
 8007410:	46aa      	mov	sl, r5
 8007412:	46a9      	mov	r9, r5
 8007414:	9501      	str	r5, [sp, #4]
 8007416:	68a2      	ldr	r2, [r4, #8]
 8007418:	b152      	cbz	r2, 8007430 <_scanf_float+0x60>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b4e      	cmp	r3, #78	; 0x4e
 8007420:	d864      	bhi.n	80074ec <_scanf_float+0x11c>
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d83c      	bhi.n	80074a0 <_scanf_float+0xd0>
 8007426:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800742a:	b2c8      	uxtb	r0, r1
 800742c:	280e      	cmp	r0, #14
 800742e:	d93a      	bls.n	80074a6 <_scanf_float+0xd6>
 8007430:	f1b9 0f00 	cmp.w	r9, #0
 8007434:	d003      	beq.n	800743e <_scanf_float+0x6e>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007442:	f1ba 0f01 	cmp.w	sl, #1
 8007446:	f200 8113 	bhi.w	8007670 <_scanf_float+0x2a0>
 800744a:	455e      	cmp	r6, fp
 800744c:	f200 8105 	bhi.w	800765a <_scanf_float+0x28a>
 8007450:	2501      	movs	r5, #1
 8007452:	4628      	mov	r0, r5
 8007454:	b007      	add	sp, #28
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800745e:	2a0d      	cmp	r2, #13
 8007460:	d8e6      	bhi.n	8007430 <_scanf_float+0x60>
 8007462:	a101      	add	r1, pc, #4	; (adr r1, 8007468 <_scanf_float+0x98>)
 8007464:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007468:	080075a7 	.word	0x080075a7
 800746c:	08007431 	.word	0x08007431
 8007470:	08007431 	.word	0x08007431
 8007474:	08007431 	.word	0x08007431
 8007478:	08007607 	.word	0x08007607
 800747c:	080075df 	.word	0x080075df
 8007480:	08007431 	.word	0x08007431
 8007484:	08007431 	.word	0x08007431
 8007488:	080075b5 	.word	0x080075b5
 800748c:	08007431 	.word	0x08007431
 8007490:	08007431 	.word	0x08007431
 8007494:	08007431 	.word	0x08007431
 8007498:	08007431 	.word	0x08007431
 800749c:	0800756d 	.word	0x0800756d
 80074a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80074a4:	e7db      	b.n	800745e <_scanf_float+0x8e>
 80074a6:	290e      	cmp	r1, #14
 80074a8:	d8c2      	bhi.n	8007430 <_scanf_float+0x60>
 80074aa:	a001      	add	r0, pc, #4	; (adr r0, 80074b0 <_scanf_float+0xe0>)
 80074ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074b0:	0800755f 	.word	0x0800755f
 80074b4:	08007431 	.word	0x08007431
 80074b8:	0800755f 	.word	0x0800755f
 80074bc:	080075f3 	.word	0x080075f3
 80074c0:	08007431 	.word	0x08007431
 80074c4:	0800750d 	.word	0x0800750d
 80074c8:	08007549 	.word	0x08007549
 80074cc:	08007549 	.word	0x08007549
 80074d0:	08007549 	.word	0x08007549
 80074d4:	08007549 	.word	0x08007549
 80074d8:	08007549 	.word	0x08007549
 80074dc:	08007549 	.word	0x08007549
 80074e0:	08007549 	.word	0x08007549
 80074e4:	08007549 	.word	0x08007549
 80074e8:	08007549 	.word	0x08007549
 80074ec:	2b6e      	cmp	r3, #110	; 0x6e
 80074ee:	d809      	bhi.n	8007504 <_scanf_float+0x134>
 80074f0:	2b60      	cmp	r3, #96	; 0x60
 80074f2:	d8b2      	bhi.n	800745a <_scanf_float+0x8a>
 80074f4:	2b54      	cmp	r3, #84	; 0x54
 80074f6:	d077      	beq.n	80075e8 <_scanf_float+0x218>
 80074f8:	2b59      	cmp	r3, #89	; 0x59
 80074fa:	d199      	bne.n	8007430 <_scanf_float+0x60>
 80074fc:	2d07      	cmp	r5, #7
 80074fe:	d197      	bne.n	8007430 <_scanf_float+0x60>
 8007500:	2508      	movs	r5, #8
 8007502:	e029      	b.n	8007558 <_scanf_float+0x188>
 8007504:	2b74      	cmp	r3, #116	; 0x74
 8007506:	d06f      	beq.n	80075e8 <_scanf_float+0x218>
 8007508:	2b79      	cmp	r3, #121	; 0x79
 800750a:	e7f6      	b.n	80074fa <_scanf_float+0x12a>
 800750c:	6821      	ldr	r1, [r4, #0]
 800750e:	05c8      	lsls	r0, r1, #23
 8007510:	d51a      	bpl.n	8007548 <_scanf_float+0x178>
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007518:	6021      	str	r1, [r4, #0]
 800751a:	f109 0901 	add.w	r9, r9, #1
 800751e:	b11b      	cbz	r3, 8007528 <_scanf_float+0x158>
 8007520:	3b01      	subs	r3, #1
 8007522:	3201      	adds	r2, #1
 8007524:	9302      	str	r3, [sp, #8]
 8007526:	60a2      	str	r2, [r4, #8]
 8007528:	68a3      	ldr	r3, [r4, #8]
 800752a:	3b01      	subs	r3, #1
 800752c:	60a3      	str	r3, [r4, #8]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	f340 8084 	ble.w	8007648 <_scanf_float+0x278>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	e766      	b.n	8007416 <_scanf_float+0x46>
 8007548:	eb1a 0f05 	cmn.w	sl, r5
 800754c:	f47f af70 	bne.w	8007430 <_scanf_float+0x60>
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007556:	6022      	str	r2, [r4, #0]
 8007558:	f806 3b01 	strb.w	r3, [r6], #1
 800755c:	e7e4      	b.n	8007528 <_scanf_float+0x158>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	0610      	lsls	r0, r2, #24
 8007562:	f57f af65 	bpl.w	8007430 <_scanf_float+0x60>
 8007566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800756a:	e7f4      	b.n	8007556 <_scanf_float+0x186>
 800756c:	f1ba 0f00 	cmp.w	sl, #0
 8007570:	d10e      	bne.n	8007590 <_scanf_float+0x1c0>
 8007572:	f1b9 0f00 	cmp.w	r9, #0
 8007576:	d10e      	bne.n	8007596 <_scanf_float+0x1c6>
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800757e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007582:	d108      	bne.n	8007596 <_scanf_float+0x1c6>
 8007584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	f04f 0a01 	mov.w	sl, #1
 800758e:	e7e3      	b.n	8007558 <_scanf_float+0x188>
 8007590:	f1ba 0f02 	cmp.w	sl, #2
 8007594:	d055      	beq.n	8007642 <_scanf_float+0x272>
 8007596:	2d01      	cmp	r5, #1
 8007598:	d002      	beq.n	80075a0 <_scanf_float+0x1d0>
 800759a:	2d04      	cmp	r5, #4
 800759c:	f47f af48 	bne.w	8007430 <_scanf_float+0x60>
 80075a0:	3501      	adds	r5, #1
 80075a2:	b2ed      	uxtb	r5, r5
 80075a4:	e7d8      	b.n	8007558 <_scanf_float+0x188>
 80075a6:	f1ba 0f01 	cmp.w	sl, #1
 80075aa:	f47f af41 	bne.w	8007430 <_scanf_float+0x60>
 80075ae:	f04f 0a02 	mov.w	sl, #2
 80075b2:	e7d1      	b.n	8007558 <_scanf_float+0x188>
 80075b4:	b97d      	cbnz	r5, 80075d6 <_scanf_float+0x206>
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	f47f af3c 	bne.w	8007436 <_scanf_float+0x66>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80075c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80075c8:	f47f af39 	bne.w	800743e <_scanf_float+0x6e>
 80075cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075d0:	6022      	str	r2, [r4, #0]
 80075d2:	2501      	movs	r5, #1
 80075d4:	e7c0      	b.n	8007558 <_scanf_float+0x188>
 80075d6:	2d03      	cmp	r5, #3
 80075d8:	d0e2      	beq.n	80075a0 <_scanf_float+0x1d0>
 80075da:	2d05      	cmp	r5, #5
 80075dc:	e7de      	b.n	800759c <_scanf_float+0x1cc>
 80075de:	2d02      	cmp	r5, #2
 80075e0:	f47f af26 	bne.w	8007430 <_scanf_float+0x60>
 80075e4:	2503      	movs	r5, #3
 80075e6:	e7b7      	b.n	8007558 <_scanf_float+0x188>
 80075e8:	2d06      	cmp	r5, #6
 80075ea:	f47f af21 	bne.w	8007430 <_scanf_float+0x60>
 80075ee:	2507      	movs	r5, #7
 80075f0:	e7b2      	b.n	8007558 <_scanf_float+0x188>
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	0591      	lsls	r1, r2, #22
 80075f6:	f57f af1b 	bpl.w	8007430 <_scanf_float+0x60>
 80075fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	f8cd 9004 	str.w	r9, [sp, #4]
 8007604:	e7a8      	b.n	8007558 <_scanf_float+0x188>
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800760c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007610:	d006      	beq.n	8007620 <_scanf_float+0x250>
 8007612:	0550      	lsls	r0, r2, #21
 8007614:	f57f af0c 	bpl.w	8007430 <_scanf_float+0x60>
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	f43f af0f 	beq.w	800743e <_scanf_float+0x6e>
 8007620:	0591      	lsls	r1, r2, #22
 8007622:	bf58      	it	pl
 8007624:	9901      	ldrpl	r1, [sp, #4]
 8007626:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800762a:	bf58      	it	pl
 800762c:	eba9 0101 	subpl.w	r1, r9, r1
 8007630:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007634:	bf58      	it	pl
 8007636:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	f04f 0900 	mov.w	r9, #0
 8007640:	e78a      	b.n	8007558 <_scanf_float+0x188>
 8007642:	f04f 0a03 	mov.w	sl, #3
 8007646:	e787      	b.n	8007558 <_scanf_float+0x188>
 8007648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800764c:	4639      	mov	r1, r7
 800764e:	4640      	mov	r0, r8
 8007650:	4798      	blx	r3
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f aedf 	beq.w	8007416 <_scanf_float+0x46>
 8007658:	e6ea      	b.n	8007430 <_scanf_float+0x60>
 800765a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800765e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007662:	463a      	mov	r2, r7
 8007664:	4640      	mov	r0, r8
 8007666:	4798      	blx	r3
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	3b01      	subs	r3, #1
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	e6ec      	b.n	800744a <_scanf_float+0x7a>
 8007670:	1e6b      	subs	r3, r5, #1
 8007672:	2b06      	cmp	r3, #6
 8007674:	d825      	bhi.n	80076c2 <_scanf_float+0x2f2>
 8007676:	2d02      	cmp	r5, #2
 8007678:	d836      	bhi.n	80076e8 <_scanf_float+0x318>
 800767a:	455e      	cmp	r6, fp
 800767c:	f67f aee8 	bls.w	8007450 <_scanf_float+0x80>
 8007680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007684:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007688:	463a      	mov	r2, r7
 800768a:	4640      	mov	r0, r8
 800768c:	4798      	blx	r3
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	3b01      	subs	r3, #1
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	e7f1      	b.n	800767a <_scanf_float+0x2aa>
 8007696:	9802      	ldr	r0, [sp, #8]
 8007698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800769c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80076a0:	9002      	str	r0, [sp, #8]
 80076a2:	463a      	mov	r2, r7
 80076a4:	4640      	mov	r0, r8
 80076a6:	4798      	blx	r3
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076b2:	fa5f fa8a 	uxtb.w	sl, sl
 80076b6:	f1ba 0f02 	cmp.w	sl, #2
 80076ba:	d1ec      	bne.n	8007696 <_scanf_float+0x2c6>
 80076bc:	3d03      	subs	r5, #3
 80076be:	b2ed      	uxtb	r5, r5
 80076c0:	1b76      	subs	r6, r6, r5
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	05da      	lsls	r2, r3, #23
 80076c6:	d52f      	bpl.n	8007728 <_scanf_float+0x358>
 80076c8:	055b      	lsls	r3, r3, #21
 80076ca:	d510      	bpl.n	80076ee <_scanf_float+0x31e>
 80076cc:	455e      	cmp	r6, fp
 80076ce:	f67f aebf 	bls.w	8007450 <_scanf_float+0x80>
 80076d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076da:	463a      	mov	r2, r7
 80076dc:	4640      	mov	r0, r8
 80076de:	4798      	blx	r3
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	6123      	str	r3, [r4, #16]
 80076e6:	e7f1      	b.n	80076cc <_scanf_float+0x2fc>
 80076e8:	46aa      	mov	sl, r5
 80076ea:	9602      	str	r6, [sp, #8]
 80076ec:	e7df      	b.n	80076ae <_scanf_float+0x2de>
 80076ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	2965      	cmp	r1, #101	; 0x65
 80076f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80076fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80076fe:	6123      	str	r3, [r4, #16]
 8007700:	d00c      	beq.n	800771c <_scanf_float+0x34c>
 8007702:	2945      	cmp	r1, #69	; 0x45
 8007704:	d00a      	beq.n	800771c <_scanf_float+0x34c>
 8007706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800770a:	463a      	mov	r2, r7
 800770c:	4640      	mov	r0, r8
 800770e:	4798      	blx	r3
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007716:	3b01      	subs	r3, #1
 8007718:	1eb5      	subs	r5, r6, #2
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007720:	463a      	mov	r2, r7
 8007722:	4640      	mov	r0, r8
 8007724:	4798      	blx	r3
 8007726:	462e      	mov	r6, r5
 8007728:	6825      	ldr	r5, [r4, #0]
 800772a:	f015 0510 	ands.w	r5, r5, #16
 800772e:	d159      	bne.n	80077e4 <_scanf_float+0x414>
 8007730:	7035      	strb	r5, [r6, #0]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773c:	d11b      	bne.n	8007776 <_scanf_float+0x3a6>
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	454b      	cmp	r3, r9
 8007742:	eba3 0209 	sub.w	r2, r3, r9
 8007746:	d123      	bne.n	8007790 <_scanf_float+0x3c0>
 8007748:	2200      	movs	r2, #0
 800774a:	4659      	mov	r1, fp
 800774c:	4640      	mov	r0, r8
 800774e:	f000 ff25 	bl	800859c <_strtod_r>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	f012 0f02 	tst.w	r2, #2
 800775a:	ec57 6b10 	vmov	r6, r7, d0
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	d021      	beq.n	80077a6 <_scanf_float+0x3d6>
 8007762:	9903      	ldr	r1, [sp, #12]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	600a      	str	r2, [r1, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	e9c3 6700 	strd	r6, r7, [r3]
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60e3      	str	r3, [r4, #12]
 8007774:	e66d      	b.n	8007452 <_scanf_float+0x82>
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0e5      	beq.n	8007748 <_scanf_float+0x378>
 800777c:	9905      	ldr	r1, [sp, #20]
 800777e:	230a      	movs	r3, #10
 8007780:	462a      	mov	r2, r5
 8007782:	3101      	adds	r1, #1
 8007784:	4640      	mov	r0, r8
 8007786:	f000 ff91 	bl	80086ac <_strtol_r>
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	9e05      	ldr	r6, [sp, #20]
 800778e:	1ac2      	subs	r2, r0, r3
 8007790:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007794:	429e      	cmp	r6, r3
 8007796:	bf28      	it	cs
 8007798:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800779c:	4912      	ldr	r1, [pc, #72]	; (80077e8 <_scanf_float+0x418>)
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 f8ba 	bl	8007918 <siprintf>
 80077a4:	e7d0      	b.n	8007748 <_scanf_float+0x378>
 80077a6:	9903      	ldr	r1, [sp, #12]
 80077a8:	f012 0f04 	tst.w	r2, #4
 80077ac:	f103 0204 	add.w	r2, r3, #4
 80077b0:	600a      	str	r2, [r1, #0]
 80077b2:	d1d9      	bne.n	8007768 <_scanf_float+0x398>
 80077b4:	f8d3 8000 	ldr.w	r8, [r3]
 80077b8:	ee10 2a10 	vmov	r2, s0
 80077bc:	ee10 0a10 	vmov	r0, s0
 80077c0:	463b      	mov	r3, r7
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f9 f9da 	bl	8000b7c <__aeabi_dcmpun>
 80077c8:	b128      	cbz	r0, 80077d6 <_scanf_float+0x406>
 80077ca:	4808      	ldr	r0, [pc, #32]	; (80077ec <_scanf_float+0x41c>)
 80077cc:	f000 f89e 	bl	800790c <nanf>
 80077d0:	ed88 0a00 	vstr	s0, [r8]
 80077d4:	e7cb      	b.n	800776e <_scanf_float+0x39e>
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f9 fa2d 	bl	8000c38 <__aeabi_d2f>
 80077de:	f8c8 0000 	str.w	r0, [r8]
 80077e2:	e7c4      	b.n	800776e <_scanf_float+0x39e>
 80077e4:	2500      	movs	r5, #0
 80077e6:	e634      	b.n	8007452 <_scanf_float+0x82>
 80077e8:	0800b8dc 	.word	0x0800b8dc
 80077ec:	0800bd50 	.word	0x0800bd50

080077f0 <iprintf>:
 80077f0:	b40f      	push	{r0, r1, r2, r3}
 80077f2:	4b0a      	ldr	r3, [pc, #40]	; (800781c <iprintf+0x2c>)
 80077f4:	b513      	push	{r0, r1, r4, lr}
 80077f6:	681c      	ldr	r4, [r3, #0]
 80077f8:	b124      	cbz	r4, 8007804 <iprintf+0x14>
 80077fa:	69a3      	ldr	r3, [r4, #24]
 80077fc:	b913      	cbnz	r3, 8007804 <iprintf+0x14>
 80077fe:	4620      	mov	r0, r4
 8007800:	f001 ffaa 	bl	8009758 <__sinit>
 8007804:	ab05      	add	r3, sp, #20
 8007806:	9a04      	ldr	r2, [sp, #16]
 8007808:	68a1      	ldr	r1, [r4, #8]
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	4620      	mov	r0, r4
 800780e:	f003 fb81 	bl	800af14 <_vfiprintf_r>
 8007812:	b002      	add	sp, #8
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	b004      	add	sp, #16
 800781a:	4770      	bx	lr
 800781c:	2000000c 	.word	0x2000000c

08007820 <_puts_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	460e      	mov	r6, r1
 8007824:	4605      	mov	r5, r0
 8007826:	b118      	cbz	r0, 8007830 <_puts_r+0x10>
 8007828:	6983      	ldr	r3, [r0, #24]
 800782a:	b90b      	cbnz	r3, 8007830 <_puts_r+0x10>
 800782c:	f001 ff94 	bl	8009758 <__sinit>
 8007830:	69ab      	ldr	r3, [r5, #24]
 8007832:	68ac      	ldr	r4, [r5, #8]
 8007834:	b913      	cbnz	r3, 800783c <_puts_r+0x1c>
 8007836:	4628      	mov	r0, r5
 8007838:	f001 ff8e 	bl	8009758 <__sinit>
 800783c:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <_puts_r+0xd0>)
 800783e:	429c      	cmp	r4, r3
 8007840:	d120      	bne.n	8007884 <_puts_r+0x64>
 8007842:	686c      	ldr	r4, [r5, #4]
 8007844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007846:	07db      	lsls	r3, r3, #31
 8007848:	d405      	bmi.n	8007856 <_puts_r+0x36>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	0598      	lsls	r0, r3, #22
 800784e:	d402      	bmi.n	8007856 <_puts_r+0x36>
 8007850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007852:	f002 fb92 	bl	8009f7a <__retarget_lock_acquire_recursive>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d51d      	bpl.n	8007898 <_puts_r+0x78>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	b1db      	cbz	r3, 8007898 <_puts_r+0x78>
 8007860:	3e01      	subs	r6, #1
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007868:	3b01      	subs	r3, #1
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	bb39      	cbnz	r1, 80078be <_puts_r+0x9e>
 800786e:	2b00      	cmp	r3, #0
 8007870:	da38      	bge.n	80078e4 <_puts_r+0xc4>
 8007872:	4622      	mov	r2, r4
 8007874:	210a      	movs	r1, #10
 8007876:	4628      	mov	r0, r5
 8007878:	f000 ff1a 	bl	80086b0 <__swbuf_r>
 800787c:	3001      	adds	r0, #1
 800787e:	d011      	beq.n	80078a4 <_puts_r+0x84>
 8007880:	250a      	movs	r5, #10
 8007882:	e011      	b.n	80078a8 <_puts_r+0x88>
 8007884:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <_puts_r+0xd4>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <_puts_r+0x6e>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7da      	b.n	8007844 <_puts_r+0x24>
 800788e:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <_puts_r+0xd8>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7d5      	b.n	8007844 <_puts_r+0x24>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 ff5a 	bl	8008754 <__swsetup_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0dd      	beq.n	8007860 <_puts_r+0x40>
 80078a4:	f04f 35ff 	mov.w	r5, #4294967295
 80078a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078aa:	07da      	lsls	r2, r3, #31
 80078ac:	d405      	bmi.n	80078ba <_puts_r+0x9a>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	059b      	lsls	r3, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_puts_r+0x9a>
 80078b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b6:	f002 fb61 	bl	8009f7c <__retarget_lock_release_recursive>
 80078ba:	4628      	mov	r0, r5
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da04      	bge.n	80078cc <_puts_r+0xac>
 80078c2:	69a2      	ldr	r2, [r4, #24]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	dc06      	bgt.n	80078d6 <_puts_r+0xb6>
 80078c8:	290a      	cmp	r1, #10
 80078ca:	d004      	beq.n	80078d6 <_puts_r+0xb6>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	7019      	strb	r1, [r3, #0]
 80078d4:	e7c5      	b.n	8007862 <_puts_r+0x42>
 80078d6:	4622      	mov	r2, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fee9 	bl	80086b0 <__swbuf_r>
 80078de:	3001      	adds	r0, #1
 80078e0:	d1bf      	bne.n	8007862 <_puts_r+0x42>
 80078e2:	e7df      	b.n	80078a4 <_puts_r+0x84>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	250a      	movs	r5, #10
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	6022      	str	r2, [r4, #0]
 80078ec:	701d      	strb	r5, [r3, #0]
 80078ee:	e7db      	b.n	80078a8 <_puts_r+0x88>
 80078f0:	0800baec 	.word	0x0800baec
 80078f4:	0800bb0c 	.word	0x0800bb0c
 80078f8:	0800bacc 	.word	0x0800bacc

080078fc <puts>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <puts+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f7ff bf8d 	b.w	8007820 <_puts_r>
 8007906:	bf00      	nop
 8007908:	2000000c 	.word	0x2000000c

0800790c <nanf>:
 800790c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007914 <nanf+0x8>
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	7fc00000 	.word	0x7fc00000

08007918 <siprintf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b500      	push	{lr}
 800791c:	b09c      	sub	sp, #112	; 0x70
 800791e:	ab1d      	add	r3, sp, #116	; 0x74
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007928:	4809      	ldr	r0, [pc, #36]	; (8007950 <siprintf+0x38>)
 800792a:	9107      	str	r1, [sp, #28]
 800792c:	9104      	str	r1, [sp, #16]
 800792e:	4909      	ldr	r1, [pc, #36]	; (8007954 <siprintf+0x3c>)
 8007930:	f853 2b04 	ldr.w	r2, [r3], #4
 8007934:	9105      	str	r1, [sp, #20]
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	a902      	add	r1, sp, #8
 800793c:	f003 f9c0 	bl	800acc0 <_svfiprintf_r>
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	b01c      	add	sp, #112	; 0x70
 8007948:	f85d eb04 	ldr.w	lr, [sp], #4
 800794c:	b003      	add	sp, #12
 800794e:	4770      	bx	lr
 8007950:	2000000c 	.word	0x2000000c
 8007954:	ffff0208 	.word	0xffff0208

08007958 <sulp>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	460d      	mov	r5, r1
 800795e:	ec45 4b10 	vmov	d0, r4, r5
 8007962:	4616      	mov	r6, r2
 8007964:	f002 ff0a 	bl	800a77c <__ulp>
 8007968:	ec51 0b10 	vmov	r0, r1, d0
 800796c:	b17e      	cbz	r6, 800798e <sulp+0x36>
 800796e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007972:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007976:	2b00      	cmp	r3, #0
 8007978:	dd09      	ble.n	800798e <sulp+0x36>
 800797a:	051b      	lsls	r3, r3, #20
 800797c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007980:	2400      	movs	r4, #0
 8007982:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	f7f8 fe5d 	bl	8000648 <__aeabi_dmul>
 800798e:	bd70      	pop	{r4, r5, r6, pc}

08007990 <_strtod_l>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	ed2d 8b02 	vpush	{d8}
 8007998:	b09d      	sub	sp, #116	; 0x74
 800799a:	461f      	mov	r7, r3
 800799c:	2300      	movs	r3, #0
 800799e:	9318      	str	r3, [sp, #96]	; 0x60
 80079a0:	4ba2      	ldr	r3, [pc, #648]	; (8007c2c <_strtod_l+0x29c>)
 80079a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	9305      	str	r3, [sp, #20]
 80079a8:	4604      	mov	r4, r0
 80079aa:	4618      	mov	r0, r3
 80079ac:	4688      	mov	r8, r1
 80079ae:	f7f8 fc37 	bl	8000220 <strlen>
 80079b2:	f04f 0a00 	mov.w	sl, #0
 80079b6:	4605      	mov	r5, r0
 80079b8:	f04f 0b00 	mov.w	fp, #0
 80079bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80079c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	2a2b      	cmp	r2, #43	; 0x2b
 80079c6:	d04e      	beq.n	8007a66 <_strtod_l+0xd6>
 80079c8:	d83b      	bhi.n	8007a42 <_strtod_l+0xb2>
 80079ca:	2a0d      	cmp	r2, #13
 80079cc:	d834      	bhi.n	8007a38 <_strtod_l+0xa8>
 80079ce:	2a08      	cmp	r2, #8
 80079d0:	d834      	bhi.n	8007a3c <_strtod_l+0xac>
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d03e      	beq.n	8007a54 <_strtod_l+0xc4>
 80079d6:	2300      	movs	r3, #0
 80079d8:	930a      	str	r3, [sp, #40]	; 0x28
 80079da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80079dc:	7833      	ldrb	r3, [r6, #0]
 80079de:	2b30      	cmp	r3, #48	; 0x30
 80079e0:	f040 80b0 	bne.w	8007b44 <_strtod_l+0x1b4>
 80079e4:	7873      	ldrb	r3, [r6, #1]
 80079e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079ea:	2b58      	cmp	r3, #88	; 0x58
 80079ec:	d168      	bne.n	8007ac0 <_strtod_l+0x130>
 80079ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	ab18      	add	r3, sp, #96	; 0x60
 80079f4:	9702      	str	r7, [sp, #8]
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	4a8d      	ldr	r2, [pc, #564]	; (8007c30 <_strtod_l+0x2a0>)
 80079fa:	ab19      	add	r3, sp, #100	; 0x64
 80079fc:	a917      	add	r1, sp, #92	; 0x5c
 80079fe:	4620      	mov	r0, r4
 8007a00:	f001 ffae 	bl	8009960 <__gethex>
 8007a04:	f010 0707 	ands.w	r7, r0, #7
 8007a08:	4605      	mov	r5, r0
 8007a0a:	d005      	beq.n	8007a18 <_strtod_l+0x88>
 8007a0c:	2f06      	cmp	r7, #6
 8007a0e:	d12c      	bne.n	8007a6a <_strtod_l+0xda>
 8007a10:	3601      	adds	r6, #1
 8007a12:	2300      	movs	r3, #0
 8007a14:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a16:	930a      	str	r3, [sp, #40]	; 0x28
 8007a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 8590 	bne.w	8008540 <_strtod_l+0xbb0>
 8007a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a22:	b1eb      	cbz	r3, 8007a60 <_strtod_l+0xd0>
 8007a24:	4652      	mov	r2, sl
 8007a26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a2a:	ec43 2b10 	vmov	d0, r2, r3
 8007a2e:	b01d      	add	sp, #116	; 0x74
 8007a30:	ecbd 8b02 	vpop	{d8}
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	2a20      	cmp	r2, #32
 8007a3a:	d1cc      	bne.n	80079d6 <_strtod_l+0x46>
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a40:	e7be      	b.n	80079c0 <_strtod_l+0x30>
 8007a42:	2a2d      	cmp	r2, #45	; 0x2d
 8007a44:	d1c7      	bne.n	80079d6 <_strtod_l+0x46>
 8007a46:	2201      	movs	r2, #1
 8007a48:	920a      	str	r2, [sp, #40]	; 0x28
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1c2      	bne.n	80079da <_strtod_l+0x4a>
 8007a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 856e 	bne.w	800853c <_strtod_l+0xbac>
 8007a60:	4652      	mov	r2, sl
 8007a62:	465b      	mov	r3, fp
 8007a64:	e7e1      	b.n	8007a2a <_strtod_l+0x9a>
 8007a66:	2200      	movs	r2, #0
 8007a68:	e7ee      	b.n	8007a48 <_strtod_l+0xb8>
 8007a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a6c:	b13a      	cbz	r2, 8007a7e <_strtod_l+0xee>
 8007a6e:	2135      	movs	r1, #53	; 0x35
 8007a70:	a81a      	add	r0, sp, #104	; 0x68
 8007a72:	f002 ff8e 	bl	800a992 <__copybits>
 8007a76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f002 fb4d 	bl	800a118 <_Bfree>
 8007a7e:	3f01      	subs	r7, #1
 8007a80:	2f04      	cmp	r7, #4
 8007a82:	d806      	bhi.n	8007a92 <_strtod_l+0x102>
 8007a84:	e8df f007 	tbb	[pc, r7]
 8007a88:	1714030a 	.word	0x1714030a
 8007a8c:	0a          	.byte	0x0a
 8007a8d:	00          	.byte	0x00
 8007a8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007a92:	0728      	lsls	r0, r5, #28
 8007a94:	d5c0      	bpl.n	8007a18 <_strtod_l+0x88>
 8007a96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a9a:	e7bd      	b.n	8007a18 <_strtod_l+0x88>
 8007a9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007aa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007aa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007aa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007aaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007aae:	e7f0      	b.n	8007a92 <_strtod_l+0x102>
 8007ab0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007c34 <_strtod_l+0x2a4>
 8007ab4:	e7ed      	b.n	8007a92 <_strtod_l+0x102>
 8007ab6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007aba:	f04f 3aff 	mov.w	sl, #4294967295
 8007abe:	e7e8      	b.n	8007a92 <_strtod_l+0x102>
 8007ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b30      	cmp	r3, #48	; 0x30
 8007aca:	d0f9      	beq.n	8007ac0 <_strtod_l+0x130>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0a3      	beq.n	8007a18 <_strtod_l+0x88>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f04f 0900 	mov.w	r9, #0
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ae0:	464f      	mov	r7, r9
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ae6:	7806      	ldrb	r6, [r0, #0]
 8007ae8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007aec:	b2d9      	uxtb	r1, r3
 8007aee:	2909      	cmp	r1, #9
 8007af0:	d92a      	bls.n	8007b48 <_strtod_l+0x1b8>
 8007af2:	9905      	ldr	r1, [sp, #20]
 8007af4:	462a      	mov	r2, r5
 8007af6:	f003 fb9a 	bl	800b22e <strncmp>
 8007afa:	b398      	cbz	r0, 8007b64 <_strtod_l+0x1d4>
 8007afc:	2000      	movs	r0, #0
 8007afe:	4632      	mov	r2, r6
 8007b00:	463d      	mov	r5, r7
 8007b02:	9005      	str	r0, [sp, #20]
 8007b04:	4603      	mov	r3, r0
 8007b06:	2a65      	cmp	r2, #101	; 0x65
 8007b08:	d001      	beq.n	8007b0e <_strtod_l+0x17e>
 8007b0a:	2a45      	cmp	r2, #69	; 0x45
 8007b0c:	d118      	bne.n	8007b40 <_strtod_l+0x1b0>
 8007b0e:	b91d      	cbnz	r5, 8007b18 <_strtod_l+0x188>
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	4302      	orrs	r2, r0
 8007b14:	d09e      	beq.n	8007a54 <_strtod_l+0xc4>
 8007b16:	2500      	movs	r5, #0
 8007b18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b1c:	f108 0201 	add.w	r2, r8, #1
 8007b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007b26:	2a2b      	cmp	r2, #43	; 0x2b
 8007b28:	d075      	beq.n	8007c16 <_strtod_l+0x286>
 8007b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b2c:	d07b      	beq.n	8007c26 <_strtod_l+0x296>
 8007b2e:	f04f 0c00 	mov.w	ip, #0
 8007b32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b36:	2909      	cmp	r1, #9
 8007b38:	f240 8082 	bls.w	8007c40 <_strtod_l+0x2b0>
 8007b3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b40:	2600      	movs	r6, #0
 8007b42:	e09d      	b.n	8007c80 <_strtod_l+0x2f0>
 8007b44:	2300      	movs	r3, #0
 8007b46:	e7c4      	b.n	8007ad2 <_strtod_l+0x142>
 8007b48:	2f08      	cmp	r7, #8
 8007b4a:	bfd8      	it	le
 8007b4c:	9907      	ldrle	r1, [sp, #28]
 8007b4e:	f100 0001 	add.w	r0, r0, #1
 8007b52:	bfda      	itte	le
 8007b54:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b58:	9307      	strle	r3, [sp, #28]
 8007b5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007b5e:	3701      	adds	r7, #1
 8007b60:	9017      	str	r0, [sp, #92]	; 0x5c
 8007b62:	e7bf      	b.n	8007ae4 <_strtod_l+0x154>
 8007b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b66:	195a      	adds	r2, r3, r5
 8007b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b6a:	5d5a      	ldrb	r2, [r3, r5]
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	d037      	beq.n	8007be0 <_strtod_l+0x250>
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	463d      	mov	r5, r7
 8007b74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d912      	bls.n	8007ba2 <_strtod_l+0x212>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e7c2      	b.n	8007b06 <_strtod_l+0x176>
 8007b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b86:	785a      	ldrb	r2, [r3, #1]
 8007b88:	3001      	adds	r0, #1
 8007b8a:	2a30      	cmp	r2, #48	; 0x30
 8007b8c:	d0f8      	beq.n	8007b80 <_strtod_l+0x1f0>
 8007b8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	f200 84d9 	bhi.w	800854a <_strtod_l+0xbba>
 8007b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b9a:	9005      	str	r0, [sp, #20]
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	9308      	str	r3, [sp, #32]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	3a30      	subs	r2, #48	; 0x30
 8007ba4:	f100 0301 	add.w	r3, r0, #1
 8007ba8:	d014      	beq.n	8007bd4 <_strtod_l+0x244>
 8007baa:	9905      	ldr	r1, [sp, #20]
 8007bac:	4419      	add	r1, r3
 8007bae:	9105      	str	r1, [sp, #20]
 8007bb0:	462b      	mov	r3, r5
 8007bb2:	eb00 0e05 	add.w	lr, r0, r5
 8007bb6:	210a      	movs	r1, #10
 8007bb8:	4573      	cmp	r3, lr
 8007bba:	d113      	bne.n	8007be4 <_strtod_l+0x254>
 8007bbc:	182b      	adds	r3, r5, r0
 8007bbe:	2b08      	cmp	r3, #8
 8007bc0:	f105 0501 	add.w	r5, r5, #1
 8007bc4:	4405      	add	r5, r0
 8007bc6:	dc1c      	bgt.n	8007c02 <_strtod_l+0x272>
 8007bc8:	9907      	ldr	r1, [sp, #28]
 8007bca:	230a      	movs	r3, #10
 8007bcc:	fb03 2301 	mla	r3, r3, r1, r2
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bd6:	1c51      	adds	r1, r2, #1
 8007bd8:	9117      	str	r1, [sp, #92]	; 0x5c
 8007bda:	7852      	ldrb	r2, [r2, #1]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	e7c9      	b.n	8007b74 <_strtod_l+0x1e4>
 8007be0:	4638      	mov	r0, r7
 8007be2:	e7d2      	b.n	8007b8a <_strtod_l+0x1fa>
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	dc04      	bgt.n	8007bf2 <_strtod_l+0x262>
 8007be8:	9e07      	ldr	r6, [sp, #28]
 8007bea:	434e      	muls	r6, r1
 8007bec:	9607      	str	r6, [sp, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	e7e2      	b.n	8007bb8 <_strtod_l+0x228>
 8007bf2:	f103 0c01 	add.w	ip, r3, #1
 8007bf6:	f1bc 0f10 	cmp.w	ip, #16
 8007bfa:	bfd8      	it	le
 8007bfc:	fb01 f909 	mulle.w	r9, r1, r9
 8007c00:	e7f5      	b.n	8007bee <_strtod_l+0x25e>
 8007c02:	2d10      	cmp	r5, #16
 8007c04:	bfdc      	itt	le
 8007c06:	230a      	movle	r3, #10
 8007c08:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c0c:	e7e1      	b.n	8007bd2 <_strtod_l+0x242>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	2301      	movs	r3, #1
 8007c14:	e77c      	b.n	8007b10 <_strtod_l+0x180>
 8007c16:	f04f 0c00 	mov.w	ip, #0
 8007c1a:	f108 0202 	add.w	r2, r8, #2
 8007c1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007c24:	e785      	b.n	8007b32 <_strtod_l+0x1a2>
 8007c26:	f04f 0c01 	mov.w	ip, #1
 8007c2a:	e7f6      	b.n	8007c1a <_strtod_l+0x28a>
 8007c2c:	0800bb94 	.word	0x0800bb94
 8007c30:	0800b8e4 	.word	0x0800b8e4
 8007c34:	7ff00000 	.word	0x7ff00000
 8007c38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c3a:	1c51      	adds	r1, r2, #1
 8007c3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c3e:	7852      	ldrb	r2, [r2, #1]
 8007c40:	2a30      	cmp	r2, #48	; 0x30
 8007c42:	d0f9      	beq.n	8007c38 <_strtod_l+0x2a8>
 8007c44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c48:	2908      	cmp	r1, #8
 8007c4a:	f63f af79 	bhi.w	8007b40 <_strtod_l+0x1b0>
 8007c4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007c52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c54:	9206      	str	r2, [sp, #24]
 8007c56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c58:	1c51      	adds	r1, r2, #1
 8007c5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c5c:	7852      	ldrb	r2, [r2, #1]
 8007c5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007c62:	2e09      	cmp	r6, #9
 8007c64:	d937      	bls.n	8007cd6 <_strtod_l+0x346>
 8007c66:	9e06      	ldr	r6, [sp, #24]
 8007c68:	1b89      	subs	r1, r1, r6
 8007c6a:	2908      	cmp	r1, #8
 8007c6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007c70:	dc02      	bgt.n	8007c78 <_strtod_l+0x2e8>
 8007c72:	4576      	cmp	r6, lr
 8007c74:	bfa8      	it	ge
 8007c76:	4676      	movge	r6, lr
 8007c78:	f1bc 0f00 	cmp.w	ip, #0
 8007c7c:	d000      	beq.n	8007c80 <_strtod_l+0x2f0>
 8007c7e:	4276      	negs	r6, r6
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	d14d      	bne.n	8007d20 <_strtod_l+0x390>
 8007c84:	9904      	ldr	r1, [sp, #16]
 8007c86:	4301      	orrs	r1, r0
 8007c88:	f47f aec6 	bne.w	8007a18 <_strtod_l+0x88>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f aee1 	bne.w	8007a54 <_strtod_l+0xc4>
 8007c92:	2a69      	cmp	r2, #105	; 0x69
 8007c94:	d027      	beq.n	8007ce6 <_strtod_l+0x356>
 8007c96:	dc24      	bgt.n	8007ce2 <_strtod_l+0x352>
 8007c98:	2a49      	cmp	r2, #73	; 0x49
 8007c9a:	d024      	beq.n	8007ce6 <_strtod_l+0x356>
 8007c9c:	2a4e      	cmp	r2, #78	; 0x4e
 8007c9e:	f47f aed9 	bne.w	8007a54 <_strtod_l+0xc4>
 8007ca2:	499f      	ldr	r1, [pc, #636]	; (8007f20 <_strtod_l+0x590>)
 8007ca4:	a817      	add	r0, sp, #92	; 0x5c
 8007ca6:	f002 f8b3 	bl	8009e10 <__match>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f43f aed2 	beq.w	8007a54 <_strtod_l+0xc4>
 8007cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b28      	cmp	r3, #40	; 0x28
 8007cb6:	d12d      	bne.n	8007d14 <_strtod_l+0x384>
 8007cb8:	499a      	ldr	r1, [pc, #616]	; (8007f24 <_strtod_l+0x594>)
 8007cba:	aa1a      	add	r2, sp, #104	; 0x68
 8007cbc:	a817      	add	r0, sp, #92	; 0x5c
 8007cbe:	f002 f8bb 	bl	8009e38 <__hexnan>
 8007cc2:	2805      	cmp	r0, #5
 8007cc4:	d126      	bne.n	8007d14 <_strtod_l+0x384>
 8007cc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007ccc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007cd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007cd4:	e6a0      	b.n	8007a18 <_strtod_l+0x88>
 8007cd6:	210a      	movs	r1, #10
 8007cd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007cdc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ce0:	e7b9      	b.n	8007c56 <_strtod_l+0x2c6>
 8007ce2:	2a6e      	cmp	r2, #110	; 0x6e
 8007ce4:	e7db      	b.n	8007c9e <_strtod_l+0x30e>
 8007ce6:	4990      	ldr	r1, [pc, #576]	; (8007f28 <_strtod_l+0x598>)
 8007ce8:	a817      	add	r0, sp, #92	; 0x5c
 8007cea:	f002 f891 	bl	8009e10 <__match>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f43f aeb0 	beq.w	8007a54 <_strtod_l+0xc4>
 8007cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf6:	498d      	ldr	r1, [pc, #564]	; (8007f2c <_strtod_l+0x59c>)
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	a817      	add	r0, sp, #92	; 0x5c
 8007cfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cfe:	f002 f887 	bl	8009e10 <__match>
 8007d02:	b910      	cbnz	r0, 8007d0a <_strtod_l+0x37a>
 8007d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d06:	3301      	adds	r3, #1
 8007d08:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007f3c <_strtod_l+0x5ac>
 8007d0e:	f04f 0a00 	mov.w	sl, #0
 8007d12:	e681      	b.n	8007a18 <_strtod_l+0x88>
 8007d14:	4886      	ldr	r0, [pc, #536]	; (8007f30 <_strtod_l+0x5a0>)
 8007d16:	f003 fa2f 	bl	800b178 <nan>
 8007d1a:	ec5b ab10 	vmov	sl, fp, d0
 8007d1e:	e67b      	b.n	8007a18 <_strtod_l+0x88>
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	9807      	ldr	r0, [sp, #28]
 8007d24:	1af3      	subs	r3, r6, r3
 8007d26:	2f00      	cmp	r7, #0
 8007d28:	bf08      	it	eq
 8007d2a:	462f      	moveq	r7, r5
 8007d2c:	2d10      	cmp	r5, #16
 8007d2e:	9306      	str	r3, [sp, #24]
 8007d30:	46a8      	mov	r8, r5
 8007d32:	bfa8      	it	ge
 8007d34:	f04f 0810 	movge.w	r8, #16
 8007d38:	f7f8 fc0c 	bl	8000554 <__aeabi_ui2d>
 8007d3c:	2d09      	cmp	r5, #9
 8007d3e:	4682      	mov	sl, r0
 8007d40:	468b      	mov	fp, r1
 8007d42:	dd13      	ble.n	8007d6c <_strtod_l+0x3dc>
 8007d44:	4b7b      	ldr	r3, [pc, #492]	; (8007f34 <_strtod_l+0x5a4>)
 8007d46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d4e:	f7f8 fc7b 	bl	8000648 <__aeabi_dmul>
 8007d52:	4682      	mov	sl, r0
 8007d54:	4648      	mov	r0, r9
 8007d56:	468b      	mov	fp, r1
 8007d58:	f7f8 fbfc 	bl	8000554 <__aeabi_ui2d>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4650      	mov	r0, sl
 8007d62:	4659      	mov	r1, fp
 8007d64:	f7f8 faba 	bl	80002dc <__adddf3>
 8007d68:	4682      	mov	sl, r0
 8007d6a:	468b      	mov	fp, r1
 8007d6c:	2d0f      	cmp	r5, #15
 8007d6e:	dc38      	bgt.n	8007de2 <_strtod_l+0x452>
 8007d70:	9b06      	ldr	r3, [sp, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f43f ae50 	beq.w	8007a18 <_strtod_l+0x88>
 8007d78:	dd24      	ble.n	8007dc4 <_strtod_l+0x434>
 8007d7a:	2b16      	cmp	r3, #22
 8007d7c:	dc0b      	bgt.n	8007d96 <_strtod_l+0x406>
 8007d7e:	496d      	ldr	r1, [pc, #436]	; (8007f34 <_strtod_l+0x5a4>)
 8007d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d88:	4652      	mov	r2, sl
 8007d8a:	465b      	mov	r3, fp
 8007d8c:	f7f8 fc5c 	bl	8000648 <__aeabi_dmul>
 8007d90:	4682      	mov	sl, r0
 8007d92:	468b      	mov	fp, r1
 8007d94:	e640      	b.n	8007a18 <_strtod_l+0x88>
 8007d96:	9a06      	ldr	r2, [sp, #24]
 8007d98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	db20      	blt.n	8007de2 <_strtod_l+0x452>
 8007da0:	4c64      	ldr	r4, [pc, #400]	; (8007f34 <_strtod_l+0x5a4>)
 8007da2:	f1c5 050f 	rsb	r5, r5, #15
 8007da6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007daa:	4652      	mov	r2, sl
 8007dac:	465b      	mov	r3, fp
 8007dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db2:	f7f8 fc49 	bl	8000648 <__aeabi_dmul>
 8007db6:	9b06      	ldr	r3, [sp, #24]
 8007db8:	1b5d      	subs	r5, r3, r5
 8007dba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dc2:	e7e3      	b.n	8007d8c <_strtod_l+0x3fc>
 8007dc4:	9b06      	ldr	r3, [sp, #24]
 8007dc6:	3316      	adds	r3, #22
 8007dc8:	db0b      	blt.n	8007de2 <_strtod_l+0x452>
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	1b9e      	subs	r6, r3, r6
 8007dce:	4b59      	ldr	r3, [pc, #356]	; (8007f34 <_strtod_l+0x5a4>)
 8007dd0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007dd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dd8:	4650      	mov	r0, sl
 8007dda:	4659      	mov	r1, fp
 8007ddc:	f7f8 fd5e 	bl	800089c <__aeabi_ddiv>
 8007de0:	e7d6      	b.n	8007d90 <_strtod_l+0x400>
 8007de2:	9b06      	ldr	r3, [sp, #24]
 8007de4:	eba5 0808 	sub.w	r8, r5, r8
 8007de8:	4498      	add	r8, r3
 8007dea:	f1b8 0f00 	cmp.w	r8, #0
 8007dee:	dd74      	ble.n	8007eda <_strtod_l+0x54a>
 8007df0:	f018 030f 	ands.w	r3, r8, #15
 8007df4:	d00a      	beq.n	8007e0c <_strtod_l+0x47c>
 8007df6:	494f      	ldr	r1, [pc, #316]	; (8007f34 <_strtod_l+0x5a4>)
 8007df8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e04:	f7f8 fc20 	bl	8000648 <__aeabi_dmul>
 8007e08:	4682      	mov	sl, r0
 8007e0a:	468b      	mov	fp, r1
 8007e0c:	f038 080f 	bics.w	r8, r8, #15
 8007e10:	d04f      	beq.n	8007eb2 <_strtod_l+0x522>
 8007e12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e16:	dd22      	ble.n	8007e5e <_strtod_l+0x4ce>
 8007e18:	2500      	movs	r5, #0
 8007e1a:	462e      	mov	r6, r5
 8007e1c:	9507      	str	r5, [sp, #28]
 8007e1e:	9505      	str	r5, [sp, #20]
 8007e20:	2322      	movs	r3, #34	; 0x22
 8007e22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007f3c <_strtod_l+0x5ac>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	f04f 0a00 	mov.w	sl, #0
 8007e2c:	9b07      	ldr	r3, [sp, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f43f adf2 	beq.w	8007a18 <_strtod_l+0x88>
 8007e34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e36:	4620      	mov	r0, r4
 8007e38:	f002 f96e 	bl	800a118 <_Bfree>
 8007e3c:	9905      	ldr	r1, [sp, #20]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f002 f96a 	bl	800a118 <_Bfree>
 8007e44:	4631      	mov	r1, r6
 8007e46:	4620      	mov	r0, r4
 8007e48:	f002 f966 	bl	800a118 <_Bfree>
 8007e4c:	9907      	ldr	r1, [sp, #28]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f002 f962 	bl	800a118 <_Bfree>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f002 f95e 	bl	800a118 <_Bfree>
 8007e5c:	e5dc      	b.n	8007a18 <_strtod_l+0x88>
 8007e5e:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <_strtod_l+0x5a8>)
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	2300      	movs	r3, #0
 8007e64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007e68:	4650      	mov	r0, sl
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	4699      	mov	r9, r3
 8007e6e:	f1b8 0f01 	cmp.w	r8, #1
 8007e72:	dc21      	bgt.n	8007eb8 <_strtod_l+0x528>
 8007e74:	b10b      	cbz	r3, 8007e7a <_strtod_l+0x4ea>
 8007e76:	4682      	mov	sl, r0
 8007e78:	468b      	mov	fp, r1
 8007e7a:	4b2f      	ldr	r3, [pc, #188]	; (8007f38 <_strtod_l+0x5a8>)
 8007e7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007e80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007e84:	4652      	mov	r2, sl
 8007e86:	465b      	mov	r3, fp
 8007e88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e8c:	f7f8 fbdc 	bl	8000648 <__aeabi_dmul>
 8007e90:	4b2a      	ldr	r3, [pc, #168]	; (8007f3c <_strtod_l+0x5ac>)
 8007e92:	460a      	mov	r2, r1
 8007e94:	400b      	ands	r3, r1
 8007e96:	492a      	ldr	r1, [pc, #168]	; (8007f40 <_strtod_l+0x5b0>)
 8007e98:	428b      	cmp	r3, r1
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	d8bc      	bhi.n	8007e18 <_strtod_l+0x488>
 8007e9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ea2:	428b      	cmp	r3, r1
 8007ea4:	bf86      	itte	hi
 8007ea6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007f44 <_strtod_l+0x5b4>
 8007eaa:	f04f 3aff 	movhi.w	sl, #4294967295
 8007eae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	e084      	b.n	8007fc2 <_strtod_l+0x632>
 8007eb8:	f018 0f01 	tst.w	r8, #1
 8007ebc:	d005      	beq.n	8007eca <_strtod_l+0x53a>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f7f8 fbc0 	bl	8000648 <__aeabi_dmul>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	3208      	adds	r2, #8
 8007ece:	f109 0901 	add.w	r9, r9, #1
 8007ed2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ed6:	9204      	str	r2, [sp, #16]
 8007ed8:	e7c9      	b.n	8007e6e <_strtod_l+0x4de>
 8007eda:	d0ea      	beq.n	8007eb2 <_strtod_l+0x522>
 8007edc:	f1c8 0800 	rsb	r8, r8, #0
 8007ee0:	f018 020f 	ands.w	r2, r8, #15
 8007ee4:	d00a      	beq.n	8007efc <_strtod_l+0x56c>
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <_strtod_l+0x5a4>)
 8007ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eec:	4650      	mov	r0, sl
 8007eee:	4659      	mov	r1, fp
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 fcd2 	bl	800089c <__aeabi_ddiv>
 8007ef8:	4682      	mov	sl, r0
 8007efa:	468b      	mov	fp, r1
 8007efc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f00:	d0d7      	beq.n	8007eb2 <_strtod_l+0x522>
 8007f02:	f1b8 0f1f 	cmp.w	r8, #31
 8007f06:	dd1f      	ble.n	8007f48 <_strtod_l+0x5b8>
 8007f08:	2500      	movs	r5, #0
 8007f0a:	462e      	mov	r6, r5
 8007f0c:	9507      	str	r5, [sp, #28]
 8007f0e:	9505      	str	r5, [sp, #20]
 8007f10:	2322      	movs	r3, #34	; 0x22
 8007f12:	f04f 0a00 	mov.w	sl, #0
 8007f16:	f04f 0b00 	mov.w	fp, #0
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	e786      	b.n	8007e2c <_strtod_l+0x49c>
 8007f1e:	bf00      	nop
 8007f20:	0800b8b5 	.word	0x0800b8b5
 8007f24:	0800b8f8 	.word	0x0800b8f8
 8007f28:	0800b8ad 	.word	0x0800b8ad
 8007f2c:	0800ba3c 	.word	0x0800ba3c
 8007f30:	0800bd50 	.word	0x0800bd50
 8007f34:	0800bc30 	.word	0x0800bc30
 8007f38:	0800bc08 	.word	0x0800bc08
 8007f3c:	7ff00000 	.word	0x7ff00000
 8007f40:	7ca00000 	.word	0x7ca00000
 8007f44:	7fefffff 	.word	0x7fefffff
 8007f48:	f018 0310 	ands.w	r3, r8, #16
 8007f4c:	bf18      	it	ne
 8007f4e:	236a      	movne	r3, #106	; 0x6a
 8007f50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008300 <_strtod_l+0x970>
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	4650      	mov	r0, sl
 8007f58:	4659      	mov	r1, fp
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f018 0f01 	tst.w	r8, #1
 8007f60:	d004      	beq.n	8007f6c <_strtod_l+0x5dc>
 8007f62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007f66:	f7f8 fb6f 	bl	8000648 <__aeabi_dmul>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007f70:	f109 0908 	add.w	r9, r9, #8
 8007f74:	d1f2      	bne.n	8007f5c <_strtod_l+0x5cc>
 8007f76:	b10b      	cbz	r3, 8007f7c <_strtod_l+0x5ec>
 8007f78:	4682      	mov	sl, r0
 8007f7a:	468b      	mov	fp, r1
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	b1c3      	cbz	r3, 8007fb2 <_strtod_l+0x622>
 8007f80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007f84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	4659      	mov	r1, fp
 8007f8c:	dd11      	ble.n	8007fb2 <_strtod_l+0x622>
 8007f8e:	2b1f      	cmp	r3, #31
 8007f90:	f340 8124 	ble.w	80081dc <_strtod_l+0x84c>
 8007f94:	2b34      	cmp	r3, #52	; 0x34
 8007f96:	bfde      	ittt	le
 8007f98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f9c:	f04f 33ff 	movle.w	r3, #4294967295
 8007fa0:	fa03 f202 	lslle.w	r2, r3, r2
 8007fa4:	f04f 0a00 	mov.w	sl, #0
 8007fa8:	bfcc      	ite	gt
 8007faa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007fae:	ea02 0b01 	andle.w	fp, r2, r1
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	4659      	mov	r1, fp
 8007fba:	f7f8 fdad 	bl	8000b18 <__aeabi_dcmpeq>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d1a2      	bne.n	8007f08 <_strtod_l+0x578>
 8007fc2:	9b07      	ldr	r3, [sp, #28]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	9908      	ldr	r1, [sp, #32]
 8007fc8:	462b      	mov	r3, r5
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f002 f90b 	bl	800a1e8 <__s2b>
 8007fd2:	9007      	str	r0, [sp, #28]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f af1f 	beq.w	8007e18 <_strtod_l+0x488>
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	1b9e      	subs	r6, r3, r6
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bfb4      	ite	lt
 8007fe4:	4633      	movlt	r3, r6
 8007fe6:	2300      	movge	r3, #0
 8007fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2500      	movs	r5, #0
 8007fee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ff4:	462e      	mov	r6, r5
 8007ff6:	9b07      	ldr	r3, [sp, #28]
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	6859      	ldr	r1, [r3, #4]
 8007ffc:	f002 f84c 	bl	800a098 <_Balloc>
 8008000:	9005      	str	r0, [sp, #20]
 8008002:	2800      	cmp	r0, #0
 8008004:	f43f af0c 	beq.w	8007e20 <_strtod_l+0x490>
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	3202      	adds	r2, #2
 800800e:	f103 010c 	add.w	r1, r3, #12
 8008012:	0092      	lsls	r2, r2, #2
 8008014:	300c      	adds	r0, #12
 8008016:	f002 f831 	bl	800a07c <memcpy>
 800801a:	ec4b ab10 	vmov	d0, sl, fp
 800801e:	aa1a      	add	r2, sp, #104	; 0x68
 8008020:	a919      	add	r1, sp, #100	; 0x64
 8008022:	4620      	mov	r0, r4
 8008024:	f002 fc26 	bl	800a874 <__d2b>
 8008028:	ec4b ab18 	vmov	d8, sl, fp
 800802c:	9018      	str	r0, [sp, #96]	; 0x60
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f aef6 	beq.w	8007e20 <_strtod_l+0x490>
 8008034:	2101      	movs	r1, #1
 8008036:	4620      	mov	r0, r4
 8008038:	f002 f970 	bl	800a31c <__i2b>
 800803c:	4606      	mov	r6, r0
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f aeee 	beq.w	8007e20 <_strtod_l+0x490>
 8008044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008046:	9904      	ldr	r1, [sp, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfab      	itete	ge
 800804c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800804e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008050:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008052:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008056:	bfac      	ite	ge
 8008058:	eb03 0902 	addge.w	r9, r3, r2
 800805c:	1ad7      	sublt	r7, r2, r3
 800805e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008060:	eba3 0801 	sub.w	r8, r3, r1
 8008064:	4490      	add	r8, r2
 8008066:	4ba1      	ldr	r3, [pc, #644]	; (80082ec <_strtod_l+0x95c>)
 8008068:	f108 38ff 	add.w	r8, r8, #4294967295
 800806c:	4598      	cmp	r8, r3
 800806e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008072:	f280 80c7 	bge.w	8008204 <_strtod_l+0x874>
 8008076:	eba3 0308 	sub.w	r3, r3, r8
 800807a:	2b1f      	cmp	r3, #31
 800807c:	eba2 0203 	sub.w	r2, r2, r3
 8008080:	f04f 0101 	mov.w	r1, #1
 8008084:	f300 80b1 	bgt.w	80081ea <_strtod_l+0x85a>
 8008088:	fa01 f303 	lsl.w	r3, r1, r3
 800808c:	930d      	str	r3, [sp, #52]	; 0x34
 800808e:	2300      	movs	r3, #0
 8008090:	9308      	str	r3, [sp, #32]
 8008092:	eb09 0802 	add.w	r8, r9, r2
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	45c1      	cmp	r9, r8
 800809a:	4417      	add	r7, r2
 800809c:	441f      	add	r7, r3
 800809e:	464b      	mov	r3, r9
 80080a0:	bfa8      	it	ge
 80080a2:	4643      	movge	r3, r8
 80080a4:	42bb      	cmp	r3, r7
 80080a6:	bfa8      	it	ge
 80080a8:	463b      	movge	r3, r7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bfc2      	ittt	gt
 80080ae:	eba8 0803 	subgt.w	r8, r8, r3
 80080b2:	1aff      	subgt	r7, r7, r3
 80080b4:	eba9 0903 	subgt.w	r9, r9, r3
 80080b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dd17      	ble.n	80080ee <_strtod_l+0x75e>
 80080be:	4631      	mov	r1, r6
 80080c0:	461a      	mov	r2, r3
 80080c2:	4620      	mov	r0, r4
 80080c4:	f002 f9ea 	bl	800a49c <__pow5mult>
 80080c8:	4606      	mov	r6, r0
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f aea8 	beq.w	8007e20 <_strtod_l+0x490>
 80080d0:	4601      	mov	r1, r0
 80080d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080d4:	4620      	mov	r0, r4
 80080d6:	f002 f937 	bl	800a348 <__multiply>
 80080da:	900b      	str	r0, [sp, #44]	; 0x2c
 80080dc:	2800      	cmp	r0, #0
 80080de:	f43f ae9f 	beq.w	8007e20 <_strtod_l+0x490>
 80080e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080e4:	4620      	mov	r0, r4
 80080e6:	f002 f817 	bl	800a118 <_Bfree>
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	9318      	str	r3, [sp, #96]	; 0x60
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	f300 808c 	bgt.w	800820e <_strtod_l+0x87e>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dd08      	ble.n	800810e <_strtod_l+0x77e>
 80080fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080fe:	9905      	ldr	r1, [sp, #20]
 8008100:	4620      	mov	r0, r4
 8008102:	f002 f9cb 	bl	800a49c <__pow5mult>
 8008106:	9005      	str	r0, [sp, #20]
 8008108:	2800      	cmp	r0, #0
 800810a:	f43f ae89 	beq.w	8007e20 <_strtod_l+0x490>
 800810e:	2f00      	cmp	r7, #0
 8008110:	dd08      	ble.n	8008124 <_strtod_l+0x794>
 8008112:	9905      	ldr	r1, [sp, #20]
 8008114:	463a      	mov	r2, r7
 8008116:	4620      	mov	r0, r4
 8008118:	f002 fa1a 	bl	800a550 <__lshift>
 800811c:	9005      	str	r0, [sp, #20]
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f ae7e 	beq.w	8007e20 <_strtod_l+0x490>
 8008124:	f1b9 0f00 	cmp.w	r9, #0
 8008128:	dd08      	ble.n	800813c <_strtod_l+0x7ac>
 800812a:	4631      	mov	r1, r6
 800812c:	464a      	mov	r2, r9
 800812e:	4620      	mov	r0, r4
 8008130:	f002 fa0e 	bl	800a550 <__lshift>
 8008134:	4606      	mov	r6, r0
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f ae72 	beq.w	8007e20 <_strtod_l+0x490>
 800813c:	9a05      	ldr	r2, [sp, #20]
 800813e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008140:	4620      	mov	r0, r4
 8008142:	f002 fa91 	bl	800a668 <__mdiff>
 8008146:	4605      	mov	r5, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	f43f ae69 	beq.w	8007e20 <_strtod_l+0x490>
 800814e:	68c3      	ldr	r3, [r0, #12]
 8008150:	930b      	str	r3, [sp, #44]	; 0x2c
 8008152:	2300      	movs	r3, #0
 8008154:	60c3      	str	r3, [r0, #12]
 8008156:	4631      	mov	r1, r6
 8008158:	f002 fa6a 	bl	800a630 <__mcmp>
 800815c:	2800      	cmp	r0, #0
 800815e:	da60      	bge.n	8008222 <_strtod_l+0x892>
 8008160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008162:	ea53 030a 	orrs.w	r3, r3, sl
 8008166:	f040 8082 	bne.w	800826e <_strtod_l+0x8de>
 800816a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800816e:	2b00      	cmp	r3, #0
 8008170:	d17d      	bne.n	800826e <_strtod_l+0x8de>
 8008172:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008176:	0d1b      	lsrs	r3, r3, #20
 8008178:	051b      	lsls	r3, r3, #20
 800817a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800817e:	d976      	bls.n	800826e <_strtod_l+0x8de>
 8008180:	696b      	ldr	r3, [r5, #20]
 8008182:	b913      	cbnz	r3, 800818a <_strtod_l+0x7fa>
 8008184:	692b      	ldr	r3, [r5, #16]
 8008186:	2b01      	cmp	r3, #1
 8008188:	dd71      	ble.n	800826e <_strtod_l+0x8de>
 800818a:	4629      	mov	r1, r5
 800818c:	2201      	movs	r2, #1
 800818e:	4620      	mov	r0, r4
 8008190:	f002 f9de 	bl	800a550 <__lshift>
 8008194:	4631      	mov	r1, r6
 8008196:	4605      	mov	r5, r0
 8008198:	f002 fa4a 	bl	800a630 <__mcmp>
 800819c:	2800      	cmp	r0, #0
 800819e:	dd66      	ble.n	800826e <_strtod_l+0x8de>
 80081a0:	9904      	ldr	r1, [sp, #16]
 80081a2:	4a53      	ldr	r2, [pc, #332]	; (80082f0 <_strtod_l+0x960>)
 80081a4:	465b      	mov	r3, fp
 80081a6:	2900      	cmp	r1, #0
 80081a8:	f000 8081 	beq.w	80082ae <_strtod_l+0x91e>
 80081ac:	ea02 010b 	and.w	r1, r2, fp
 80081b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081b4:	dc7b      	bgt.n	80082ae <_strtod_l+0x91e>
 80081b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081ba:	f77f aea9 	ble.w	8007f10 <_strtod_l+0x580>
 80081be:	4b4d      	ldr	r3, [pc, #308]	; (80082f4 <_strtod_l+0x964>)
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	2200      	movs	r2, #0
 80081c6:	f7f8 fa3f 	bl	8000648 <__aeabi_dmul>
 80081ca:	460b      	mov	r3, r1
 80081cc:	4303      	orrs	r3, r0
 80081ce:	bf08      	it	eq
 80081d0:	2322      	moveq	r3, #34	; 0x22
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	bf08      	it	eq
 80081d8:	6023      	streq	r3, [r4, #0]
 80081da:	e62b      	b.n	8007e34 <_strtod_l+0x4a4>
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	ea03 0a0a 	and.w	sl, r3, sl
 80081e8:	e6e3      	b.n	8007fb2 <_strtod_l+0x622>
 80081ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80081ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80081f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80081f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80081fa:	fa01 f308 	lsl.w	r3, r1, r8
 80081fe:	9308      	str	r3, [sp, #32]
 8008200:	910d      	str	r1, [sp, #52]	; 0x34
 8008202:	e746      	b.n	8008092 <_strtod_l+0x702>
 8008204:	2300      	movs	r3, #0
 8008206:	9308      	str	r3, [sp, #32]
 8008208:	2301      	movs	r3, #1
 800820a:	930d      	str	r3, [sp, #52]	; 0x34
 800820c:	e741      	b.n	8008092 <_strtod_l+0x702>
 800820e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008210:	4642      	mov	r2, r8
 8008212:	4620      	mov	r0, r4
 8008214:	f002 f99c 	bl	800a550 <__lshift>
 8008218:	9018      	str	r0, [sp, #96]	; 0x60
 800821a:	2800      	cmp	r0, #0
 800821c:	f47f af6b 	bne.w	80080f6 <_strtod_l+0x766>
 8008220:	e5fe      	b.n	8007e20 <_strtod_l+0x490>
 8008222:	465f      	mov	r7, fp
 8008224:	d16e      	bne.n	8008304 <_strtod_l+0x974>
 8008226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800822c:	b342      	cbz	r2, 8008280 <_strtod_l+0x8f0>
 800822e:	4a32      	ldr	r2, [pc, #200]	; (80082f8 <_strtod_l+0x968>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d128      	bne.n	8008286 <_strtod_l+0x8f6>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	4651      	mov	r1, sl
 8008238:	b1eb      	cbz	r3, 8008276 <_strtod_l+0x8e6>
 800823a:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <_strtod_l+0x960>)
 800823c:	403b      	ands	r3, r7
 800823e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	d819      	bhi.n	800827c <_strtod_l+0x8ec>
 8008248:	0d1b      	lsrs	r3, r3, #20
 800824a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	4299      	cmp	r1, r3
 8008254:	d117      	bne.n	8008286 <_strtod_l+0x8f6>
 8008256:	4b29      	ldr	r3, [pc, #164]	; (80082fc <_strtod_l+0x96c>)
 8008258:	429f      	cmp	r7, r3
 800825a:	d102      	bne.n	8008262 <_strtod_l+0x8d2>
 800825c:	3101      	adds	r1, #1
 800825e:	f43f addf 	beq.w	8007e20 <_strtod_l+0x490>
 8008262:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <_strtod_l+0x960>)
 8008264:	403b      	ands	r3, r7
 8008266:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800826a:	f04f 0a00 	mov.w	sl, #0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1a4      	bne.n	80081be <_strtod_l+0x82e>
 8008274:	e5de      	b.n	8007e34 <_strtod_l+0x4a4>
 8008276:	f04f 33ff 	mov.w	r3, #4294967295
 800827a:	e7ea      	b.n	8008252 <_strtod_l+0x8c2>
 800827c:	4613      	mov	r3, r2
 800827e:	e7e8      	b.n	8008252 <_strtod_l+0x8c2>
 8008280:	ea53 030a 	orrs.w	r3, r3, sl
 8008284:	d08c      	beq.n	80081a0 <_strtod_l+0x810>
 8008286:	9b08      	ldr	r3, [sp, #32]
 8008288:	b1db      	cbz	r3, 80082c2 <_strtod_l+0x932>
 800828a:	423b      	tst	r3, r7
 800828c:	d0ef      	beq.n	800826e <_strtod_l+0x8de>
 800828e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	4650      	mov	r0, sl
 8008294:	4659      	mov	r1, fp
 8008296:	b1c3      	cbz	r3, 80082ca <_strtod_l+0x93a>
 8008298:	f7ff fb5e 	bl	8007958 <sulp>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	ec51 0b18 	vmov	r0, r1, d8
 80082a4:	f7f8 f81a 	bl	80002dc <__adddf3>
 80082a8:	4682      	mov	sl, r0
 80082aa:	468b      	mov	fp, r1
 80082ac:	e7df      	b.n	800826e <_strtod_l+0x8de>
 80082ae:	4013      	ands	r3, r2
 80082b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80082b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80082bc:	f04f 3aff 	mov.w	sl, #4294967295
 80082c0:	e7d5      	b.n	800826e <_strtod_l+0x8de>
 80082c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c4:	ea13 0f0a 	tst.w	r3, sl
 80082c8:	e7e0      	b.n	800828c <_strtod_l+0x8fc>
 80082ca:	f7ff fb45 	bl	8007958 <sulp>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	ec51 0b18 	vmov	r0, r1, d8
 80082d6:	f7f7 ffff 	bl	80002d8 <__aeabi_dsub>
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4682      	mov	sl, r0
 80082e0:	468b      	mov	fp, r1
 80082e2:	f7f8 fc19 	bl	8000b18 <__aeabi_dcmpeq>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0c1      	beq.n	800826e <_strtod_l+0x8de>
 80082ea:	e611      	b.n	8007f10 <_strtod_l+0x580>
 80082ec:	fffffc02 	.word	0xfffffc02
 80082f0:	7ff00000 	.word	0x7ff00000
 80082f4:	39500000 	.word	0x39500000
 80082f8:	000fffff 	.word	0x000fffff
 80082fc:	7fefffff 	.word	0x7fefffff
 8008300:	0800b910 	.word	0x0800b910
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	f002 fb10 	bl	800a92c <__ratio>
 800830c:	ec59 8b10 	vmov	r8, r9, d0
 8008310:	ee10 0a10 	vmov	r0, s0
 8008314:	2200      	movs	r2, #0
 8008316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800831a:	4649      	mov	r1, r9
 800831c:	f7f8 fc10 	bl	8000b40 <__aeabi_dcmple>
 8008320:	2800      	cmp	r0, #0
 8008322:	d07a      	beq.n	800841a <_strtod_l+0xa8a>
 8008324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d04a      	beq.n	80083c0 <_strtod_l+0xa30>
 800832a:	4b95      	ldr	r3, [pc, #596]	; (8008580 <_strtod_l+0xbf0>)
 800832c:	2200      	movs	r2, #0
 800832e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008332:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008580 <_strtod_l+0xbf0>
 8008336:	f04f 0800 	mov.w	r8, #0
 800833a:	4b92      	ldr	r3, [pc, #584]	; (8008584 <_strtod_l+0xbf4>)
 800833c:	403b      	ands	r3, r7
 800833e:	930d      	str	r3, [sp, #52]	; 0x34
 8008340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008342:	4b91      	ldr	r3, [pc, #580]	; (8008588 <_strtod_l+0xbf8>)
 8008344:	429a      	cmp	r2, r3
 8008346:	f040 80b0 	bne.w	80084aa <_strtod_l+0xb1a>
 800834a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800834e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008352:	ec4b ab10 	vmov	d0, sl, fp
 8008356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800835a:	f002 fa0f 	bl	800a77c <__ulp>
 800835e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008362:	ec53 2b10 	vmov	r2, r3, d0
 8008366:	f7f8 f96f 	bl	8000648 <__aeabi_dmul>
 800836a:	4652      	mov	r2, sl
 800836c:	465b      	mov	r3, fp
 800836e:	f7f7 ffb5 	bl	80002dc <__adddf3>
 8008372:	460b      	mov	r3, r1
 8008374:	4983      	ldr	r1, [pc, #524]	; (8008584 <_strtod_l+0xbf4>)
 8008376:	4a85      	ldr	r2, [pc, #532]	; (800858c <_strtod_l+0xbfc>)
 8008378:	4019      	ands	r1, r3
 800837a:	4291      	cmp	r1, r2
 800837c:	4682      	mov	sl, r0
 800837e:	d960      	bls.n	8008442 <_strtod_l+0xab2>
 8008380:	ee18 3a90 	vmov	r3, s17
 8008384:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008388:	4293      	cmp	r3, r2
 800838a:	d104      	bne.n	8008396 <_strtod_l+0xa06>
 800838c:	ee18 3a10 	vmov	r3, s16
 8008390:	3301      	adds	r3, #1
 8008392:	f43f ad45 	beq.w	8007e20 <_strtod_l+0x490>
 8008396:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008598 <_strtod_l+0xc08>
 800839a:	f04f 3aff 	mov.w	sl, #4294967295
 800839e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083a0:	4620      	mov	r0, r4
 80083a2:	f001 feb9 	bl	800a118 <_Bfree>
 80083a6:	9905      	ldr	r1, [sp, #20]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f001 feb5 	bl	800a118 <_Bfree>
 80083ae:	4631      	mov	r1, r6
 80083b0:	4620      	mov	r0, r4
 80083b2:	f001 feb1 	bl	800a118 <_Bfree>
 80083b6:	4629      	mov	r1, r5
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 fead 	bl	800a118 <_Bfree>
 80083be:	e61a      	b.n	8007ff6 <_strtod_l+0x666>
 80083c0:	f1ba 0f00 	cmp.w	sl, #0
 80083c4:	d11b      	bne.n	80083fe <_strtod_l+0xa6e>
 80083c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ca:	b9f3      	cbnz	r3, 800840a <_strtod_l+0xa7a>
 80083cc:	4b6c      	ldr	r3, [pc, #432]	; (8008580 <_strtod_l+0xbf0>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f7f8 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 80083d8:	b9d0      	cbnz	r0, 8008410 <_strtod_l+0xa80>
 80083da:	4640      	mov	r0, r8
 80083dc:	4649      	mov	r1, r9
 80083de:	4b6c      	ldr	r3, [pc, #432]	; (8008590 <_strtod_l+0xc00>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	f7f8 f931 	bl	8000648 <__aeabi_dmul>
 80083e6:	4680      	mov	r8, r0
 80083e8:	4689      	mov	r9, r1
 80083ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80083f2:	9315      	str	r3, [sp, #84]	; 0x54
 80083f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083fc:	e79d      	b.n	800833a <_strtod_l+0x9aa>
 80083fe:	f1ba 0f01 	cmp.w	sl, #1
 8008402:	d102      	bne.n	800840a <_strtod_l+0xa7a>
 8008404:	2f00      	cmp	r7, #0
 8008406:	f43f ad83 	beq.w	8007f10 <_strtod_l+0x580>
 800840a:	4b62      	ldr	r3, [pc, #392]	; (8008594 <_strtod_l+0xc04>)
 800840c:	2200      	movs	r2, #0
 800840e:	e78e      	b.n	800832e <_strtod_l+0x99e>
 8008410:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008590 <_strtod_l+0xc00>
 8008414:	f04f 0800 	mov.w	r8, #0
 8008418:	e7e7      	b.n	80083ea <_strtod_l+0xa5a>
 800841a:	4b5d      	ldr	r3, [pc, #372]	; (8008590 <_strtod_l+0xc00>)
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	2200      	movs	r2, #0
 8008422:	f7f8 f911 	bl	8000648 <__aeabi_dmul>
 8008426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008428:	4680      	mov	r8, r0
 800842a:	4689      	mov	r9, r1
 800842c:	b933      	cbnz	r3, 800843c <_strtod_l+0xaac>
 800842e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008432:	900e      	str	r0, [sp, #56]	; 0x38
 8008434:	930f      	str	r3, [sp, #60]	; 0x3c
 8008436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800843a:	e7dd      	b.n	80083f8 <_strtod_l+0xa68>
 800843c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008440:	e7f9      	b.n	8008436 <_strtod_l+0xaa6>
 8008442:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1a8      	bne.n	800839e <_strtod_l+0xa0e>
 800844c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008452:	0d1b      	lsrs	r3, r3, #20
 8008454:	051b      	lsls	r3, r3, #20
 8008456:	429a      	cmp	r2, r3
 8008458:	d1a1      	bne.n	800839e <_strtod_l+0xa0e>
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f8 fc53 	bl	8000d08 <__aeabi_d2lz>
 8008462:	f7f8 f8c3 	bl	80005ec <__aeabi_l2d>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	f7f7 ff33 	bl	80002d8 <__aeabi_dsub>
 8008472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008478:	ea43 030a 	orr.w	r3, r3, sl
 800847c:	4313      	orrs	r3, r2
 800847e:	4680      	mov	r8, r0
 8008480:	4689      	mov	r9, r1
 8008482:	d055      	beq.n	8008530 <_strtod_l+0xba0>
 8008484:	a336      	add	r3, pc, #216	; (adr r3, 8008560 <_strtod_l+0xbd0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f8 fb4f 	bl	8000b2c <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	f47f acd0 	bne.w	8007e34 <_strtod_l+0x4a4>
 8008494:	a334      	add	r3, pc, #208	; (adr r3, 8008568 <_strtod_l+0xbd8>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f8 fb63 	bl	8000b68 <__aeabi_dcmpgt>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f43f af7b 	beq.w	800839e <_strtod_l+0xa0e>
 80084a8:	e4c4      	b.n	8007e34 <_strtod_l+0x4a4>
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	b333      	cbz	r3, 80084fc <_strtod_l+0xb6c>
 80084ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084b4:	d822      	bhi.n	80084fc <_strtod_l+0xb6c>
 80084b6:	a32e      	add	r3, pc, #184	; (adr r3, 8008570 <_strtod_l+0xbe0>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f8 fb3e 	bl	8000b40 <__aeabi_dcmple>
 80084c4:	b1a0      	cbz	r0, 80084f0 <_strtod_l+0xb60>
 80084c6:	4649      	mov	r1, r9
 80084c8:	4640      	mov	r0, r8
 80084ca:	f7f8 fb95 	bl	8000bf8 <__aeabi_d2uiz>
 80084ce:	2801      	cmp	r0, #1
 80084d0:	bf38      	it	cc
 80084d2:	2001      	movcc	r0, #1
 80084d4:	f7f8 f83e 	bl	8000554 <__aeabi_ui2d>
 80084d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084da:	4680      	mov	r8, r0
 80084dc:	4689      	mov	r9, r1
 80084de:	bb23      	cbnz	r3, 800852a <_strtod_l+0xb9a>
 80084e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084e4:	9010      	str	r0, [sp, #64]	; 0x40
 80084e6:	9311      	str	r3, [sp, #68]	; 0x44
 80084e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	9309      	str	r3, [sp, #36]	; 0x24
 80084fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008500:	eeb0 0a48 	vmov.f32	s0, s16
 8008504:	eef0 0a68 	vmov.f32	s1, s17
 8008508:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800850c:	f002 f936 	bl	800a77c <__ulp>
 8008510:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008514:	ec53 2b10 	vmov	r2, r3, d0
 8008518:	f7f8 f896 	bl	8000648 <__aeabi_dmul>
 800851c:	ec53 2b18 	vmov	r2, r3, d8
 8008520:	f7f7 fedc 	bl	80002dc <__adddf3>
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	e78d      	b.n	8008446 <_strtod_l+0xab6>
 800852a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800852e:	e7db      	b.n	80084e8 <_strtod_l+0xb58>
 8008530:	a311      	add	r3, pc, #68	; (adr r3, 8008578 <_strtod_l+0xbe8>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f7f8 faf9 	bl	8000b2c <__aeabi_dcmplt>
 800853a:	e7b2      	b.n	80084a2 <_strtod_l+0xb12>
 800853c:	2300      	movs	r3, #0
 800853e:	930a      	str	r3, [sp, #40]	; 0x28
 8008540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	f7ff ba6b 	b.w	8007a20 <_strtod_l+0x90>
 800854a:	2a65      	cmp	r2, #101	; 0x65
 800854c:	f43f ab5f 	beq.w	8007c0e <_strtod_l+0x27e>
 8008550:	2a45      	cmp	r2, #69	; 0x45
 8008552:	f43f ab5c 	beq.w	8007c0e <_strtod_l+0x27e>
 8008556:	2301      	movs	r3, #1
 8008558:	f7ff bb94 	b.w	8007c84 <_strtod_l+0x2f4>
 800855c:	f3af 8000 	nop.w
 8008560:	94a03595 	.word	0x94a03595
 8008564:	3fdfffff 	.word	0x3fdfffff
 8008568:	35afe535 	.word	0x35afe535
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	ffc00000 	.word	0xffc00000
 8008574:	41dfffff 	.word	0x41dfffff
 8008578:	94a03595 	.word	0x94a03595
 800857c:	3fcfffff 	.word	0x3fcfffff
 8008580:	3ff00000 	.word	0x3ff00000
 8008584:	7ff00000 	.word	0x7ff00000
 8008588:	7fe00000 	.word	0x7fe00000
 800858c:	7c9fffff 	.word	0x7c9fffff
 8008590:	3fe00000 	.word	0x3fe00000
 8008594:	bff00000 	.word	0xbff00000
 8008598:	7fefffff 	.word	0x7fefffff

0800859c <_strtod_r>:
 800859c:	4b01      	ldr	r3, [pc, #4]	; (80085a4 <_strtod_r+0x8>)
 800859e:	f7ff b9f7 	b.w	8007990 <_strtod_l>
 80085a2:	bf00      	nop
 80085a4:	20000074 	.word	0x20000074

080085a8 <_strtol_l.constprop.0>:
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ae:	d001      	beq.n	80085b4 <_strtol_l.constprop.0+0xc>
 80085b0:	2b24      	cmp	r3, #36	; 0x24
 80085b2:	d906      	bls.n	80085c2 <_strtol_l.constprop.0+0x1a>
 80085b4:	f7fe fa70 	bl	8006a98 <__errno>
 80085b8:	2316      	movs	r3, #22
 80085ba:	6003      	str	r3, [r0, #0]
 80085bc:	2000      	movs	r0, #0
 80085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80086a8 <_strtol_l.constprop.0+0x100>
 80085c6:	460d      	mov	r5, r1
 80085c8:	462e      	mov	r6, r5
 80085ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80085d2:	f017 0708 	ands.w	r7, r7, #8
 80085d6:	d1f7      	bne.n	80085c8 <_strtol_l.constprop.0+0x20>
 80085d8:	2c2d      	cmp	r4, #45	; 0x2d
 80085da:	d132      	bne.n	8008642 <_strtol_l.constprop.0+0x9a>
 80085dc:	782c      	ldrb	r4, [r5, #0]
 80085de:	2701      	movs	r7, #1
 80085e0:	1cb5      	adds	r5, r6, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d05b      	beq.n	800869e <_strtol_l.constprop.0+0xf6>
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d109      	bne.n	80085fe <_strtol_l.constprop.0+0x56>
 80085ea:	2c30      	cmp	r4, #48	; 0x30
 80085ec:	d107      	bne.n	80085fe <_strtol_l.constprop.0+0x56>
 80085ee:	782c      	ldrb	r4, [r5, #0]
 80085f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085f4:	2c58      	cmp	r4, #88	; 0x58
 80085f6:	d14d      	bne.n	8008694 <_strtol_l.constprop.0+0xec>
 80085f8:	786c      	ldrb	r4, [r5, #1]
 80085fa:	2310      	movs	r3, #16
 80085fc:	3502      	adds	r5, #2
 80085fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008602:	f108 38ff 	add.w	r8, r8, #4294967295
 8008606:	f04f 0c00 	mov.w	ip, #0
 800860a:	fbb8 f9f3 	udiv	r9, r8, r3
 800860e:	4666      	mov	r6, ip
 8008610:	fb03 8a19 	mls	sl, r3, r9, r8
 8008614:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008618:	f1be 0f09 	cmp.w	lr, #9
 800861c:	d816      	bhi.n	800864c <_strtol_l.constprop.0+0xa4>
 800861e:	4674      	mov	r4, lr
 8008620:	42a3      	cmp	r3, r4
 8008622:	dd24      	ble.n	800866e <_strtol_l.constprop.0+0xc6>
 8008624:	f1bc 0f00 	cmp.w	ip, #0
 8008628:	db1e      	blt.n	8008668 <_strtol_l.constprop.0+0xc0>
 800862a:	45b1      	cmp	r9, r6
 800862c:	d31c      	bcc.n	8008668 <_strtol_l.constprop.0+0xc0>
 800862e:	d101      	bne.n	8008634 <_strtol_l.constprop.0+0x8c>
 8008630:	45a2      	cmp	sl, r4
 8008632:	db19      	blt.n	8008668 <_strtol_l.constprop.0+0xc0>
 8008634:	fb06 4603 	mla	r6, r6, r3, r4
 8008638:	f04f 0c01 	mov.w	ip, #1
 800863c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008640:	e7e8      	b.n	8008614 <_strtol_l.constprop.0+0x6c>
 8008642:	2c2b      	cmp	r4, #43	; 0x2b
 8008644:	bf04      	itt	eq
 8008646:	782c      	ldrbeq	r4, [r5, #0]
 8008648:	1cb5      	addeq	r5, r6, #2
 800864a:	e7ca      	b.n	80085e2 <_strtol_l.constprop.0+0x3a>
 800864c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008650:	f1be 0f19 	cmp.w	lr, #25
 8008654:	d801      	bhi.n	800865a <_strtol_l.constprop.0+0xb2>
 8008656:	3c37      	subs	r4, #55	; 0x37
 8008658:	e7e2      	b.n	8008620 <_strtol_l.constprop.0+0x78>
 800865a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800865e:	f1be 0f19 	cmp.w	lr, #25
 8008662:	d804      	bhi.n	800866e <_strtol_l.constprop.0+0xc6>
 8008664:	3c57      	subs	r4, #87	; 0x57
 8008666:	e7db      	b.n	8008620 <_strtol_l.constprop.0+0x78>
 8008668:	f04f 3cff 	mov.w	ip, #4294967295
 800866c:	e7e6      	b.n	800863c <_strtol_l.constprop.0+0x94>
 800866e:	f1bc 0f00 	cmp.w	ip, #0
 8008672:	da05      	bge.n	8008680 <_strtol_l.constprop.0+0xd8>
 8008674:	2322      	movs	r3, #34	; 0x22
 8008676:	6003      	str	r3, [r0, #0]
 8008678:	4646      	mov	r6, r8
 800867a:	b942      	cbnz	r2, 800868e <_strtol_l.constprop.0+0xe6>
 800867c:	4630      	mov	r0, r6
 800867e:	e79e      	b.n	80085be <_strtol_l.constprop.0+0x16>
 8008680:	b107      	cbz	r7, 8008684 <_strtol_l.constprop.0+0xdc>
 8008682:	4276      	negs	r6, r6
 8008684:	2a00      	cmp	r2, #0
 8008686:	d0f9      	beq.n	800867c <_strtol_l.constprop.0+0xd4>
 8008688:	f1bc 0f00 	cmp.w	ip, #0
 800868c:	d000      	beq.n	8008690 <_strtol_l.constprop.0+0xe8>
 800868e:	1e69      	subs	r1, r5, #1
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	e7f3      	b.n	800867c <_strtol_l.constprop.0+0xd4>
 8008694:	2430      	movs	r4, #48	; 0x30
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1b1      	bne.n	80085fe <_strtol_l.constprop.0+0x56>
 800869a:	2308      	movs	r3, #8
 800869c:	e7af      	b.n	80085fe <_strtol_l.constprop.0+0x56>
 800869e:	2c30      	cmp	r4, #48	; 0x30
 80086a0:	d0a5      	beq.n	80085ee <_strtol_l.constprop.0+0x46>
 80086a2:	230a      	movs	r3, #10
 80086a4:	e7ab      	b.n	80085fe <_strtol_l.constprop.0+0x56>
 80086a6:	bf00      	nop
 80086a8:	0800b939 	.word	0x0800b939

080086ac <_strtol_r>:
 80086ac:	f7ff bf7c 	b.w	80085a8 <_strtol_l.constprop.0>

080086b0 <__swbuf_r>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	460e      	mov	r6, r1
 80086b4:	4614      	mov	r4, r2
 80086b6:	4605      	mov	r5, r0
 80086b8:	b118      	cbz	r0, 80086c2 <__swbuf_r+0x12>
 80086ba:	6983      	ldr	r3, [r0, #24]
 80086bc:	b90b      	cbnz	r3, 80086c2 <__swbuf_r+0x12>
 80086be:	f001 f84b 	bl	8009758 <__sinit>
 80086c2:	4b21      	ldr	r3, [pc, #132]	; (8008748 <__swbuf_r+0x98>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	d12b      	bne.n	8008720 <__swbuf_r+0x70>
 80086c8:	686c      	ldr	r4, [r5, #4]
 80086ca:	69a3      	ldr	r3, [r4, #24]
 80086cc:	60a3      	str	r3, [r4, #8]
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	071a      	lsls	r2, r3, #28
 80086d2:	d52f      	bpl.n	8008734 <__swbuf_r+0x84>
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	b36b      	cbz	r3, 8008734 <__swbuf_r+0x84>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	1ac0      	subs	r0, r0, r3
 80086de:	6963      	ldr	r3, [r4, #20]
 80086e0:	b2f6      	uxtb	r6, r6
 80086e2:	4283      	cmp	r3, r0
 80086e4:	4637      	mov	r7, r6
 80086e6:	dc04      	bgt.n	80086f2 <__swbuf_r+0x42>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 ffa0 	bl	8009630 <_fflush_r>
 80086f0:	bb30      	cbnz	r0, 8008740 <__swbuf_r+0x90>
 80086f2:	68a3      	ldr	r3, [r4, #8]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	60a3      	str	r3, [r4, #8]
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	6022      	str	r2, [r4, #0]
 80086fe:	701e      	strb	r6, [r3, #0]
 8008700:	6963      	ldr	r3, [r4, #20]
 8008702:	3001      	adds	r0, #1
 8008704:	4283      	cmp	r3, r0
 8008706:	d004      	beq.n	8008712 <__swbuf_r+0x62>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	07db      	lsls	r3, r3, #31
 800870c:	d506      	bpl.n	800871c <__swbuf_r+0x6c>
 800870e:	2e0a      	cmp	r6, #10
 8008710:	d104      	bne.n	800871c <__swbuf_r+0x6c>
 8008712:	4621      	mov	r1, r4
 8008714:	4628      	mov	r0, r5
 8008716:	f000 ff8b 	bl	8009630 <_fflush_r>
 800871a:	b988      	cbnz	r0, 8008740 <__swbuf_r+0x90>
 800871c:	4638      	mov	r0, r7
 800871e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <__swbuf_r+0x9c>)
 8008722:	429c      	cmp	r4, r3
 8008724:	d101      	bne.n	800872a <__swbuf_r+0x7a>
 8008726:	68ac      	ldr	r4, [r5, #8]
 8008728:	e7cf      	b.n	80086ca <__swbuf_r+0x1a>
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <__swbuf_r+0xa0>)
 800872c:	429c      	cmp	r4, r3
 800872e:	bf08      	it	eq
 8008730:	68ec      	ldreq	r4, [r5, #12]
 8008732:	e7ca      	b.n	80086ca <__swbuf_r+0x1a>
 8008734:	4621      	mov	r1, r4
 8008736:	4628      	mov	r0, r5
 8008738:	f000 f80c 	bl	8008754 <__swsetup_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	d0cb      	beq.n	80086d8 <__swbuf_r+0x28>
 8008740:	f04f 37ff 	mov.w	r7, #4294967295
 8008744:	e7ea      	b.n	800871c <__swbuf_r+0x6c>
 8008746:	bf00      	nop
 8008748:	0800baec 	.word	0x0800baec
 800874c:	0800bb0c 	.word	0x0800bb0c
 8008750:	0800bacc 	.word	0x0800bacc

08008754 <__swsetup_r>:
 8008754:	4b32      	ldr	r3, [pc, #200]	; (8008820 <__swsetup_r+0xcc>)
 8008756:	b570      	push	{r4, r5, r6, lr}
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	4606      	mov	r6, r0
 800875c:	460c      	mov	r4, r1
 800875e:	b125      	cbz	r5, 800876a <__swsetup_r+0x16>
 8008760:	69ab      	ldr	r3, [r5, #24]
 8008762:	b913      	cbnz	r3, 800876a <__swsetup_r+0x16>
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fff7 	bl	8009758 <__sinit>
 800876a:	4b2e      	ldr	r3, [pc, #184]	; (8008824 <__swsetup_r+0xd0>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d10f      	bne.n	8008790 <__swsetup_r+0x3c>
 8008770:	686c      	ldr	r4, [r5, #4]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008778:	0719      	lsls	r1, r3, #28
 800877a:	d42c      	bmi.n	80087d6 <__swsetup_r+0x82>
 800877c:	06dd      	lsls	r5, r3, #27
 800877e:	d411      	bmi.n	80087a4 <__swsetup_r+0x50>
 8008780:	2309      	movs	r3, #9
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	e03e      	b.n	800880e <__swsetup_r+0xba>
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <__swsetup_r+0xd4>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <__swsetup_r+0x46>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7eb      	b.n	8008772 <__swsetup_r+0x1e>
 800879a:	4b24      	ldr	r3, [pc, #144]	; (800882c <__swsetup_r+0xd8>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7e6      	b.n	8008772 <__swsetup_r+0x1e>
 80087a4:	0758      	lsls	r0, r3, #29
 80087a6:	d512      	bpl.n	80087ce <__swsetup_r+0x7a>
 80087a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087aa:	b141      	cbz	r1, 80087be <__swsetup_r+0x6a>
 80087ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <__swsetup_r+0x66>
 80087b4:	4630      	mov	r0, r6
 80087b6:	f002 f947 	bl	800aa48 <_free_r>
 80087ba:	2300      	movs	r3, #0
 80087bc:	6363      	str	r3, [r4, #52]	; 0x34
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	2300      	movs	r3, #0
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f043 0308 	orr.w	r3, r3, #8
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	b94b      	cbnz	r3, 80087ee <__swsetup_r+0x9a>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e4:	d003      	beq.n	80087ee <__swsetup_r+0x9a>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4630      	mov	r0, r6
 80087ea:	f001 fbed 	bl	8009fc8 <__smakebuf_r>
 80087ee:	89a0      	ldrh	r0, [r4, #12]
 80087f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f4:	f010 0301 	ands.w	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <__swsetup_r+0xbc>
 80087fa:	2300      	movs	r3, #0
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	6963      	ldr	r3, [r4, #20]
 8008800:	425b      	negs	r3, r3
 8008802:	61a3      	str	r3, [r4, #24]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	b943      	cbnz	r3, 800881a <__swsetup_r+0xc6>
 8008808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800880c:	d1ba      	bne.n	8008784 <__swsetup_r+0x30>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	0781      	lsls	r1, r0, #30
 8008812:	bf58      	it	pl
 8008814:	6963      	ldrpl	r3, [r4, #20]
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	e7f4      	b.n	8008804 <__swsetup_r+0xb0>
 800881a:	2000      	movs	r0, #0
 800881c:	e7f7      	b.n	800880e <__swsetup_r+0xba>
 800881e:	bf00      	nop
 8008820:	2000000c 	.word	0x2000000c
 8008824:	0800baec 	.word	0x0800baec
 8008828:	0800bb0c 	.word	0x0800bb0c
 800882c:	0800bacc 	.word	0x0800bacc

08008830 <quorem>:
 8008830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	6903      	ldr	r3, [r0, #16]
 8008836:	690c      	ldr	r4, [r1, #16]
 8008838:	42a3      	cmp	r3, r4
 800883a:	4607      	mov	r7, r0
 800883c:	f2c0 8081 	blt.w	8008942 <quorem+0x112>
 8008840:	3c01      	subs	r4, #1
 8008842:	f101 0814 	add.w	r8, r1, #20
 8008846:	f100 0514 	add.w	r5, r0, #20
 800884a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008858:	3301      	adds	r3, #1
 800885a:	429a      	cmp	r2, r3
 800885c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008860:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008864:	fbb2 f6f3 	udiv	r6, r2, r3
 8008868:	d331      	bcc.n	80088ce <quorem+0x9e>
 800886a:	f04f 0e00 	mov.w	lr, #0
 800886e:	4640      	mov	r0, r8
 8008870:	46ac      	mov	ip, r5
 8008872:	46f2      	mov	sl, lr
 8008874:	f850 2b04 	ldr.w	r2, [r0], #4
 8008878:	b293      	uxth	r3, r2
 800887a:	fb06 e303 	mla	r3, r6, r3, lr
 800887e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008882:	b29b      	uxth	r3, r3
 8008884:	ebaa 0303 	sub.w	r3, sl, r3
 8008888:	f8dc a000 	ldr.w	sl, [ip]
 800888c:	0c12      	lsrs	r2, r2, #16
 800888e:	fa13 f38a 	uxtah	r3, r3, sl
 8008892:	fb06 e202 	mla	r2, r6, r2, lr
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800889e:	b292      	uxth	r2, r2
 80088a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80088ac:	4581      	cmp	r9, r0
 80088ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b2:	f84c 3b04 	str.w	r3, [ip], #4
 80088b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088ba:	d2db      	bcs.n	8008874 <quorem+0x44>
 80088bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80088c0:	b92b      	cbnz	r3, 80088ce <quorem+0x9e>
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	3b04      	subs	r3, #4
 80088c6:	429d      	cmp	r5, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	d32e      	bcc.n	800892a <quorem+0xfa>
 80088cc:	613c      	str	r4, [r7, #16]
 80088ce:	4638      	mov	r0, r7
 80088d0:	f001 feae 	bl	800a630 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	db24      	blt.n	8008922 <quorem+0xf2>
 80088d8:	3601      	adds	r6, #1
 80088da:	4628      	mov	r0, r5
 80088dc:	f04f 0c00 	mov.w	ip, #0
 80088e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80088e4:	f8d0 e000 	ldr.w	lr, [r0]
 80088e8:	b293      	uxth	r3, r2
 80088ea:	ebac 0303 	sub.w	r3, ip, r3
 80088ee:	0c12      	lsrs	r2, r2, #16
 80088f0:	fa13 f38e 	uxtah	r3, r3, lr
 80088f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008902:	45c1      	cmp	r9, r8
 8008904:	f840 3b04 	str.w	r3, [r0], #4
 8008908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800890c:	d2e8      	bcs.n	80088e0 <quorem+0xb0>
 800890e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008916:	b922      	cbnz	r2, 8008922 <quorem+0xf2>
 8008918:	3b04      	subs	r3, #4
 800891a:	429d      	cmp	r5, r3
 800891c:	461a      	mov	r2, r3
 800891e:	d30a      	bcc.n	8008936 <quorem+0x106>
 8008920:	613c      	str	r4, [r7, #16]
 8008922:	4630      	mov	r0, r6
 8008924:	b003      	add	sp, #12
 8008926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	3b04      	subs	r3, #4
 800892e:	2a00      	cmp	r2, #0
 8008930:	d1cc      	bne.n	80088cc <quorem+0x9c>
 8008932:	3c01      	subs	r4, #1
 8008934:	e7c7      	b.n	80088c6 <quorem+0x96>
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	3b04      	subs	r3, #4
 800893a:	2a00      	cmp	r2, #0
 800893c:	d1f0      	bne.n	8008920 <quorem+0xf0>
 800893e:	3c01      	subs	r4, #1
 8008940:	e7eb      	b.n	800891a <quorem+0xea>
 8008942:	2000      	movs	r0, #0
 8008944:	e7ee      	b.n	8008924 <quorem+0xf4>
	...

08008948 <_dtoa_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ed2d 8b04 	vpush	{d8-d9}
 8008950:	ec57 6b10 	vmov	r6, r7, d0
 8008954:	b093      	sub	sp, #76	; 0x4c
 8008956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800895c:	9106      	str	r1, [sp, #24]
 800895e:	ee10 aa10 	vmov	sl, s0
 8008962:	4604      	mov	r4, r0
 8008964:	9209      	str	r2, [sp, #36]	; 0x24
 8008966:	930c      	str	r3, [sp, #48]	; 0x30
 8008968:	46bb      	mov	fp, r7
 800896a:	b975      	cbnz	r5, 800898a <_dtoa_r+0x42>
 800896c:	2010      	movs	r0, #16
 800896e:	f001 fb6b 	bl	800a048 <malloc>
 8008972:	4602      	mov	r2, r0
 8008974:	6260      	str	r0, [r4, #36]	; 0x24
 8008976:	b920      	cbnz	r0, 8008982 <_dtoa_r+0x3a>
 8008978:	4ba7      	ldr	r3, [pc, #668]	; (8008c18 <_dtoa_r+0x2d0>)
 800897a:	21ea      	movs	r1, #234	; 0xea
 800897c:	48a7      	ldr	r0, [pc, #668]	; (8008c1c <_dtoa_r+0x2d4>)
 800897e:	f002 fc89 	bl	800b294 <__assert_func>
 8008982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008986:	6005      	str	r5, [r0, #0]
 8008988:	60c5      	str	r5, [r0, #12]
 800898a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898c:	6819      	ldr	r1, [r3, #0]
 800898e:	b151      	cbz	r1, 80089a6 <_dtoa_r+0x5e>
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	604a      	str	r2, [r1, #4]
 8008994:	2301      	movs	r3, #1
 8008996:	4093      	lsls	r3, r2
 8008998:	608b      	str	r3, [r1, #8]
 800899a:	4620      	mov	r0, r4
 800899c:	f001 fbbc 	bl	800a118 <_Bfree>
 80089a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	1e3b      	subs	r3, r7, #0
 80089a8:	bfaa      	itet	ge
 80089aa:	2300      	movge	r3, #0
 80089ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089b0:	f8c8 3000 	strge.w	r3, [r8]
 80089b4:	4b9a      	ldr	r3, [pc, #616]	; (8008c20 <_dtoa_r+0x2d8>)
 80089b6:	bfbc      	itt	lt
 80089b8:	2201      	movlt	r2, #1
 80089ba:	f8c8 2000 	strlt.w	r2, [r8]
 80089be:	ea33 030b 	bics.w	r3, r3, fp
 80089c2:	d11b      	bne.n	80089fc <_dtoa_r+0xb4>
 80089c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d0:	4333      	orrs	r3, r6
 80089d2:	f000 8592 	beq.w	80094fa <_dtoa_r+0xbb2>
 80089d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d8:	b963      	cbnz	r3, 80089f4 <_dtoa_r+0xac>
 80089da:	4b92      	ldr	r3, [pc, #584]	; (8008c24 <_dtoa_r+0x2dc>)
 80089dc:	e022      	b.n	8008a24 <_dtoa_r+0xdc>
 80089de:	4b92      	ldr	r3, [pc, #584]	; (8008c28 <_dtoa_r+0x2e0>)
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	3308      	adds	r3, #8
 80089e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	9801      	ldr	r0, [sp, #4]
 80089ea:	b013      	add	sp, #76	; 0x4c
 80089ec:	ecbd 8b04 	vpop	{d8-d9}
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	4b8b      	ldr	r3, [pc, #556]	; (8008c24 <_dtoa_r+0x2dc>)
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	3303      	adds	r3, #3
 80089fa:	e7f3      	b.n	80089e4 <_dtoa_r+0x9c>
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	f7f8 f888 	bl	8000b18 <__aeabi_dcmpeq>
 8008a08:	ec4b ab19 	vmov	d9, sl, fp
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	b158      	cbz	r0, 8008a28 <_dtoa_r+0xe0>
 8008a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a12:	2301      	movs	r3, #1
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 856b 	beq.w	80094f4 <_dtoa_r+0xbac>
 8008a1e:	4883      	ldr	r0, [pc, #524]	; (8008c2c <_dtoa_r+0x2e4>)
 8008a20:	6018      	str	r0, [r3, #0]
 8008a22:	1e43      	subs	r3, r0, #1
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	e7df      	b.n	80089e8 <_dtoa_r+0xa0>
 8008a28:	ec4b ab10 	vmov	d0, sl, fp
 8008a2c:	aa10      	add	r2, sp, #64	; 0x40
 8008a2e:	a911      	add	r1, sp, #68	; 0x44
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 ff1f 	bl	800a874 <__d2b>
 8008a36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a3a:	ee08 0a10 	vmov	s16, r0
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	f000 8084 	beq.w	8008b4c <_dtoa_r+0x204>
 8008a44:	ee19 3a90 	vmov	r3, s19
 8008a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a50:	4656      	mov	r6, sl
 8008a52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a5e:	4b74      	ldr	r3, [pc, #464]	; (8008c30 <_dtoa_r+0x2e8>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fc37 	bl	80002d8 <__aeabi_dsub>
 8008a6a:	a365      	add	r3, pc, #404	; (adr r3, 8008c00 <_dtoa_r+0x2b8>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fdea 	bl	8000648 <__aeabi_dmul>
 8008a74:	a364      	add	r3, pc, #400	; (adr r3, 8008c08 <_dtoa_r+0x2c0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fc2f 	bl	80002dc <__adddf3>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	4628      	mov	r0, r5
 8008a82:	460f      	mov	r7, r1
 8008a84:	f7f7 fd76 	bl	8000574 <__aeabi_i2d>
 8008a88:	a361      	add	r3, pc, #388	; (adr r3, 8008c10 <_dtoa_r+0x2c8>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fddb 	bl	8000648 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fc1f 	bl	80002dc <__adddf3>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	f7f8 f881 	bl	8000ba8 <__aeabi_d2iz>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	9000      	str	r0, [sp, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f8 f83c 	bl	8000b2c <__aeabi_dcmplt>
 8008ab4:	b150      	cbz	r0, 8008acc <_dtoa_r+0x184>
 8008ab6:	9800      	ldr	r0, [sp, #0]
 8008ab8:	f7f7 fd5c 	bl	8000574 <__aeabi_i2d>
 8008abc:	4632      	mov	r2, r6
 8008abe:	463b      	mov	r3, r7
 8008ac0:	f7f8 f82a 	bl	8000b18 <__aeabi_dcmpeq>
 8008ac4:	b910      	cbnz	r0, 8008acc <_dtoa_r+0x184>
 8008ac6:	9b00      	ldr	r3, [sp, #0]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	9b00      	ldr	r3, [sp, #0]
 8008ace:	2b16      	cmp	r3, #22
 8008ad0:	d85a      	bhi.n	8008b88 <_dtoa_r+0x240>
 8008ad2:	9a00      	ldr	r2, [sp, #0]
 8008ad4:	4b57      	ldr	r3, [pc, #348]	; (8008c34 <_dtoa_r+0x2ec>)
 8008ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	ec51 0b19 	vmov	r0, r1, d9
 8008ae2:	f7f8 f823 	bl	8000b2c <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d050      	beq.n	8008b8c <_dtoa_r+0x244>
 8008aea:	9b00      	ldr	r3, [sp, #0]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2300      	movs	r3, #0
 8008af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af6:	1b5d      	subs	r5, r3, r5
 8008af8:	1e6b      	subs	r3, r5, #1
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	bf45      	ittet	mi
 8008afe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b02:	9304      	strmi	r3, [sp, #16]
 8008b04:	2300      	movpl	r3, #0
 8008b06:	2300      	movmi	r3, #0
 8008b08:	bf4c      	ite	mi
 8008b0a:	9305      	strmi	r3, [sp, #20]
 8008b0c:	9304      	strpl	r3, [sp, #16]
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db3d      	blt.n	8008b90 <_dtoa_r+0x248>
 8008b14:	9b05      	ldr	r3, [sp, #20]
 8008b16:	9a00      	ldr	r2, [sp, #0]
 8008b18:	920a      	str	r2, [sp, #40]	; 0x28
 8008b1a:	4413      	add	r3, r2
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9307      	str	r3, [sp, #28]
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	f200 8089 	bhi.w	8008c3c <_dtoa_r+0x2f4>
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	bfc4      	itt	gt
 8008b2e:	3b04      	subgt	r3, #4
 8008b30:	9306      	strgt	r3, [sp, #24]
 8008b32:	9b06      	ldr	r3, [sp, #24]
 8008b34:	f1a3 0302 	sub.w	r3, r3, #2
 8008b38:	bfcc      	ite	gt
 8008b3a:	2500      	movgt	r5, #0
 8008b3c:	2501      	movle	r5, #1
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	f200 8087 	bhi.w	8008c52 <_dtoa_r+0x30a>
 8008b44:	e8df f003 	tbb	[pc, r3]
 8008b48:	59383a2d 	.word	0x59383a2d
 8008b4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b50:	441d      	add	r5, r3
 8008b52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	bfc1      	itttt	gt
 8008b5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b62:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b6a:	bfda      	itte	le
 8008b6c:	f1c3 0320 	rsble	r3, r3, #32
 8008b70:	fa06 f003 	lslle.w	r0, r6, r3
 8008b74:	4318      	orrgt	r0, r3
 8008b76:	f7f7 fced 	bl	8000554 <__aeabi_ui2d>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b82:	3d01      	subs	r5, #1
 8008b84:	930e      	str	r3, [sp, #56]	; 0x38
 8008b86:	e76a      	b.n	8008a5e <_dtoa_r+0x116>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e7b2      	b.n	8008af2 <_dtoa_r+0x1aa>
 8008b8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b8e:	e7b1      	b.n	8008af4 <_dtoa_r+0x1ac>
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	9a00      	ldr	r2, [sp, #0]
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	4253      	negs	r3, r2
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	e7bf      	b.n	8008b22 <_dtoa_r+0x1da>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9308      	str	r3, [sp, #32]
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc55      	bgt.n	8008c58 <_dtoa_r+0x310>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb6:	e00c      	b.n	8008bd2 <_dtoa_r+0x28a>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x25c>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	9b00      	ldr	r3, [sp, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	9303      	str	r3, [sp, #12]
 8008bce:	bfb8      	it	lt
 8008bd0:	2301      	movlt	r3, #1
 8008bd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	6042      	str	r2, [r0, #4]
 8008bd8:	2204      	movs	r2, #4
 8008bda:	f102 0614 	add.w	r6, r2, #20
 8008bde:	429e      	cmp	r6, r3
 8008be0:	6841      	ldr	r1, [r0, #4]
 8008be2:	d93d      	bls.n	8008c60 <_dtoa_r+0x318>
 8008be4:	4620      	mov	r0, r4
 8008be6:	f001 fa57 	bl	800a098 <_Balloc>
 8008bea:	9001      	str	r0, [sp, #4]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d13b      	bne.n	8008c68 <_dtoa_r+0x320>
 8008bf0:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <_dtoa_r+0x2f0>)
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bf8:	e6c0      	b.n	800897c <_dtoa_r+0x34>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e7df      	b.n	8008bbe <_dtoa_r+0x276>
 8008bfe:	bf00      	nop
 8008c00:	636f4361 	.word	0x636f4361
 8008c04:	3fd287a7 	.word	0x3fd287a7
 8008c08:	8b60c8b3 	.word	0x8b60c8b3
 8008c0c:	3fc68a28 	.word	0x3fc68a28
 8008c10:	509f79fb 	.word	0x509f79fb
 8008c14:	3fd34413 	.word	0x3fd34413
 8008c18:	0800ba46 	.word	0x0800ba46
 8008c1c:	0800ba5d 	.word	0x0800ba5d
 8008c20:	7ff00000 	.word	0x7ff00000
 8008c24:	0800ba42 	.word	0x0800ba42
 8008c28:	0800ba39 	.word	0x0800ba39
 8008c2c:	0800b8b9 	.word	0x0800b8b9
 8008c30:	3ff80000 	.word	0x3ff80000
 8008c34:	0800bc30 	.word	0x0800bc30
 8008c38:	0800bab8 	.word	0x0800bab8
 8008c3c:	2501      	movs	r5, #1
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9306      	str	r3, [sp, #24]
 8008c42:	9508      	str	r5, [sp, #32]
 8008c44:	f04f 33ff 	mov.w	r3, #4294967295
 8008c48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2312      	movs	r3, #18
 8008c50:	e7b0      	b.n	8008bb4 <_dtoa_r+0x26c>
 8008c52:	2301      	movs	r3, #1
 8008c54:	9308      	str	r3, [sp, #32]
 8008c56:	e7f5      	b.n	8008c44 <_dtoa_r+0x2fc>
 8008c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c5e:	e7b8      	b.n	8008bd2 <_dtoa_r+0x28a>
 8008c60:	3101      	adds	r1, #1
 8008c62:	6041      	str	r1, [r0, #4]
 8008c64:	0052      	lsls	r2, r2, #1
 8008c66:	e7b8      	b.n	8008bda <_dtoa_r+0x292>
 8008c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c6a:	9a01      	ldr	r2, [sp, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	2b0e      	cmp	r3, #14
 8008c72:	f200 809d 	bhi.w	8008db0 <_dtoa_r+0x468>
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	f000 809a 	beq.w	8008db0 <_dtoa_r+0x468>
 8008c7c:	9b00      	ldr	r3, [sp, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	dd32      	ble.n	8008ce8 <_dtoa_r+0x3a0>
 8008c82:	4ab7      	ldr	r2, [pc, #732]	; (8008f60 <_dtoa_r+0x618>)
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c90:	9b00      	ldr	r3, [sp, #0]
 8008c92:	05d8      	lsls	r0, r3, #23
 8008c94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c98:	d516      	bpl.n	8008cc8 <_dtoa_r+0x380>
 8008c9a:	4bb2      	ldr	r3, [pc, #712]	; (8008f64 <_dtoa_r+0x61c>)
 8008c9c:	ec51 0b19 	vmov	r0, r1, d9
 8008ca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca4:	f7f7 fdfa 	bl	800089c <__aeabi_ddiv>
 8008ca8:	f007 070f 	and.w	r7, r7, #15
 8008cac:	4682      	mov	sl, r0
 8008cae:	468b      	mov	fp, r1
 8008cb0:	2503      	movs	r5, #3
 8008cb2:	4eac      	ldr	r6, [pc, #688]	; (8008f64 <_dtoa_r+0x61c>)
 8008cb4:	b957      	cbnz	r7, 8008ccc <_dtoa_r+0x384>
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	464b      	mov	r3, r9
 8008cba:	4650      	mov	r0, sl
 8008cbc:	4659      	mov	r1, fp
 8008cbe:	f7f7 fded 	bl	800089c <__aeabi_ddiv>
 8008cc2:	4682      	mov	sl, r0
 8008cc4:	468b      	mov	fp, r1
 8008cc6:	e028      	b.n	8008d1a <_dtoa_r+0x3d2>
 8008cc8:	2502      	movs	r5, #2
 8008cca:	e7f2      	b.n	8008cb2 <_dtoa_r+0x36a>
 8008ccc:	07f9      	lsls	r1, r7, #31
 8008cce:	d508      	bpl.n	8008ce2 <_dtoa_r+0x39a>
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cd8:	f7f7 fcb6 	bl	8000648 <__aeabi_dmul>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	4680      	mov	r8, r0
 8008ce0:	4689      	mov	r9, r1
 8008ce2:	107f      	asrs	r7, r7, #1
 8008ce4:	3608      	adds	r6, #8
 8008ce6:	e7e5      	b.n	8008cb4 <_dtoa_r+0x36c>
 8008ce8:	f000 809b 	beq.w	8008e22 <_dtoa_r+0x4da>
 8008cec:	9b00      	ldr	r3, [sp, #0]
 8008cee:	4f9d      	ldr	r7, [pc, #628]	; (8008f64 <_dtoa_r+0x61c>)
 8008cf0:	425e      	negs	r6, r3
 8008cf2:	4b9b      	ldr	r3, [pc, #620]	; (8008f60 <_dtoa_r+0x618>)
 8008cf4:	f006 020f 	and.w	r2, r6, #15
 8008cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	ec51 0b19 	vmov	r0, r1, d9
 8008d04:	f7f7 fca0 	bl	8000648 <__aeabi_dmul>
 8008d08:	1136      	asrs	r6, r6, #4
 8008d0a:	4682      	mov	sl, r0
 8008d0c:	468b      	mov	fp, r1
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2502      	movs	r5, #2
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d17a      	bne.n	8008e0c <_dtoa_r+0x4c4>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d3      	bne.n	8008cc2 <_dtoa_r+0x37a>
 8008d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8082 	beq.w	8008e26 <_dtoa_r+0x4de>
 8008d22:	4b91      	ldr	r3, [pc, #580]	; (8008f68 <_dtoa_r+0x620>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	4650      	mov	r0, sl
 8008d28:	4659      	mov	r1, fp
 8008d2a:	f7f7 feff 	bl	8000b2c <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d079      	beq.n	8008e26 <_dtoa_r+0x4de>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d076      	beq.n	8008e26 <_dtoa_r+0x4de>
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dd36      	ble.n	8008dac <_dtoa_r+0x464>
 8008d3e:	9b00      	ldr	r3, [sp, #0]
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	1e5f      	subs	r7, r3, #1
 8008d46:	2200      	movs	r2, #0
 8008d48:	4b88      	ldr	r3, [pc, #544]	; (8008f6c <_dtoa_r+0x624>)
 8008d4a:	f7f7 fc7d 	bl	8000648 <__aeabi_dmul>
 8008d4e:	9e02      	ldr	r6, [sp, #8]
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	3501      	adds	r5, #1
 8008d56:	4628      	mov	r0, r5
 8008d58:	f7f7 fc0c 	bl	8000574 <__aeabi_i2d>
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	465b      	mov	r3, fp
 8008d60:	f7f7 fc72 	bl	8000648 <__aeabi_dmul>
 8008d64:	4b82      	ldr	r3, [pc, #520]	; (8008f70 <_dtoa_r+0x628>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	f7f7 fab8 	bl	80002dc <__adddf3>
 8008d6c:	46d0      	mov	r8, sl
 8008d6e:	46d9      	mov	r9, fp
 8008d70:	4682      	mov	sl, r0
 8008d72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	d158      	bne.n	8008e2c <_dtoa_r+0x4e4>
 8008d7a:	4b7e      	ldr	r3, [pc, #504]	; (8008f74 <_dtoa_r+0x62c>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 faa9 	bl	80002d8 <__aeabi_dsub>
 8008d86:	4652      	mov	r2, sl
 8008d88:	465b      	mov	r3, fp
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	f7f7 feeb 	bl	8000b68 <__aeabi_dcmpgt>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f040 8295 	bne.w	80092c2 <_dtoa_r+0x97a>
 8008d98:	4652      	mov	r2, sl
 8008d9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fec3 	bl	8000b2c <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f040 8289 	bne.w	80092be <_dtoa_r+0x976>
 8008dac:	ec5b ab19 	vmov	sl, fp, d9
 8008db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f2c0 8148 	blt.w	8009048 <_dtoa_r+0x700>
 8008db8:	9a00      	ldr	r2, [sp, #0]
 8008dba:	2a0e      	cmp	r2, #14
 8008dbc:	f300 8144 	bgt.w	8009048 <_dtoa_r+0x700>
 8008dc0:	4b67      	ldr	r3, [pc, #412]	; (8008f60 <_dtoa_r+0x618>)
 8008dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f280 80d5 	bge.w	8008f7c <_dtoa_r+0x634>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f300 80d1 	bgt.w	8008f7c <_dtoa_r+0x634>
 8008dda:	f040 826f 	bne.w	80092bc <_dtoa_r+0x974>
 8008dde:	4b65      	ldr	r3, [pc, #404]	; (8008f74 <_dtoa_r+0x62c>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fc2f 	bl	8000648 <__aeabi_dmul>
 8008dea:	4652      	mov	r2, sl
 8008dec:	465b      	mov	r3, fp
 8008dee:	f7f7 feb1 	bl	8000b54 <__aeabi_dcmpge>
 8008df2:	9e03      	ldr	r6, [sp, #12]
 8008df4:	4637      	mov	r7, r6
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8245 	bne.w	8009286 <_dtoa_r+0x93e>
 8008dfc:	9d01      	ldr	r5, [sp, #4]
 8008dfe:	2331      	movs	r3, #49	; 0x31
 8008e00:	f805 3b01 	strb.w	r3, [r5], #1
 8008e04:	9b00      	ldr	r3, [sp, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	e240      	b.n	800928e <_dtoa_r+0x946>
 8008e0c:	07f2      	lsls	r2, r6, #31
 8008e0e:	d505      	bpl.n	8008e1c <_dtoa_r+0x4d4>
 8008e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e14:	f7f7 fc18 	bl	8000648 <__aeabi_dmul>
 8008e18:	3501      	adds	r5, #1
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	1076      	asrs	r6, r6, #1
 8008e1e:	3708      	adds	r7, #8
 8008e20:	e777      	b.n	8008d12 <_dtoa_r+0x3ca>
 8008e22:	2502      	movs	r5, #2
 8008e24:	e779      	b.n	8008d1a <_dtoa_r+0x3d2>
 8008e26:	9f00      	ldr	r7, [sp, #0]
 8008e28:	9e03      	ldr	r6, [sp, #12]
 8008e2a:	e794      	b.n	8008d56 <_dtoa_r+0x40e>
 8008e2c:	9901      	ldr	r1, [sp, #4]
 8008e2e:	4b4c      	ldr	r3, [pc, #304]	; (8008f60 <_dtoa_r+0x618>)
 8008e30:	4431      	add	r1, r6
 8008e32:	910d      	str	r1, [sp, #52]	; 0x34
 8008e34:	9908      	ldr	r1, [sp, #32]
 8008e36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d043      	beq.n	8008eca <_dtoa_r+0x582>
 8008e42:	494d      	ldr	r1, [pc, #308]	; (8008f78 <_dtoa_r+0x630>)
 8008e44:	2000      	movs	r0, #0
 8008e46:	f7f7 fd29 	bl	800089c <__aeabi_ddiv>
 8008e4a:	4652      	mov	r2, sl
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	f7f7 fa43 	bl	80002d8 <__aeabi_dsub>
 8008e52:	9d01      	ldr	r5, [sp, #4]
 8008e54:	4682      	mov	sl, r0
 8008e56:	468b      	mov	fp, r1
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f7f7 fea4 	bl	8000ba8 <__aeabi_d2iz>
 8008e60:	4606      	mov	r6, r0
 8008e62:	f7f7 fb87 	bl	8000574 <__aeabi_i2d>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fa33 	bl	80002d8 <__aeabi_dsub>
 8008e72:	3630      	adds	r6, #48	; 0x30
 8008e74:	f805 6b01 	strb.w	r6, [r5], #1
 8008e78:	4652      	mov	r2, sl
 8008e7a:	465b      	mov	r3, fp
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	f7f7 fe54 	bl	8000b2c <__aeabi_dcmplt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d163      	bne.n	8008f50 <_dtoa_r+0x608>
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	4936      	ldr	r1, [pc, #216]	; (8008f68 <_dtoa_r+0x620>)
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7f7 fa22 	bl	80002d8 <__aeabi_dsub>
 8008e94:	4652      	mov	r2, sl
 8008e96:	465b      	mov	r3, fp
 8008e98:	f7f7 fe48 	bl	8000b2c <__aeabi_dcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f040 80b5 	bne.w	800900c <_dtoa_r+0x6c4>
 8008ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ea4:	429d      	cmp	r5, r3
 8008ea6:	d081      	beq.n	8008dac <_dtoa_r+0x464>
 8008ea8:	4b30      	ldr	r3, [pc, #192]	; (8008f6c <_dtoa_r+0x624>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4650      	mov	r0, sl
 8008eae:	4659      	mov	r1, fp
 8008eb0:	f7f7 fbca 	bl	8000648 <__aeabi_dmul>
 8008eb4:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <_dtoa_r+0x624>)
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	468b      	mov	fp, r1
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f7f7 fbc2 	bl	8000648 <__aeabi_dmul>
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	4689      	mov	r9, r1
 8008ec8:	e7c6      	b.n	8008e58 <_dtoa_r+0x510>
 8008eca:	4650      	mov	r0, sl
 8008ecc:	4659      	mov	r1, fp
 8008ece:	f7f7 fbbb 	bl	8000648 <__aeabi_dmul>
 8008ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed4:	9d01      	ldr	r5, [sp, #4]
 8008ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	4649      	mov	r1, r9
 8008ede:	4640      	mov	r0, r8
 8008ee0:	f7f7 fe62 	bl	8000ba8 <__aeabi_d2iz>
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	f7f7 fb45 	bl	8000574 <__aeabi_i2d>
 8008eea:	3630      	adds	r6, #48	; 0x30
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 f9f0 	bl	80002d8 <__aeabi_dsub>
 8008ef8:	f805 6b01 	strb.w	r6, [r5], #1
 8008efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008efe:	429d      	cmp	r5, r3
 8008f00:	4680      	mov	r8, r0
 8008f02:	4689      	mov	r9, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	d124      	bne.n	8008f54 <_dtoa_r+0x60c>
 8008f0a:	4b1b      	ldr	r3, [pc, #108]	; (8008f78 <_dtoa_r+0x630>)
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	4659      	mov	r1, fp
 8008f10:	f7f7 f9e4 	bl	80002dc <__adddf3>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 fe24 	bl	8000b68 <__aeabi_dcmpgt>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d173      	bne.n	800900c <_dtoa_r+0x6c4>
 8008f24:	4652      	mov	r2, sl
 8008f26:	465b      	mov	r3, fp
 8008f28:	4913      	ldr	r1, [pc, #76]	; (8008f78 <_dtoa_r+0x630>)
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f7f7 f9d4 	bl	80002d8 <__aeabi_dsub>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f43f af35 	beq.w	8008dac <_dtoa_r+0x464>
 8008f42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f44:	1e6b      	subs	r3, r5, #1
 8008f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f4c:	2b30      	cmp	r3, #48	; 0x30
 8008f4e:	d0f8      	beq.n	8008f42 <_dtoa_r+0x5fa>
 8008f50:	9700      	str	r7, [sp, #0]
 8008f52:	e049      	b.n	8008fe8 <_dtoa_r+0x6a0>
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <_dtoa_r+0x624>)
 8008f56:	f7f7 fb77 	bl	8000648 <__aeabi_dmul>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	4689      	mov	r9, r1
 8008f5e:	e7bd      	b.n	8008edc <_dtoa_r+0x594>
 8008f60:	0800bc30 	.word	0x0800bc30
 8008f64:	0800bc08 	.word	0x0800bc08
 8008f68:	3ff00000 	.word	0x3ff00000
 8008f6c:	40240000 	.word	0x40240000
 8008f70:	401c0000 	.word	0x401c0000
 8008f74:	40140000 	.word	0x40140000
 8008f78:	3fe00000 	.word	0x3fe00000
 8008f7c:	9d01      	ldr	r5, [sp, #4]
 8008f7e:	4656      	mov	r6, sl
 8008f80:	465f      	mov	r7, fp
 8008f82:	4642      	mov	r2, r8
 8008f84:	464b      	mov	r3, r9
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 fc87 	bl	800089c <__aeabi_ddiv>
 8008f8e:	f7f7 fe0b 	bl	8000ba8 <__aeabi_d2iz>
 8008f92:	4682      	mov	sl, r0
 8008f94:	f7f7 faee 	bl	8000574 <__aeabi_i2d>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	f7f7 fb54 	bl	8000648 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008fac:	f7f7 f994 	bl	80002d8 <__aeabi_dsub>
 8008fb0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb4:	9e01      	ldr	r6, [sp, #4]
 8008fb6:	9f03      	ldr	r7, [sp, #12]
 8008fb8:	1bae      	subs	r6, r5, r6
 8008fba:	42b7      	cmp	r7, r6
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	d135      	bne.n	800902e <_dtoa_r+0x6e6>
 8008fc2:	f7f7 f98b 	bl	80002dc <__adddf3>
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	f7f7 fdcb 	bl	8000b68 <__aeabi_dcmpgt>
 8008fd2:	b9d0      	cbnz	r0, 800900a <_dtoa_r+0x6c2>
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	4630      	mov	r0, r6
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f7f7 fd9c 	bl	8000b18 <__aeabi_dcmpeq>
 8008fe0:	b110      	cbz	r0, 8008fe8 <_dtoa_r+0x6a0>
 8008fe2:	f01a 0f01 	tst.w	sl, #1
 8008fe6:	d110      	bne.n	800900a <_dtoa_r+0x6c2>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	ee18 1a10 	vmov	r1, s16
 8008fee:	f001 f893 	bl	800a118 <_Bfree>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9800      	ldr	r0, [sp, #0]
 8008ff6:	702b      	strb	r3, [r5, #0]
 8008ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	6018      	str	r0, [r3, #0]
 8008ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009000:	2b00      	cmp	r3, #0
 8009002:	f43f acf1 	beq.w	80089e8 <_dtoa_r+0xa0>
 8009006:	601d      	str	r5, [r3, #0]
 8009008:	e4ee      	b.n	80089e8 <_dtoa_r+0xa0>
 800900a:	9f00      	ldr	r7, [sp, #0]
 800900c:	462b      	mov	r3, r5
 800900e:	461d      	mov	r5, r3
 8009010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009014:	2a39      	cmp	r2, #57	; 0x39
 8009016:	d106      	bne.n	8009026 <_dtoa_r+0x6de>
 8009018:	9a01      	ldr	r2, [sp, #4]
 800901a:	429a      	cmp	r2, r3
 800901c:	d1f7      	bne.n	800900e <_dtoa_r+0x6c6>
 800901e:	9901      	ldr	r1, [sp, #4]
 8009020:	2230      	movs	r2, #48	; 0x30
 8009022:	3701      	adds	r7, #1
 8009024:	700a      	strb	r2, [r1, #0]
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	3201      	adds	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e790      	b.n	8008f50 <_dtoa_r+0x608>
 800902e:	4ba6      	ldr	r3, [pc, #664]	; (80092c8 <_dtoa_r+0x980>)
 8009030:	2200      	movs	r2, #0
 8009032:	f7f7 fb09 	bl	8000648 <__aeabi_dmul>
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	f7f7 fd6b 	bl	8000b18 <__aeabi_dcmpeq>
 8009042:	2800      	cmp	r0, #0
 8009044:	d09d      	beq.n	8008f82 <_dtoa_r+0x63a>
 8009046:	e7cf      	b.n	8008fe8 <_dtoa_r+0x6a0>
 8009048:	9a08      	ldr	r2, [sp, #32]
 800904a:	2a00      	cmp	r2, #0
 800904c:	f000 80d7 	beq.w	80091fe <_dtoa_r+0x8b6>
 8009050:	9a06      	ldr	r2, [sp, #24]
 8009052:	2a01      	cmp	r2, #1
 8009054:	f300 80ba 	bgt.w	80091cc <_dtoa_r+0x884>
 8009058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800905a:	2a00      	cmp	r2, #0
 800905c:	f000 80b2 	beq.w	80091c4 <_dtoa_r+0x87c>
 8009060:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009064:	9e07      	ldr	r6, [sp, #28]
 8009066:	9d04      	ldr	r5, [sp, #16]
 8009068:	9a04      	ldr	r2, [sp, #16]
 800906a:	441a      	add	r2, r3
 800906c:	9204      	str	r2, [sp, #16]
 800906e:	9a05      	ldr	r2, [sp, #20]
 8009070:	2101      	movs	r1, #1
 8009072:	441a      	add	r2, r3
 8009074:	4620      	mov	r0, r4
 8009076:	9205      	str	r2, [sp, #20]
 8009078:	f001 f950 	bl	800a31c <__i2b>
 800907c:	4607      	mov	r7, r0
 800907e:	2d00      	cmp	r5, #0
 8009080:	dd0c      	ble.n	800909c <_dtoa_r+0x754>
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd09      	ble.n	800909c <_dtoa_r+0x754>
 8009088:	42ab      	cmp	r3, r5
 800908a:	9a04      	ldr	r2, [sp, #16]
 800908c:	bfa8      	it	ge
 800908e:	462b      	movge	r3, r5
 8009090:	1ad2      	subs	r2, r2, r3
 8009092:	9204      	str	r2, [sp, #16]
 8009094:	9a05      	ldr	r2, [sp, #20]
 8009096:	1aed      	subs	r5, r5, r3
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	9b07      	ldr	r3, [sp, #28]
 800909e:	b31b      	cbz	r3, 80090e8 <_dtoa_r+0x7a0>
 80090a0:	9b08      	ldr	r3, [sp, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 80af 	beq.w	8009206 <_dtoa_r+0x8be>
 80090a8:	2e00      	cmp	r6, #0
 80090aa:	dd13      	ble.n	80090d4 <_dtoa_r+0x78c>
 80090ac:	4639      	mov	r1, r7
 80090ae:	4632      	mov	r2, r6
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 f9f3 	bl	800a49c <__pow5mult>
 80090b6:	ee18 2a10 	vmov	r2, s16
 80090ba:	4601      	mov	r1, r0
 80090bc:	4607      	mov	r7, r0
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 f942 	bl	800a348 <__multiply>
 80090c4:	ee18 1a10 	vmov	r1, s16
 80090c8:	4680      	mov	r8, r0
 80090ca:	4620      	mov	r0, r4
 80090cc:	f001 f824 	bl	800a118 <_Bfree>
 80090d0:	ee08 8a10 	vmov	s16, r8
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	1b9a      	subs	r2, r3, r6
 80090d8:	d006      	beq.n	80090e8 <_dtoa_r+0x7a0>
 80090da:	ee18 1a10 	vmov	r1, s16
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 f9dc 	bl	800a49c <__pow5mult>
 80090e4:	ee08 0a10 	vmov	s16, r0
 80090e8:	2101      	movs	r1, #1
 80090ea:	4620      	mov	r0, r4
 80090ec:	f001 f916 	bl	800a31c <__i2b>
 80090f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	4606      	mov	r6, r0
 80090f6:	f340 8088 	ble.w	800920a <_dtoa_r+0x8c2>
 80090fa:	461a      	mov	r2, r3
 80090fc:	4601      	mov	r1, r0
 80090fe:	4620      	mov	r0, r4
 8009100:	f001 f9cc 	bl	800a49c <__pow5mult>
 8009104:	9b06      	ldr	r3, [sp, #24]
 8009106:	2b01      	cmp	r3, #1
 8009108:	4606      	mov	r6, r0
 800910a:	f340 8081 	ble.w	8009210 <_dtoa_r+0x8c8>
 800910e:	f04f 0800 	mov.w	r8, #0
 8009112:	6933      	ldr	r3, [r6, #16]
 8009114:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	f001 f8af 	bl	800a27c <__hi0bits>
 800911e:	f1c0 0020 	rsb	r0, r0, #32
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	4418      	add	r0, r3
 8009126:	f010 001f 	ands.w	r0, r0, #31
 800912a:	f000 8092 	beq.w	8009252 <_dtoa_r+0x90a>
 800912e:	f1c0 0320 	rsb	r3, r0, #32
 8009132:	2b04      	cmp	r3, #4
 8009134:	f340 808a 	ble.w	800924c <_dtoa_r+0x904>
 8009138:	f1c0 001c 	rsb	r0, r0, #28
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	4403      	add	r3, r0
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	9b05      	ldr	r3, [sp, #20]
 8009144:	4403      	add	r3, r0
 8009146:	4405      	add	r5, r0
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd07      	ble.n	8009160 <_dtoa_r+0x818>
 8009150:	ee18 1a10 	vmov	r1, s16
 8009154:	461a      	mov	r2, r3
 8009156:	4620      	mov	r0, r4
 8009158:	f001 f9fa 	bl	800a550 <__lshift>
 800915c:	ee08 0a10 	vmov	s16, r0
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd05      	ble.n	8009172 <_dtoa_r+0x82a>
 8009166:	4631      	mov	r1, r6
 8009168:	461a      	mov	r2, r3
 800916a:	4620      	mov	r0, r4
 800916c:	f001 f9f0 	bl	800a550 <__lshift>
 8009170:	4606      	mov	r6, r0
 8009172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d06e      	beq.n	8009256 <_dtoa_r+0x90e>
 8009178:	ee18 0a10 	vmov	r0, s16
 800917c:	4631      	mov	r1, r6
 800917e:	f001 fa57 	bl	800a630 <__mcmp>
 8009182:	2800      	cmp	r0, #0
 8009184:	da67      	bge.n	8009256 <_dtoa_r+0x90e>
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	3b01      	subs	r3, #1
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	220a      	movs	r2, #10
 8009192:	2300      	movs	r3, #0
 8009194:	4620      	mov	r0, r4
 8009196:	f000 ffe1 	bl	800a15c <__multadd>
 800919a:	9b08      	ldr	r3, [sp, #32]
 800919c:	ee08 0a10 	vmov	s16, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 81b1 	beq.w	8009508 <_dtoa_r+0xbc0>
 80091a6:	2300      	movs	r3, #0
 80091a8:	4639      	mov	r1, r7
 80091aa:	220a      	movs	r2, #10
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 ffd5 	bl	800a15c <__multadd>
 80091b2:	9b02      	ldr	r3, [sp, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	4607      	mov	r7, r0
 80091b8:	f300 808e 	bgt.w	80092d8 <_dtoa_r+0x990>
 80091bc:	9b06      	ldr	r3, [sp, #24]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dc51      	bgt.n	8009266 <_dtoa_r+0x91e>
 80091c2:	e089      	b.n	80092d8 <_dtoa_r+0x990>
 80091c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091ca:	e74b      	b.n	8009064 <_dtoa_r+0x71c>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	1e5e      	subs	r6, r3, #1
 80091d0:	9b07      	ldr	r3, [sp, #28]
 80091d2:	42b3      	cmp	r3, r6
 80091d4:	bfbf      	itttt	lt
 80091d6:	9b07      	ldrlt	r3, [sp, #28]
 80091d8:	9607      	strlt	r6, [sp, #28]
 80091da:	1af2      	sublt	r2, r6, r3
 80091dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091de:	bfb6      	itet	lt
 80091e0:	189b      	addlt	r3, r3, r2
 80091e2:	1b9e      	subge	r6, r3, r6
 80091e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	bfb8      	it	lt
 80091ea:	2600      	movlt	r6, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfb7      	itett	lt
 80091f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80091f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80091f8:	1a9d      	sublt	r5, r3, r2
 80091fa:	2300      	movlt	r3, #0
 80091fc:	e734      	b.n	8009068 <_dtoa_r+0x720>
 80091fe:	9e07      	ldr	r6, [sp, #28]
 8009200:	9d04      	ldr	r5, [sp, #16]
 8009202:	9f08      	ldr	r7, [sp, #32]
 8009204:	e73b      	b.n	800907e <_dtoa_r+0x736>
 8009206:	9a07      	ldr	r2, [sp, #28]
 8009208:	e767      	b.n	80090da <_dtoa_r+0x792>
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	2b01      	cmp	r3, #1
 800920e:	dc18      	bgt.n	8009242 <_dtoa_r+0x8fa>
 8009210:	f1ba 0f00 	cmp.w	sl, #0
 8009214:	d115      	bne.n	8009242 <_dtoa_r+0x8fa>
 8009216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800921a:	b993      	cbnz	r3, 8009242 <_dtoa_r+0x8fa>
 800921c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009220:	0d1b      	lsrs	r3, r3, #20
 8009222:	051b      	lsls	r3, r3, #20
 8009224:	b183      	cbz	r3, 8009248 <_dtoa_r+0x900>
 8009226:	9b04      	ldr	r3, [sp, #16]
 8009228:	3301      	adds	r3, #1
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	9b05      	ldr	r3, [sp, #20]
 800922e:	3301      	adds	r3, #1
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	f04f 0801 	mov.w	r8, #1
 8009236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009238:	2b00      	cmp	r3, #0
 800923a:	f47f af6a 	bne.w	8009112 <_dtoa_r+0x7ca>
 800923e:	2001      	movs	r0, #1
 8009240:	e76f      	b.n	8009122 <_dtoa_r+0x7da>
 8009242:	f04f 0800 	mov.w	r8, #0
 8009246:	e7f6      	b.n	8009236 <_dtoa_r+0x8ee>
 8009248:	4698      	mov	r8, r3
 800924a:	e7f4      	b.n	8009236 <_dtoa_r+0x8ee>
 800924c:	f43f af7d 	beq.w	800914a <_dtoa_r+0x802>
 8009250:	4618      	mov	r0, r3
 8009252:	301c      	adds	r0, #28
 8009254:	e772      	b.n	800913c <_dtoa_r+0x7f4>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc37      	bgt.n	80092cc <_dtoa_r+0x984>
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	2b02      	cmp	r3, #2
 8009260:	dd34      	ble.n	80092cc <_dtoa_r+0x984>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	b96b      	cbnz	r3, 8009286 <_dtoa_r+0x93e>
 800926a:	4631      	mov	r1, r6
 800926c:	2205      	movs	r2, #5
 800926e:	4620      	mov	r0, r4
 8009270:	f000 ff74 	bl	800a15c <__multadd>
 8009274:	4601      	mov	r1, r0
 8009276:	4606      	mov	r6, r0
 8009278:	ee18 0a10 	vmov	r0, s16
 800927c:	f001 f9d8 	bl	800a630 <__mcmp>
 8009280:	2800      	cmp	r0, #0
 8009282:	f73f adbb 	bgt.w	8008dfc <_dtoa_r+0x4b4>
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	9d01      	ldr	r5, [sp, #4]
 800928a:	43db      	mvns	r3, r3
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	f04f 0800 	mov.w	r8, #0
 8009292:	4631      	mov	r1, r6
 8009294:	4620      	mov	r0, r4
 8009296:	f000 ff3f 	bl	800a118 <_Bfree>
 800929a:	2f00      	cmp	r7, #0
 800929c:	f43f aea4 	beq.w	8008fe8 <_dtoa_r+0x6a0>
 80092a0:	f1b8 0f00 	cmp.w	r8, #0
 80092a4:	d005      	beq.n	80092b2 <_dtoa_r+0x96a>
 80092a6:	45b8      	cmp	r8, r7
 80092a8:	d003      	beq.n	80092b2 <_dtoa_r+0x96a>
 80092aa:	4641      	mov	r1, r8
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 ff33 	bl	800a118 <_Bfree>
 80092b2:	4639      	mov	r1, r7
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 ff2f 	bl	800a118 <_Bfree>
 80092ba:	e695      	b.n	8008fe8 <_dtoa_r+0x6a0>
 80092bc:	2600      	movs	r6, #0
 80092be:	4637      	mov	r7, r6
 80092c0:	e7e1      	b.n	8009286 <_dtoa_r+0x93e>
 80092c2:	9700      	str	r7, [sp, #0]
 80092c4:	4637      	mov	r7, r6
 80092c6:	e599      	b.n	8008dfc <_dtoa_r+0x4b4>
 80092c8:	40240000 	.word	0x40240000
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 80ca 	beq.w	8009468 <_dtoa_r+0xb20>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	9302      	str	r3, [sp, #8]
 80092d8:	2d00      	cmp	r5, #0
 80092da:	dd05      	ble.n	80092e8 <_dtoa_r+0x9a0>
 80092dc:	4639      	mov	r1, r7
 80092de:	462a      	mov	r2, r5
 80092e0:	4620      	mov	r0, r4
 80092e2:	f001 f935 	bl	800a550 <__lshift>
 80092e6:	4607      	mov	r7, r0
 80092e8:	f1b8 0f00 	cmp.w	r8, #0
 80092ec:	d05b      	beq.n	80093a6 <_dtoa_r+0xa5e>
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fed1 	bl	800a098 <_Balloc>
 80092f6:	4605      	mov	r5, r0
 80092f8:	b928      	cbnz	r0, 8009306 <_dtoa_r+0x9be>
 80092fa:	4b87      	ldr	r3, [pc, #540]	; (8009518 <_dtoa_r+0xbd0>)
 80092fc:	4602      	mov	r2, r0
 80092fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009302:	f7ff bb3b 	b.w	800897c <_dtoa_r+0x34>
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	3202      	adds	r2, #2
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	f107 010c 	add.w	r1, r7, #12
 8009310:	300c      	adds	r0, #12
 8009312:	f000 feb3 	bl	800a07c <memcpy>
 8009316:	2201      	movs	r2, #1
 8009318:	4629      	mov	r1, r5
 800931a:	4620      	mov	r0, r4
 800931c:	f001 f918 	bl	800a550 <__lshift>
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	f103 0901 	add.w	r9, r3, #1
 8009326:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800932a:	4413      	add	r3, r2
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	f00a 0301 	and.w	r3, sl, #1
 8009332:	46b8      	mov	r8, r7
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	4607      	mov	r7, r0
 8009338:	4631      	mov	r1, r6
 800933a:	ee18 0a10 	vmov	r0, s16
 800933e:	f7ff fa77 	bl	8008830 <quorem>
 8009342:	4641      	mov	r1, r8
 8009344:	9002      	str	r0, [sp, #8]
 8009346:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800934a:	ee18 0a10 	vmov	r0, s16
 800934e:	f001 f96f 	bl	800a630 <__mcmp>
 8009352:	463a      	mov	r2, r7
 8009354:	9003      	str	r0, [sp, #12]
 8009356:	4631      	mov	r1, r6
 8009358:	4620      	mov	r0, r4
 800935a:	f001 f985 	bl	800a668 <__mdiff>
 800935e:	68c2      	ldr	r2, [r0, #12]
 8009360:	f109 3bff 	add.w	fp, r9, #4294967295
 8009364:	4605      	mov	r5, r0
 8009366:	bb02      	cbnz	r2, 80093aa <_dtoa_r+0xa62>
 8009368:	4601      	mov	r1, r0
 800936a:	ee18 0a10 	vmov	r0, s16
 800936e:	f001 f95f 	bl	800a630 <__mcmp>
 8009372:	4602      	mov	r2, r0
 8009374:	4629      	mov	r1, r5
 8009376:	4620      	mov	r0, r4
 8009378:	9207      	str	r2, [sp, #28]
 800937a:	f000 fecd 	bl	800a118 <_Bfree>
 800937e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009382:	ea43 0102 	orr.w	r1, r3, r2
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	430b      	orrs	r3, r1
 800938a:	464d      	mov	r5, r9
 800938c:	d10f      	bne.n	80093ae <_dtoa_r+0xa66>
 800938e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009392:	d02a      	beq.n	80093ea <_dtoa_r+0xaa2>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	dd02      	ble.n	80093a0 <_dtoa_r+0xa58>
 800939a:	9b02      	ldr	r3, [sp, #8]
 800939c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80093a0:	f88b a000 	strb.w	sl, [fp]
 80093a4:	e775      	b.n	8009292 <_dtoa_r+0x94a>
 80093a6:	4638      	mov	r0, r7
 80093a8:	e7ba      	b.n	8009320 <_dtoa_r+0x9d8>
 80093aa:	2201      	movs	r2, #1
 80093ac:	e7e2      	b.n	8009374 <_dtoa_r+0xa2c>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	db04      	blt.n	80093be <_dtoa_r+0xa76>
 80093b4:	9906      	ldr	r1, [sp, #24]
 80093b6:	430b      	orrs	r3, r1
 80093b8:	9904      	ldr	r1, [sp, #16]
 80093ba:	430b      	orrs	r3, r1
 80093bc:	d122      	bne.n	8009404 <_dtoa_r+0xabc>
 80093be:	2a00      	cmp	r2, #0
 80093c0:	ddee      	ble.n	80093a0 <_dtoa_r+0xa58>
 80093c2:	ee18 1a10 	vmov	r1, s16
 80093c6:	2201      	movs	r2, #1
 80093c8:	4620      	mov	r0, r4
 80093ca:	f001 f8c1 	bl	800a550 <__lshift>
 80093ce:	4631      	mov	r1, r6
 80093d0:	ee08 0a10 	vmov	s16, r0
 80093d4:	f001 f92c 	bl	800a630 <__mcmp>
 80093d8:	2800      	cmp	r0, #0
 80093da:	dc03      	bgt.n	80093e4 <_dtoa_r+0xa9c>
 80093dc:	d1e0      	bne.n	80093a0 <_dtoa_r+0xa58>
 80093de:	f01a 0f01 	tst.w	sl, #1
 80093e2:	d0dd      	beq.n	80093a0 <_dtoa_r+0xa58>
 80093e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093e8:	d1d7      	bne.n	800939a <_dtoa_r+0xa52>
 80093ea:	2339      	movs	r3, #57	; 0x39
 80093ec:	f88b 3000 	strb.w	r3, [fp]
 80093f0:	462b      	mov	r3, r5
 80093f2:	461d      	mov	r5, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093fa:	2a39      	cmp	r2, #57	; 0x39
 80093fc:	d071      	beq.n	80094e2 <_dtoa_r+0xb9a>
 80093fe:	3201      	adds	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e746      	b.n	8009292 <_dtoa_r+0x94a>
 8009404:	2a00      	cmp	r2, #0
 8009406:	dd07      	ble.n	8009418 <_dtoa_r+0xad0>
 8009408:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800940c:	d0ed      	beq.n	80093ea <_dtoa_r+0xaa2>
 800940e:	f10a 0301 	add.w	r3, sl, #1
 8009412:	f88b 3000 	strb.w	r3, [fp]
 8009416:	e73c      	b.n	8009292 <_dtoa_r+0x94a>
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800941e:	4599      	cmp	r9, r3
 8009420:	d047      	beq.n	80094b2 <_dtoa_r+0xb6a>
 8009422:	ee18 1a10 	vmov	r1, s16
 8009426:	2300      	movs	r3, #0
 8009428:	220a      	movs	r2, #10
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fe96 	bl	800a15c <__multadd>
 8009430:	45b8      	cmp	r8, r7
 8009432:	ee08 0a10 	vmov	s16, r0
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	f04f 020a 	mov.w	r2, #10
 800943e:	4641      	mov	r1, r8
 8009440:	4620      	mov	r0, r4
 8009442:	d106      	bne.n	8009452 <_dtoa_r+0xb0a>
 8009444:	f000 fe8a 	bl	800a15c <__multadd>
 8009448:	4680      	mov	r8, r0
 800944a:	4607      	mov	r7, r0
 800944c:	f109 0901 	add.w	r9, r9, #1
 8009450:	e772      	b.n	8009338 <_dtoa_r+0x9f0>
 8009452:	f000 fe83 	bl	800a15c <__multadd>
 8009456:	4639      	mov	r1, r7
 8009458:	4680      	mov	r8, r0
 800945a:	2300      	movs	r3, #0
 800945c:	220a      	movs	r2, #10
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fe7c 	bl	800a15c <__multadd>
 8009464:	4607      	mov	r7, r0
 8009466:	e7f1      	b.n	800944c <_dtoa_r+0xb04>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	9d01      	ldr	r5, [sp, #4]
 800946e:	ee18 0a10 	vmov	r0, s16
 8009472:	4631      	mov	r1, r6
 8009474:	f7ff f9dc 	bl	8008830 <quorem>
 8009478:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	f805 ab01 	strb.w	sl, [r5], #1
 8009482:	1aea      	subs	r2, r5, r3
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	4293      	cmp	r3, r2
 8009488:	dd09      	ble.n	800949e <_dtoa_r+0xb56>
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	2300      	movs	r3, #0
 8009490:	220a      	movs	r2, #10
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fe62 	bl	800a15c <__multadd>
 8009498:	ee08 0a10 	vmov	s16, r0
 800949c:	e7e7      	b.n	800946e <_dtoa_r+0xb26>
 800949e:	9b02      	ldr	r3, [sp, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bfc8      	it	gt
 80094a4:	461d      	movgt	r5, r3
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	bfd8      	it	le
 80094aa:	2501      	movle	r5, #1
 80094ac:	441d      	add	r5, r3
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	2201      	movs	r2, #1
 80094b8:	4620      	mov	r0, r4
 80094ba:	f001 f849 	bl	800a550 <__lshift>
 80094be:	4631      	mov	r1, r6
 80094c0:	ee08 0a10 	vmov	s16, r0
 80094c4:	f001 f8b4 	bl	800a630 <__mcmp>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dc91      	bgt.n	80093f0 <_dtoa_r+0xaa8>
 80094cc:	d102      	bne.n	80094d4 <_dtoa_r+0xb8c>
 80094ce:	f01a 0f01 	tst.w	sl, #1
 80094d2:	d18d      	bne.n	80093f0 <_dtoa_r+0xaa8>
 80094d4:	462b      	mov	r3, r5
 80094d6:	461d      	mov	r5, r3
 80094d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094dc:	2a30      	cmp	r2, #48	; 0x30
 80094de:	d0fa      	beq.n	80094d6 <_dtoa_r+0xb8e>
 80094e0:	e6d7      	b.n	8009292 <_dtoa_r+0x94a>
 80094e2:	9a01      	ldr	r2, [sp, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d184      	bne.n	80093f2 <_dtoa_r+0xaaa>
 80094e8:	9b00      	ldr	r3, [sp, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2331      	movs	r3, #49	; 0x31
 80094f0:	7013      	strb	r3, [r2, #0]
 80094f2:	e6ce      	b.n	8009292 <_dtoa_r+0x94a>
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <_dtoa_r+0xbd4>)
 80094f6:	f7ff ba95 	b.w	8008a24 <_dtoa_r+0xdc>
 80094fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f47f aa6e 	bne.w	80089de <_dtoa_r+0x96>
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <_dtoa_r+0xbd8>)
 8009504:	f7ff ba8e 	b.w	8008a24 <_dtoa_r+0xdc>
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dcae      	bgt.n	800946c <_dtoa_r+0xb24>
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	2b02      	cmp	r3, #2
 8009512:	f73f aea8 	bgt.w	8009266 <_dtoa_r+0x91e>
 8009516:	e7a9      	b.n	800946c <_dtoa_r+0xb24>
 8009518:	0800bab8 	.word	0x0800bab8
 800951c:	0800b8b8 	.word	0x0800b8b8
 8009520:	0800ba39 	.word	0x0800ba39

08009524 <__sflush_r>:
 8009524:	898a      	ldrh	r2, [r1, #12]
 8009526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952a:	4605      	mov	r5, r0
 800952c:	0710      	lsls	r0, r2, #28
 800952e:	460c      	mov	r4, r1
 8009530:	d458      	bmi.n	80095e4 <__sflush_r+0xc0>
 8009532:	684b      	ldr	r3, [r1, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc05      	bgt.n	8009544 <__sflush_r+0x20>
 8009538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	dc02      	bgt.n	8009544 <__sflush_r+0x20>
 800953e:	2000      	movs	r0, #0
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009546:	2e00      	cmp	r6, #0
 8009548:	d0f9      	beq.n	800953e <__sflush_r+0x1a>
 800954a:	2300      	movs	r3, #0
 800954c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009550:	682f      	ldr	r7, [r5, #0]
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	d032      	beq.n	80095bc <__sflush_r+0x98>
 8009556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	075a      	lsls	r2, r3, #29
 800955c:	d505      	bpl.n	800956a <__sflush_r+0x46>
 800955e:	6863      	ldr	r3, [r4, #4]
 8009560:	1ac0      	subs	r0, r0, r3
 8009562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009564:	b10b      	cbz	r3, 800956a <__sflush_r+0x46>
 8009566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009568:	1ac0      	subs	r0, r0, r3
 800956a:	2300      	movs	r3, #0
 800956c:	4602      	mov	r2, r0
 800956e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009570:	6a21      	ldr	r1, [r4, #32]
 8009572:	4628      	mov	r0, r5
 8009574:	47b0      	blx	r6
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	d106      	bne.n	800958a <__sflush_r+0x66>
 800957c:	6829      	ldr	r1, [r5, #0]
 800957e:	291d      	cmp	r1, #29
 8009580:	d82c      	bhi.n	80095dc <__sflush_r+0xb8>
 8009582:	4a2a      	ldr	r2, [pc, #168]	; (800962c <__sflush_r+0x108>)
 8009584:	40ca      	lsrs	r2, r1
 8009586:	07d6      	lsls	r6, r2, #31
 8009588:	d528      	bpl.n	80095dc <__sflush_r+0xb8>
 800958a:	2200      	movs	r2, #0
 800958c:	6062      	str	r2, [r4, #4]
 800958e:	04d9      	lsls	r1, r3, #19
 8009590:	6922      	ldr	r2, [r4, #16]
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	d504      	bpl.n	80095a0 <__sflush_r+0x7c>
 8009596:	1c42      	adds	r2, r0, #1
 8009598:	d101      	bne.n	800959e <__sflush_r+0x7a>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	b903      	cbnz	r3, 80095a0 <__sflush_r+0x7c>
 800959e:	6560      	str	r0, [r4, #84]	; 0x54
 80095a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a2:	602f      	str	r7, [r5, #0]
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d0ca      	beq.n	800953e <__sflush_r+0x1a>
 80095a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095ac:	4299      	cmp	r1, r3
 80095ae:	d002      	beq.n	80095b6 <__sflush_r+0x92>
 80095b0:	4628      	mov	r0, r5
 80095b2:	f001 fa49 	bl	800aa48 <_free_r>
 80095b6:	2000      	movs	r0, #0
 80095b8:	6360      	str	r0, [r4, #52]	; 0x34
 80095ba:	e7c1      	b.n	8009540 <__sflush_r+0x1c>
 80095bc:	6a21      	ldr	r1, [r4, #32]
 80095be:	2301      	movs	r3, #1
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b0      	blx	r6
 80095c4:	1c41      	adds	r1, r0, #1
 80095c6:	d1c7      	bne.n	8009558 <__sflush_r+0x34>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c4      	beq.n	8009558 <__sflush_r+0x34>
 80095ce:	2b1d      	cmp	r3, #29
 80095d0:	d001      	beq.n	80095d6 <__sflush_r+0xb2>
 80095d2:	2b16      	cmp	r3, #22
 80095d4:	d101      	bne.n	80095da <__sflush_r+0xb6>
 80095d6:	602f      	str	r7, [r5, #0]
 80095d8:	e7b1      	b.n	800953e <__sflush_r+0x1a>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	e7ad      	b.n	8009540 <__sflush_r+0x1c>
 80095e4:	690f      	ldr	r7, [r1, #16]
 80095e6:	2f00      	cmp	r7, #0
 80095e8:	d0a9      	beq.n	800953e <__sflush_r+0x1a>
 80095ea:	0793      	lsls	r3, r2, #30
 80095ec:	680e      	ldr	r6, [r1, #0]
 80095ee:	bf08      	it	eq
 80095f0:	694b      	ldreq	r3, [r1, #20]
 80095f2:	600f      	str	r7, [r1, #0]
 80095f4:	bf18      	it	ne
 80095f6:	2300      	movne	r3, #0
 80095f8:	eba6 0807 	sub.w	r8, r6, r7
 80095fc:	608b      	str	r3, [r1, #8]
 80095fe:	f1b8 0f00 	cmp.w	r8, #0
 8009602:	dd9c      	ble.n	800953e <__sflush_r+0x1a>
 8009604:	6a21      	ldr	r1, [r4, #32]
 8009606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009608:	4643      	mov	r3, r8
 800960a:	463a      	mov	r2, r7
 800960c:	4628      	mov	r0, r5
 800960e:	47b0      	blx	r6
 8009610:	2800      	cmp	r0, #0
 8009612:	dc06      	bgt.n	8009622 <__sflush_r+0xfe>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e78e      	b.n	8009540 <__sflush_r+0x1c>
 8009622:	4407      	add	r7, r0
 8009624:	eba8 0800 	sub.w	r8, r8, r0
 8009628:	e7e9      	b.n	80095fe <__sflush_r+0xda>
 800962a:	bf00      	nop
 800962c:	20400001 	.word	0x20400001

08009630 <_fflush_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	b913      	cbnz	r3, 8009640 <_fflush_r+0x10>
 800963a:	2500      	movs	r5, #0
 800963c:	4628      	mov	r0, r5
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	b118      	cbz	r0, 800964a <_fflush_r+0x1a>
 8009642:	6983      	ldr	r3, [r0, #24]
 8009644:	b90b      	cbnz	r3, 800964a <_fflush_r+0x1a>
 8009646:	f000 f887 	bl	8009758 <__sinit>
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <_fflush_r+0x6c>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d11b      	bne.n	8009688 <_fflush_r+0x58>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0ef      	beq.n	800963a <_fflush_r+0xa>
 800965a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800965c:	07d0      	lsls	r0, r2, #31
 800965e:	d404      	bmi.n	800966a <_fflush_r+0x3a>
 8009660:	0599      	lsls	r1, r3, #22
 8009662:	d402      	bmi.n	800966a <_fflush_r+0x3a>
 8009664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009666:	f000 fc88 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800966a:	4628      	mov	r0, r5
 800966c:	4621      	mov	r1, r4
 800966e:	f7ff ff59 	bl	8009524 <__sflush_r>
 8009672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009674:	07da      	lsls	r2, r3, #31
 8009676:	4605      	mov	r5, r0
 8009678:	d4e0      	bmi.n	800963c <_fflush_r+0xc>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	059b      	lsls	r3, r3, #22
 800967e:	d4dd      	bmi.n	800963c <_fflush_r+0xc>
 8009680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009682:	f000 fc7b 	bl	8009f7c <__retarget_lock_release_recursive>
 8009686:	e7d9      	b.n	800963c <_fflush_r+0xc>
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <_fflush_r+0x70>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <_fflush_r+0x62>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7df      	b.n	8009652 <_fflush_r+0x22>
 8009692:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <_fflush_r+0x74>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7da      	b.n	8009652 <_fflush_r+0x22>
 800969c:	0800baec 	.word	0x0800baec
 80096a0:	0800bb0c 	.word	0x0800bb0c
 80096a4:	0800bacc 	.word	0x0800bacc

080096a8 <std>:
 80096a8:	2300      	movs	r3, #0
 80096aa:	b510      	push	{r4, lr}
 80096ac:	4604      	mov	r4, r0
 80096ae:	e9c0 3300 	strd	r3, r3, [r0]
 80096b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096b6:	6083      	str	r3, [r0, #8]
 80096b8:	8181      	strh	r1, [r0, #12]
 80096ba:	6643      	str	r3, [r0, #100]	; 0x64
 80096bc:	81c2      	strh	r2, [r0, #14]
 80096be:	6183      	str	r3, [r0, #24]
 80096c0:	4619      	mov	r1, r3
 80096c2:	2208      	movs	r2, #8
 80096c4:	305c      	adds	r0, #92	; 0x5c
 80096c6:	f7fd fa11 	bl	8006aec <memset>
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <std+0x38>)
 80096cc:	6263      	str	r3, [r4, #36]	; 0x24
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x3c>)
 80096d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x40>)
 80096d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x44>)
 80096d8:	6224      	str	r4, [r4, #32]
 80096da:	6323      	str	r3, [r4, #48]	; 0x30
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	bf00      	nop
 80096e0:	0800b1a9 	.word	0x0800b1a9
 80096e4:	0800b1cb 	.word	0x0800b1cb
 80096e8:	0800b203 	.word	0x0800b203
 80096ec:	0800b227 	.word	0x0800b227

080096f0 <_cleanup_r>:
 80096f0:	4901      	ldr	r1, [pc, #4]	; (80096f8 <_cleanup_r+0x8>)
 80096f2:	f000 b8af 	b.w	8009854 <_fwalk_reent>
 80096f6:	bf00      	nop
 80096f8:	08009631 	.word	0x08009631

080096fc <__sfmoreglue>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	2268      	movs	r2, #104	; 0x68
 8009700:	1e4d      	subs	r5, r1, #1
 8009702:	4355      	muls	r5, r2
 8009704:	460e      	mov	r6, r1
 8009706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970a:	f001 fa09 	bl	800ab20 <_malloc_r>
 800970e:	4604      	mov	r4, r0
 8009710:	b140      	cbz	r0, 8009724 <__sfmoreglue+0x28>
 8009712:	2100      	movs	r1, #0
 8009714:	e9c0 1600 	strd	r1, r6, [r0]
 8009718:	300c      	adds	r0, #12
 800971a:	60a0      	str	r0, [r4, #8]
 800971c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009720:	f7fd f9e4 	bl	8006aec <memset>
 8009724:	4620      	mov	r0, r4
 8009726:	bd70      	pop	{r4, r5, r6, pc}

08009728 <__sfp_lock_acquire>:
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__sfp_lock_acquire+0x8>)
 800972a:	f000 bc26 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 800972e:	bf00      	nop
 8009730:	200004ad 	.word	0x200004ad

08009734 <__sfp_lock_release>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__sfp_lock_release+0x8>)
 8009736:	f000 bc21 	b.w	8009f7c <__retarget_lock_release_recursive>
 800973a:	bf00      	nop
 800973c:	200004ad 	.word	0x200004ad

08009740 <__sinit_lock_acquire>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sinit_lock_acquire+0x8>)
 8009742:	f000 bc1a 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	200004ae 	.word	0x200004ae

0800974c <__sinit_lock_release>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sinit_lock_release+0x8>)
 800974e:	f000 bc15 	b.w	8009f7c <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	200004ae 	.word	0x200004ae

08009758 <__sinit>:
 8009758:	b510      	push	{r4, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	f7ff fff0 	bl	8009740 <__sinit_lock_acquire>
 8009760:	69a3      	ldr	r3, [r4, #24]
 8009762:	b11b      	cbz	r3, 800976c <__sinit+0x14>
 8009764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009768:	f7ff bff0 	b.w	800974c <__sinit_lock_release>
 800976c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009770:	6523      	str	r3, [r4, #80]	; 0x50
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <__sinit+0x68>)
 8009774:	4a13      	ldr	r2, [pc, #76]	; (80097c4 <__sinit+0x6c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	62a2      	str	r2, [r4, #40]	; 0x28
 800977a:	42a3      	cmp	r3, r4
 800977c:	bf04      	itt	eq
 800977e:	2301      	moveq	r3, #1
 8009780:	61a3      	streq	r3, [r4, #24]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f820 	bl	80097c8 <__sfp>
 8009788:	6060      	str	r0, [r4, #4]
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f81c 	bl	80097c8 <__sfp>
 8009790:	60a0      	str	r0, [r4, #8]
 8009792:	4620      	mov	r0, r4
 8009794:	f000 f818 	bl	80097c8 <__sfp>
 8009798:	2200      	movs	r2, #0
 800979a:	60e0      	str	r0, [r4, #12]
 800979c:	2104      	movs	r1, #4
 800979e:	6860      	ldr	r0, [r4, #4]
 80097a0:	f7ff ff82 	bl	80096a8 <std>
 80097a4:	68a0      	ldr	r0, [r4, #8]
 80097a6:	2201      	movs	r2, #1
 80097a8:	2109      	movs	r1, #9
 80097aa:	f7ff ff7d 	bl	80096a8 <std>
 80097ae:	68e0      	ldr	r0, [r4, #12]
 80097b0:	2202      	movs	r2, #2
 80097b2:	2112      	movs	r1, #18
 80097b4:	f7ff ff78 	bl	80096a8 <std>
 80097b8:	2301      	movs	r3, #1
 80097ba:	61a3      	str	r3, [r4, #24]
 80097bc:	e7d2      	b.n	8009764 <__sinit+0xc>
 80097be:	bf00      	nop
 80097c0:	0800b8a4 	.word	0x0800b8a4
 80097c4:	080096f1 	.word	0x080096f1

080097c8 <__sfp>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	4607      	mov	r7, r0
 80097cc:	f7ff ffac 	bl	8009728 <__sfp_lock_acquire>
 80097d0:	4b1e      	ldr	r3, [pc, #120]	; (800984c <__sfp+0x84>)
 80097d2:	681e      	ldr	r6, [r3, #0]
 80097d4:	69b3      	ldr	r3, [r6, #24]
 80097d6:	b913      	cbnz	r3, 80097de <__sfp+0x16>
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff ffbd 	bl	8009758 <__sinit>
 80097de:	3648      	adds	r6, #72	; 0x48
 80097e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	d503      	bpl.n	80097f0 <__sfp+0x28>
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	b30b      	cbz	r3, 8009830 <__sfp+0x68>
 80097ec:	6836      	ldr	r6, [r6, #0]
 80097ee:	e7f7      	b.n	80097e0 <__sfp+0x18>
 80097f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097f4:	b9d5      	cbnz	r5, 800982c <__sfp+0x64>
 80097f6:	4b16      	ldr	r3, [pc, #88]	; (8009850 <__sfp+0x88>)
 80097f8:	60e3      	str	r3, [r4, #12]
 80097fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009800:	f000 fbba 	bl	8009f78 <__retarget_lock_init_recursive>
 8009804:	f7ff ff96 	bl	8009734 <__sfp_lock_release>
 8009808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800980c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009810:	6025      	str	r5, [r4, #0]
 8009812:	61a5      	str	r5, [r4, #24]
 8009814:	2208      	movs	r2, #8
 8009816:	4629      	mov	r1, r5
 8009818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800981c:	f7fd f966 	bl	8006aec <memset>
 8009820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009828:	4620      	mov	r0, r4
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	3468      	adds	r4, #104	; 0x68
 800982e:	e7d9      	b.n	80097e4 <__sfp+0x1c>
 8009830:	2104      	movs	r1, #4
 8009832:	4638      	mov	r0, r7
 8009834:	f7ff ff62 	bl	80096fc <__sfmoreglue>
 8009838:	4604      	mov	r4, r0
 800983a:	6030      	str	r0, [r6, #0]
 800983c:	2800      	cmp	r0, #0
 800983e:	d1d5      	bne.n	80097ec <__sfp+0x24>
 8009840:	f7ff ff78 	bl	8009734 <__sfp_lock_release>
 8009844:	230c      	movs	r3, #12
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	e7ee      	b.n	8009828 <__sfp+0x60>
 800984a:	bf00      	nop
 800984c:	0800b8a4 	.word	0x0800b8a4
 8009850:	ffff0001 	.word	0xffff0001

08009854 <_fwalk_reent>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4606      	mov	r6, r0
 800985a:	4688      	mov	r8, r1
 800985c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009860:	2700      	movs	r7, #0
 8009862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009866:	f1b9 0901 	subs.w	r9, r9, #1
 800986a:	d505      	bpl.n	8009878 <_fwalk_reent+0x24>
 800986c:	6824      	ldr	r4, [r4, #0]
 800986e:	2c00      	cmp	r4, #0
 8009870:	d1f7      	bne.n	8009862 <_fwalk_reent+0xe>
 8009872:	4638      	mov	r0, r7
 8009874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d907      	bls.n	800988e <_fwalk_reent+0x3a>
 800987e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009882:	3301      	adds	r3, #1
 8009884:	d003      	beq.n	800988e <_fwalk_reent+0x3a>
 8009886:	4629      	mov	r1, r5
 8009888:	4630      	mov	r0, r6
 800988a:	47c0      	blx	r8
 800988c:	4307      	orrs	r7, r0
 800988e:	3568      	adds	r5, #104	; 0x68
 8009890:	e7e9      	b.n	8009866 <_fwalk_reent+0x12>

08009892 <rshift>:
 8009892:	6903      	ldr	r3, [r0, #16]
 8009894:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800989c:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098a0:	f100 0414 	add.w	r4, r0, #20
 80098a4:	dd45      	ble.n	8009932 <rshift+0xa0>
 80098a6:	f011 011f 	ands.w	r1, r1, #31
 80098aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098b2:	d10c      	bne.n	80098ce <rshift+0x3c>
 80098b4:	f100 0710 	add.w	r7, r0, #16
 80098b8:	4629      	mov	r1, r5
 80098ba:	42b1      	cmp	r1, r6
 80098bc:	d334      	bcc.n	8009928 <rshift+0x96>
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	1eea      	subs	r2, r5, #3
 80098c4:	4296      	cmp	r6, r2
 80098c6:	bf38      	it	cc
 80098c8:	2300      	movcc	r3, #0
 80098ca:	4423      	add	r3, r4
 80098cc:	e015      	b.n	80098fa <rshift+0x68>
 80098ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098d2:	f1c1 0820 	rsb	r8, r1, #32
 80098d6:	40cf      	lsrs	r7, r1
 80098d8:	f105 0e04 	add.w	lr, r5, #4
 80098dc:	46a1      	mov	r9, r4
 80098de:	4576      	cmp	r6, lr
 80098e0:	46f4      	mov	ip, lr
 80098e2:	d815      	bhi.n	8009910 <rshift+0x7e>
 80098e4:	1a9a      	subs	r2, r3, r2
 80098e6:	0092      	lsls	r2, r2, #2
 80098e8:	3a04      	subs	r2, #4
 80098ea:	3501      	adds	r5, #1
 80098ec:	42ae      	cmp	r6, r5
 80098ee:	bf38      	it	cc
 80098f0:	2200      	movcc	r2, #0
 80098f2:	18a3      	adds	r3, r4, r2
 80098f4:	50a7      	str	r7, [r4, r2]
 80098f6:	b107      	cbz	r7, 80098fa <rshift+0x68>
 80098f8:	3304      	adds	r3, #4
 80098fa:	1b1a      	subs	r2, r3, r4
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009902:	bf08      	it	eq
 8009904:	2300      	moveq	r3, #0
 8009906:	6102      	str	r2, [r0, #16]
 8009908:	bf08      	it	eq
 800990a:	6143      	streq	r3, [r0, #20]
 800990c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009910:	f8dc c000 	ldr.w	ip, [ip]
 8009914:	fa0c fc08 	lsl.w	ip, ip, r8
 8009918:	ea4c 0707 	orr.w	r7, ip, r7
 800991c:	f849 7b04 	str.w	r7, [r9], #4
 8009920:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009924:	40cf      	lsrs	r7, r1
 8009926:	e7da      	b.n	80098de <rshift+0x4c>
 8009928:	f851 cb04 	ldr.w	ip, [r1], #4
 800992c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009930:	e7c3      	b.n	80098ba <rshift+0x28>
 8009932:	4623      	mov	r3, r4
 8009934:	e7e1      	b.n	80098fa <rshift+0x68>

08009936 <__hexdig_fun>:
 8009936:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800993a:	2b09      	cmp	r3, #9
 800993c:	d802      	bhi.n	8009944 <__hexdig_fun+0xe>
 800993e:	3820      	subs	r0, #32
 8009940:	b2c0      	uxtb	r0, r0
 8009942:	4770      	bx	lr
 8009944:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009948:	2b05      	cmp	r3, #5
 800994a:	d801      	bhi.n	8009950 <__hexdig_fun+0x1a>
 800994c:	3847      	subs	r0, #71	; 0x47
 800994e:	e7f7      	b.n	8009940 <__hexdig_fun+0xa>
 8009950:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009954:	2b05      	cmp	r3, #5
 8009956:	d801      	bhi.n	800995c <__hexdig_fun+0x26>
 8009958:	3827      	subs	r0, #39	; 0x27
 800995a:	e7f1      	b.n	8009940 <__hexdig_fun+0xa>
 800995c:	2000      	movs	r0, #0
 800995e:	4770      	bx	lr

08009960 <__gethex>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	ed2d 8b02 	vpush	{d8}
 8009968:	b089      	sub	sp, #36	; 0x24
 800996a:	ee08 0a10 	vmov	s16, r0
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	4bb4      	ldr	r3, [pc, #720]	; (8009c44 <__gethex+0x2e4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	468b      	mov	fp, r1
 800997a:	4690      	mov	r8, r2
 800997c:	f7f6 fc50 	bl	8000220 <strlen>
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	f8db 2000 	ldr.w	r2, [fp]
 8009986:	4403      	add	r3, r0
 8009988:	4682      	mov	sl, r0
 800998a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800998e:	9305      	str	r3, [sp, #20]
 8009990:	1c93      	adds	r3, r2, #2
 8009992:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009996:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800999a:	32fe      	adds	r2, #254	; 0xfe
 800999c:	18d1      	adds	r1, r2, r3
 800999e:	461f      	mov	r7, r3
 80099a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099a4:	9100      	str	r1, [sp, #0]
 80099a6:	2830      	cmp	r0, #48	; 0x30
 80099a8:	d0f8      	beq.n	800999c <__gethex+0x3c>
 80099aa:	f7ff ffc4 	bl	8009936 <__hexdig_fun>
 80099ae:	4604      	mov	r4, r0
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d13a      	bne.n	8009a2a <__gethex+0xca>
 80099b4:	9901      	ldr	r1, [sp, #4]
 80099b6:	4652      	mov	r2, sl
 80099b8:	4638      	mov	r0, r7
 80099ba:	f001 fc38 	bl	800b22e <strncmp>
 80099be:	4605      	mov	r5, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d168      	bne.n	8009a96 <__gethex+0x136>
 80099c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80099c8:	eb07 060a 	add.w	r6, r7, sl
 80099cc:	f7ff ffb3 	bl	8009936 <__hexdig_fun>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d062      	beq.n	8009a9a <__gethex+0x13a>
 80099d4:	4633      	mov	r3, r6
 80099d6:	7818      	ldrb	r0, [r3, #0]
 80099d8:	2830      	cmp	r0, #48	; 0x30
 80099da:	461f      	mov	r7, r3
 80099dc:	f103 0301 	add.w	r3, r3, #1
 80099e0:	d0f9      	beq.n	80099d6 <__gethex+0x76>
 80099e2:	f7ff ffa8 	bl	8009936 <__hexdig_fun>
 80099e6:	2301      	movs	r3, #1
 80099e8:	fab0 f480 	clz	r4, r0
 80099ec:	0964      	lsrs	r4, r4, #5
 80099ee:	4635      	mov	r5, r6
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	463a      	mov	r2, r7
 80099f4:	4616      	mov	r6, r2
 80099f6:	3201      	adds	r2, #1
 80099f8:	7830      	ldrb	r0, [r6, #0]
 80099fa:	f7ff ff9c 	bl	8009936 <__hexdig_fun>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1f8      	bne.n	80099f4 <__gethex+0x94>
 8009a02:	9901      	ldr	r1, [sp, #4]
 8009a04:	4652      	mov	r2, sl
 8009a06:	4630      	mov	r0, r6
 8009a08:	f001 fc11 	bl	800b22e <strncmp>
 8009a0c:	b980      	cbnz	r0, 8009a30 <__gethex+0xd0>
 8009a0e:	b94d      	cbnz	r5, 8009a24 <__gethex+0xc4>
 8009a10:	eb06 050a 	add.w	r5, r6, sl
 8009a14:	462a      	mov	r2, r5
 8009a16:	4616      	mov	r6, r2
 8009a18:	3201      	adds	r2, #1
 8009a1a:	7830      	ldrb	r0, [r6, #0]
 8009a1c:	f7ff ff8b 	bl	8009936 <__hexdig_fun>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1f8      	bne.n	8009a16 <__gethex+0xb6>
 8009a24:	1bad      	subs	r5, r5, r6
 8009a26:	00ad      	lsls	r5, r5, #2
 8009a28:	e004      	b.n	8009a34 <__gethex+0xd4>
 8009a2a:	2400      	movs	r4, #0
 8009a2c:	4625      	mov	r5, r4
 8009a2e:	e7e0      	b.n	80099f2 <__gethex+0x92>
 8009a30:	2d00      	cmp	r5, #0
 8009a32:	d1f7      	bne.n	8009a24 <__gethex+0xc4>
 8009a34:	7833      	ldrb	r3, [r6, #0]
 8009a36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a3a:	2b50      	cmp	r3, #80	; 0x50
 8009a3c:	d13b      	bne.n	8009ab6 <__gethex+0x156>
 8009a3e:	7873      	ldrb	r3, [r6, #1]
 8009a40:	2b2b      	cmp	r3, #43	; 0x2b
 8009a42:	d02c      	beq.n	8009a9e <__gethex+0x13e>
 8009a44:	2b2d      	cmp	r3, #45	; 0x2d
 8009a46:	d02e      	beq.n	8009aa6 <__gethex+0x146>
 8009a48:	1c71      	adds	r1, r6, #1
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	7808      	ldrb	r0, [r1, #0]
 8009a50:	f7ff ff71 	bl	8009936 <__hexdig_fun>
 8009a54:	1e43      	subs	r3, r0, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b18      	cmp	r3, #24
 8009a5a:	d82c      	bhi.n	8009ab6 <__gethex+0x156>
 8009a5c:	f1a0 0210 	sub.w	r2, r0, #16
 8009a60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a64:	f7ff ff67 	bl	8009936 <__hexdig_fun>
 8009a68:	1e43      	subs	r3, r0, #1
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b18      	cmp	r3, #24
 8009a6e:	d91d      	bls.n	8009aac <__gethex+0x14c>
 8009a70:	f1b9 0f00 	cmp.w	r9, #0
 8009a74:	d000      	beq.n	8009a78 <__gethex+0x118>
 8009a76:	4252      	negs	r2, r2
 8009a78:	4415      	add	r5, r2
 8009a7a:	f8cb 1000 	str.w	r1, [fp]
 8009a7e:	b1e4      	cbz	r4, 8009aba <__gethex+0x15a>
 8009a80:	9b00      	ldr	r3, [sp, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bf14      	ite	ne
 8009a86:	2700      	movne	r7, #0
 8009a88:	2706      	moveq	r7, #6
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	b009      	add	sp, #36	; 0x24
 8009a8e:	ecbd 8b02 	vpop	{d8}
 8009a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a96:	463e      	mov	r6, r7
 8009a98:	4625      	mov	r5, r4
 8009a9a:	2401      	movs	r4, #1
 8009a9c:	e7ca      	b.n	8009a34 <__gethex+0xd4>
 8009a9e:	f04f 0900 	mov.w	r9, #0
 8009aa2:	1cb1      	adds	r1, r6, #2
 8009aa4:	e7d3      	b.n	8009a4e <__gethex+0xee>
 8009aa6:	f04f 0901 	mov.w	r9, #1
 8009aaa:	e7fa      	b.n	8009aa2 <__gethex+0x142>
 8009aac:	230a      	movs	r3, #10
 8009aae:	fb03 0202 	mla	r2, r3, r2, r0
 8009ab2:	3a10      	subs	r2, #16
 8009ab4:	e7d4      	b.n	8009a60 <__gethex+0x100>
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	e7df      	b.n	8009a7a <__gethex+0x11a>
 8009aba:	1bf3      	subs	r3, r6, r7
 8009abc:	3b01      	subs	r3, #1
 8009abe:	4621      	mov	r1, r4
 8009ac0:	2b07      	cmp	r3, #7
 8009ac2:	dc0b      	bgt.n	8009adc <__gethex+0x17c>
 8009ac4:	ee18 0a10 	vmov	r0, s16
 8009ac8:	f000 fae6 	bl	800a098 <_Balloc>
 8009acc:	4604      	mov	r4, r0
 8009ace:	b940      	cbnz	r0, 8009ae2 <__gethex+0x182>
 8009ad0:	4b5d      	ldr	r3, [pc, #372]	; (8009c48 <__gethex+0x2e8>)
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	21de      	movs	r1, #222	; 0xde
 8009ad6:	485d      	ldr	r0, [pc, #372]	; (8009c4c <__gethex+0x2ec>)
 8009ad8:	f001 fbdc 	bl	800b294 <__assert_func>
 8009adc:	3101      	adds	r1, #1
 8009ade:	105b      	asrs	r3, r3, #1
 8009ae0:	e7ee      	b.n	8009ac0 <__gethex+0x160>
 8009ae2:	f100 0914 	add.w	r9, r0, #20
 8009ae6:	f04f 0b00 	mov.w	fp, #0
 8009aea:	f1ca 0301 	rsb	r3, sl, #1
 8009aee:	f8cd 9008 	str.w	r9, [sp, #8]
 8009af2:	f8cd b000 	str.w	fp, [sp]
 8009af6:	9306      	str	r3, [sp, #24]
 8009af8:	42b7      	cmp	r7, r6
 8009afa:	d340      	bcc.n	8009b7e <__gethex+0x21e>
 8009afc:	9802      	ldr	r0, [sp, #8]
 8009afe:	9b00      	ldr	r3, [sp, #0]
 8009b00:	f840 3b04 	str.w	r3, [r0], #4
 8009b04:	eba0 0009 	sub.w	r0, r0, r9
 8009b08:	1080      	asrs	r0, r0, #2
 8009b0a:	0146      	lsls	r6, r0, #5
 8009b0c:	6120      	str	r0, [r4, #16]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fbb4 	bl	800a27c <__hi0bits>
 8009b14:	1a30      	subs	r0, r6, r0
 8009b16:	f8d8 6000 	ldr.w	r6, [r8]
 8009b1a:	42b0      	cmp	r0, r6
 8009b1c:	dd63      	ble.n	8009be6 <__gethex+0x286>
 8009b1e:	1b87      	subs	r7, r0, r6
 8009b20:	4639      	mov	r1, r7
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 ff58 	bl	800a9d8 <__any_on>
 8009b28:	4682      	mov	sl, r0
 8009b2a:	b1a8      	cbz	r0, 8009b58 <__gethex+0x1f8>
 8009b2c:	1e7b      	subs	r3, r7, #1
 8009b2e:	1159      	asrs	r1, r3, #5
 8009b30:	f003 021f 	and.w	r2, r3, #31
 8009b34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b38:	f04f 0a01 	mov.w	sl, #1
 8009b3c:	fa0a f202 	lsl.w	r2, sl, r2
 8009b40:	420a      	tst	r2, r1
 8009b42:	d009      	beq.n	8009b58 <__gethex+0x1f8>
 8009b44:	4553      	cmp	r3, sl
 8009b46:	dd05      	ble.n	8009b54 <__gethex+0x1f4>
 8009b48:	1eb9      	subs	r1, r7, #2
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 ff44 	bl	800a9d8 <__any_on>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d145      	bne.n	8009be0 <__gethex+0x280>
 8009b54:	f04f 0a02 	mov.w	sl, #2
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f7ff fe99 	bl	8009892 <rshift>
 8009b60:	443d      	add	r5, r7
 8009b62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b66:	42ab      	cmp	r3, r5
 8009b68:	da4c      	bge.n	8009c04 <__gethex+0x2a4>
 8009b6a:	ee18 0a10 	vmov	r0, s16
 8009b6e:	4621      	mov	r1, r4
 8009b70:	f000 fad2 	bl	800a118 <_Bfree>
 8009b74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b76:	2300      	movs	r3, #0
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	27a3      	movs	r7, #163	; 0xa3
 8009b7c:	e785      	b.n	8009a8a <__gethex+0x12a>
 8009b7e:	1e73      	subs	r3, r6, #1
 8009b80:	9a05      	ldr	r2, [sp, #20]
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d019      	beq.n	8009bc0 <__gethex+0x260>
 8009b8c:	f1bb 0f20 	cmp.w	fp, #32
 8009b90:	d107      	bne.n	8009ba2 <__gethex+0x242>
 8009b92:	9b02      	ldr	r3, [sp, #8]
 8009b94:	9a00      	ldr	r2, [sp, #0]
 8009b96:	f843 2b04 	str.w	r2, [r3], #4
 8009b9a:	9302      	str	r3, [sp, #8]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	469b      	mov	fp, r3
 8009ba2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ba6:	f7ff fec6 	bl	8009936 <__hexdig_fun>
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	f000 000f 	and.w	r0, r0, #15
 8009bb0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009bb4:	4303      	orrs	r3, r0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	f10b 0b04 	add.w	fp, fp, #4
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	e00d      	b.n	8009bdc <__gethex+0x27c>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	9a06      	ldr	r2, [sp, #24]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	42bb      	cmp	r3, r7
 8009bc8:	d3e0      	bcc.n	8009b8c <__gethex+0x22c>
 8009bca:	4618      	mov	r0, r3
 8009bcc:	9901      	ldr	r1, [sp, #4]
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	f001 fb2c 	bl	800b22e <strncmp>
 8009bd6:	9b07      	ldr	r3, [sp, #28]
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1d7      	bne.n	8009b8c <__gethex+0x22c>
 8009bdc:	461e      	mov	r6, r3
 8009bde:	e78b      	b.n	8009af8 <__gethex+0x198>
 8009be0:	f04f 0a03 	mov.w	sl, #3
 8009be4:	e7b8      	b.n	8009b58 <__gethex+0x1f8>
 8009be6:	da0a      	bge.n	8009bfe <__gethex+0x29e>
 8009be8:	1a37      	subs	r7, r6, r0
 8009bea:	4621      	mov	r1, r4
 8009bec:	ee18 0a10 	vmov	r0, s16
 8009bf0:	463a      	mov	r2, r7
 8009bf2:	f000 fcad 	bl	800a550 <__lshift>
 8009bf6:	1bed      	subs	r5, r5, r7
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	f100 0914 	add.w	r9, r0, #20
 8009bfe:	f04f 0a00 	mov.w	sl, #0
 8009c02:	e7ae      	b.n	8009b62 <__gethex+0x202>
 8009c04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c08:	42a8      	cmp	r0, r5
 8009c0a:	dd72      	ble.n	8009cf2 <__gethex+0x392>
 8009c0c:	1b45      	subs	r5, r0, r5
 8009c0e:	42ae      	cmp	r6, r5
 8009c10:	dc36      	bgt.n	8009c80 <__gethex+0x320>
 8009c12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d02a      	beq.n	8009c70 <__gethex+0x310>
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d02c      	beq.n	8009c78 <__gethex+0x318>
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d11c      	bne.n	8009c5c <__gethex+0x2fc>
 8009c22:	42ae      	cmp	r6, r5
 8009c24:	d11a      	bne.n	8009c5c <__gethex+0x2fc>
 8009c26:	2e01      	cmp	r6, #1
 8009c28:	d112      	bne.n	8009c50 <__gethex+0x2f0>
 8009c2a:	9a04      	ldr	r2, [sp, #16]
 8009c2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	2301      	movs	r3, #1
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	f8c9 3000 	str.w	r3, [r9]
 8009c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c3c:	2762      	movs	r7, #98	; 0x62
 8009c3e:	601c      	str	r4, [r3, #0]
 8009c40:	e723      	b.n	8009a8a <__gethex+0x12a>
 8009c42:	bf00      	nop
 8009c44:	0800bb94 	.word	0x0800bb94
 8009c48:	0800bab8 	.word	0x0800bab8
 8009c4c:	0800bb2c 	.word	0x0800bb2c
 8009c50:	1e71      	subs	r1, r6, #1
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fec0 	bl	800a9d8 <__any_on>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d1e6      	bne.n	8009c2a <__gethex+0x2ca>
 8009c5c:	ee18 0a10 	vmov	r0, s16
 8009c60:	4621      	mov	r1, r4
 8009c62:	f000 fa59 	bl	800a118 <_Bfree>
 8009c66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	2750      	movs	r7, #80	; 0x50
 8009c6e:	e70c      	b.n	8009a8a <__gethex+0x12a>
 8009c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f2      	bne.n	8009c5c <__gethex+0x2fc>
 8009c76:	e7d8      	b.n	8009c2a <__gethex+0x2ca>
 8009c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1d5      	bne.n	8009c2a <__gethex+0x2ca>
 8009c7e:	e7ed      	b.n	8009c5c <__gethex+0x2fc>
 8009c80:	1e6f      	subs	r7, r5, #1
 8009c82:	f1ba 0f00 	cmp.w	sl, #0
 8009c86:	d131      	bne.n	8009cec <__gethex+0x38c>
 8009c88:	b127      	cbz	r7, 8009c94 <__gethex+0x334>
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fea3 	bl	800a9d8 <__any_on>
 8009c92:	4682      	mov	sl, r0
 8009c94:	117b      	asrs	r3, r7, #5
 8009c96:	2101      	movs	r1, #1
 8009c98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c9c:	f007 071f 	and.w	r7, r7, #31
 8009ca0:	fa01 f707 	lsl.w	r7, r1, r7
 8009ca4:	421f      	tst	r7, r3
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4620      	mov	r0, r4
 8009caa:	bf18      	it	ne
 8009cac:	f04a 0a02 	orrne.w	sl, sl, #2
 8009cb0:	1b76      	subs	r6, r6, r5
 8009cb2:	f7ff fdee 	bl	8009892 <rshift>
 8009cb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009cba:	2702      	movs	r7, #2
 8009cbc:	f1ba 0f00 	cmp.w	sl, #0
 8009cc0:	d048      	beq.n	8009d54 <__gethex+0x3f4>
 8009cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d015      	beq.n	8009cf6 <__gethex+0x396>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d017      	beq.n	8009cfe <__gethex+0x39e>
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d109      	bne.n	8009ce6 <__gethex+0x386>
 8009cd2:	f01a 0f02 	tst.w	sl, #2
 8009cd6:	d006      	beq.n	8009ce6 <__gethex+0x386>
 8009cd8:	f8d9 0000 	ldr.w	r0, [r9]
 8009cdc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ce0:	f01a 0f01 	tst.w	sl, #1
 8009ce4:	d10e      	bne.n	8009d04 <__gethex+0x3a4>
 8009ce6:	f047 0710 	orr.w	r7, r7, #16
 8009cea:	e033      	b.n	8009d54 <__gethex+0x3f4>
 8009cec:	f04f 0a01 	mov.w	sl, #1
 8009cf0:	e7d0      	b.n	8009c94 <__gethex+0x334>
 8009cf2:	2701      	movs	r7, #1
 8009cf4:	e7e2      	b.n	8009cbc <__gethex+0x35c>
 8009cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cf8:	f1c3 0301 	rsb	r3, r3, #1
 8009cfc:	9315      	str	r3, [sp, #84]	; 0x54
 8009cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0f0      	beq.n	8009ce6 <__gethex+0x386>
 8009d04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d08:	f104 0314 	add.w	r3, r4, #20
 8009d0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d14:	f04f 0c00 	mov.w	ip, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d22:	d01c      	beq.n	8009d5e <__gethex+0x3fe>
 8009d24:	3201      	adds	r2, #1
 8009d26:	6002      	str	r2, [r0, #0]
 8009d28:	2f02      	cmp	r7, #2
 8009d2a:	f104 0314 	add.w	r3, r4, #20
 8009d2e:	d13f      	bne.n	8009db0 <__gethex+0x450>
 8009d30:	f8d8 2000 	ldr.w	r2, [r8]
 8009d34:	3a01      	subs	r2, #1
 8009d36:	42b2      	cmp	r2, r6
 8009d38:	d10a      	bne.n	8009d50 <__gethex+0x3f0>
 8009d3a:	1171      	asrs	r1, r6, #5
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d42:	f006 061f 	and.w	r6, r6, #31
 8009d46:	fa02 f606 	lsl.w	r6, r2, r6
 8009d4a:	421e      	tst	r6, r3
 8009d4c:	bf18      	it	ne
 8009d4e:	4617      	movne	r7, r2
 8009d50:	f047 0720 	orr.w	r7, r7, #32
 8009d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d56:	601c      	str	r4, [r3, #0]
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	601d      	str	r5, [r3, #0]
 8009d5c:	e695      	b.n	8009a8a <__gethex+0x12a>
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d64:	d8d8      	bhi.n	8009d18 <__gethex+0x3b8>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	459b      	cmp	fp, r3
 8009d6a:	db19      	blt.n	8009da0 <__gethex+0x440>
 8009d6c:	6861      	ldr	r1, [r4, #4]
 8009d6e:	ee18 0a10 	vmov	r0, s16
 8009d72:	3101      	adds	r1, #1
 8009d74:	f000 f990 	bl	800a098 <_Balloc>
 8009d78:	4681      	mov	r9, r0
 8009d7a:	b918      	cbnz	r0, 8009d84 <__gethex+0x424>
 8009d7c:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <__gethex+0x488>)
 8009d7e:	4602      	mov	r2, r0
 8009d80:	2184      	movs	r1, #132	; 0x84
 8009d82:	e6a8      	b.n	8009ad6 <__gethex+0x176>
 8009d84:	6922      	ldr	r2, [r4, #16]
 8009d86:	3202      	adds	r2, #2
 8009d88:	f104 010c 	add.w	r1, r4, #12
 8009d8c:	0092      	lsls	r2, r2, #2
 8009d8e:	300c      	adds	r0, #12
 8009d90:	f000 f974 	bl	800a07c <memcpy>
 8009d94:	4621      	mov	r1, r4
 8009d96:	ee18 0a10 	vmov	r0, s16
 8009d9a:	f000 f9bd 	bl	800a118 <_Bfree>
 8009d9e:	464c      	mov	r4, r9
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009da8:	6122      	str	r2, [r4, #16]
 8009daa:	2201      	movs	r2, #1
 8009dac:	615a      	str	r2, [r3, #20]
 8009dae:	e7bb      	b.n	8009d28 <__gethex+0x3c8>
 8009db0:	6922      	ldr	r2, [r4, #16]
 8009db2:	455a      	cmp	r2, fp
 8009db4:	dd0b      	ble.n	8009dce <__gethex+0x46e>
 8009db6:	2101      	movs	r1, #1
 8009db8:	4620      	mov	r0, r4
 8009dba:	f7ff fd6a 	bl	8009892 <rshift>
 8009dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dc2:	3501      	adds	r5, #1
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	f6ff aed0 	blt.w	8009b6a <__gethex+0x20a>
 8009dca:	2701      	movs	r7, #1
 8009dcc:	e7c0      	b.n	8009d50 <__gethex+0x3f0>
 8009dce:	f016 061f 	ands.w	r6, r6, #31
 8009dd2:	d0fa      	beq.n	8009dca <__gethex+0x46a>
 8009dd4:	4453      	add	r3, sl
 8009dd6:	f1c6 0620 	rsb	r6, r6, #32
 8009dda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009dde:	f000 fa4d 	bl	800a27c <__hi0bits>
 8009de2:	42b0      	cmp	r0, r6
 8009de4:	dbe7      	blt.n	8009db6 <__gethex+0x456>
 8009de6:	e7f0      	b.n	8009dca <__gethex+0x46a>
 8009de8:	0800bab8 	.word	0x0800bab8

08009dec <L_shift>:
 8009dec:	f1c2 0208 	rsb	r2, r2, #8
 8009df0:	0092      	lsls	r2, r2, #2
 8009df2:	b570      	push	{r4, r5, r6, lr}
 8009df4:	f1c2 0620 	rsb	r6, r2, #32
 8009df8:	6843      	ldr	r3, [r0, #4]
 8009dfa:	6804      	ldr	r4, [r0, #0]
 8009dfc:	fa03 f506 	lsl.w	r5, r3, r6
 8009e00:	432c      	orrs	r4, r5
 8009e02:	40d3      	lsrs	r3, r2
 8009e04:	6004      	str	r4, [r0, #0]
 8009e06:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e0a:	4288      	cmp	r0, r1
 8009e0c:	d3f4      	bcc.n	8009df8 <L_shift+0xc>
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}

08009e10 <__match>:
 8009e10:	b530      	push	{r4, r5, lr}
 8009e12:	6803      	ldr	r3, [r0, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1a:	b914      	cbnz	r4, 8009e22 <__match+0x12>
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	2001      	movs	r0, #1
 8009e20:	bd30      	pop	{r4, r5, pc}
 8009e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e2a:	2d19      	cmp	r5, #25
 8009e2c:	bf98      	it	ls
 8009e2e:	3220      	addls	r2, #32
 8009e30:	42a2      	cmp	r2, r4
 8009e32:	d0f0      	beq.n	8009e16 <__match+0x6>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7f3      	b.n	8009e20 <__match+0x10>

08009e38 <__hexnan>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	680b      	ldr	r3, [r1, #0]
 8009e3e:	115e      	asrs	r6, r3, #5
 8009e40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e44:	f013 031f 	ands.w	r3, r3, #31
 8009e48:	b087      	sub	sp, #28
 8009e4a:	bf18      	it	ne
 8009e4c:	3604      	addne	r6, #4
 8009e4e:	2500      	movs	r5, #0
 8009e50:	1f37      	subs	r7, r6, #4
 8009e52:	4690      	mov	r8, r2
 8009e54:	6802      	ldr	r2, [r0, #0]
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	4682      	mov	sl, r0
 8009e5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e5e:	46b9      	mov	r9, r7
 8009e60:	463c      	mov	r4, r7
 8009e62:	9502      	str	r5, [sp, #8]
 8009e64:	46ab      	mov	fp, r5
 8009e66:	7851      	ldrb	r1, [r2, #1]
 8009e68:	1c53      	adds	r3, r2, #1
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	b341      	cbz	r1, 8009ec0 <__hexnan+0x88>
 8009e6e:	4608      	mov	r0, r1
 8009e70:	9205      	str	r2, [sp, #20]
 8009e72:	9104      	str	r1, [sp, #16]
 8009e74:	f7ff fd5f 	bl	8009936 <__hexdig_fun>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d14f      	bne.n	8009f1c <__hexnan+0xe4>
 8009e7c:	9904      	ldr	r1, [sp, #16]
 8009e7e:	9a05      	ldr	r2, [sp, #20]
 8009e80:	2920      	cmp	r1, #32
 8009e82:	d818      	bhi.n	8009eb6 <__hexnan+0x7e>
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	459b      	cmp	fp, r3
 8009e88:	dd13      	ble.n	8009eb2 <__hexnan+0x7a>
 8009e8a:	454c      	cmp	r4, r9
 8009e8c:	d206      	bcs.n	8009e9c <__hexnan+0x64>
 8009e8e:	2d07      	cmp	r5, #7
 8009e90:	dc04      	bgt.n	8009e9c <__hexnan+0x64>
 8009e92:	462a      	mov	r2, r5
 8009e94:	4649      	mov	r1, r9
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7ff ffa8 	bl	8009dec <L_shift>
 8009e9c:	4544      	cmp	r4, r8
 8009e9e:	d950      	bls.n	8009f42 <__hexnan+0x10a>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8009eae:	464c      	mov	r4, r9
 8009eb0:	461d      	mov	r5, r3
 8009eb2:	9a03      	ldr	r2, [sp, #12]
 8009eb4:	e7d7      	b.n	8009e66 <__hexnan+0x2e>
 8009eb6:	2929      	cmp	r1, #41	; 0x29
 8009eb8:	d156      	bne.n	8009f68 <__hexnan+0x130>
 8009eba:	3202      	adds	r2, #2
 8009ebc:	f8ca 2000 	str.w	r2, [sl]
 8009ec0:	f1bb 0f00 	cmp.w	fp, #0
 8009ec4:	d050      	beq.n	8009f68 <__hexnan+0x130>
 8009ec6:	454c      	cmp	r4, r9
 8009ec8:	d206      	bcs.n	8009ed8 <__hexnan+0xa0>
 8009eca:	2d07      	cmp	r5, #7
 8009ecc:	dc04      	bgt.n	8009ed8 <__hexnan+0xa0>
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f7ff ff8a 	bl	8009dec <L_shift>
 8009ed8:	4544      	cmp	r4, r8
 8009eda:	d934      	bls.n	8009f46 <__hexnan+0x10e>
 8009edc:	f1a8 0204 	sub.w	r2, r8, #4
 8009ee0:	4623      	mov	r3, r4
 8009ee2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ee6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009eea:	429f      	cmp	r7, r3
 8009eec:	d2f9      	bcs.n	8009ee2 <__hexnan+0xaa>
 8009eee:	1b3b      	subs	r3, r7, r4
 8009ef0:	f023 0303 	bic.w	r3, r3, #3
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	3401      	adds	r4, #1
 8009ef8:	3e03      	subs	r6, #3
 8009efa:	42b4      	cmp	r4, r6
 8009efc:	bf88      	it	hi
 8009efe:	2304      	movhi	r3, #4
 8009f00:	4443      	add	r3, r8
 8009f02:	2200      	movs	r2, #0
 8009f04:	f843 2b04 	str.w	r2, [r3], #4
 8009f08:	429f      	cmp	r7, r3
 8009f0a:	d2fb      	bcs.n	8009f04 <__hexnan+0xcc>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	b91b      	cbnz	r3, 8009f18 <__hexnan+0xe0>
 8009f10:	4547      	cmp	r7, r8
 8009f12:	d127      	bne.n	8009f64 <__hexnan+0x12c>
 8009f14:	2301      	movs	r3, #1
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	2005      	movs	r0, #5
 8009f1a:	e026      	b.n	8009f6a <__hexnan+0x132>
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	2d08      	cmp	r5, #8
 8009f20:	f10b 0b01 	add.w	fp, fp, #1
 8009f24:	dd06      	ble.n	8009f34 <__hexnan+0xfc>
 8009f26:	4544      	cmp	r4, r8
 8009f28:	d9c3      	bls.n	8009eb2 <__hexnan+0x7a>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f30:	2501      	movs	r5, #1
 8009f32:	3c04      	subs	r4, #4
 8009f34:	6822      	ldr	r2, [r4, #0]
 8009f36:	f000 000f 	and.w	r0, r0, #15
 8009f3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f3e:	6022      	str	r2, [r4, #0]
 8009f40:	e7b7      	b.n	8009eb2 <__hexnan+0x7a>
 8009f42:	2508      	movs	r5, #8
 8009f44:	e7b5      	b.n	8009eb2 <__hexnan+0x7a>
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d0df      	beq.n	8009f0c <__hexnan+0xd4>
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f50:	f1c3 0320 	rsb	r3, r3, #32
 8009f54:	fa22 f303 	lsr.w	r3, r2, r3
 8009f58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f5c:	401a      	ands	r2, r3
 8009f5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f62:	e7d3      	b.n	8009f0c <__hexnan+0xd4>
 8009f64:	3f04      	subs	r7, #4
 8009f66:	e7d1      	b.n	8009f0c <__hexnan+0xd4>
 8009f68:	2004      	movs	r0, #4
 8009f6a:	b007      	add	sp, #28
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f70 <_localeconv_r>:
 8009f70:	4800      	ldr	r0, [pc, #0]	; (8009f74 <_localeconv_r+0x4>)
 8009f72:	4770      	bx	lr
 8009f74:	20000164 	.word	0x20000164

08009f78 <__retarget_lock_init_recursive>:
 8009f78:	4770      	bx	lr

08009f7a <__retarget_lock_acquire_recursive>:
 8009f7a:	4770      	bx	lr

08009f7c <__retarget_lock_release_recursive>:
 8009f7c:	4770      	bx	lr

08009f7e <__swhatbuf_r>:
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	460e      	mov	r6, r1
 8009f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f86:	2900      	cmp	r1, #0
 8009f88:	b096      	sub	sp, #88	; 0x58
 8009f8a:	4614      	mov	r4, r2
 8009f8c:	461d      	mov	r5, r3
 8009f8e:	da08      	bge.n	8009fa2 <__swhatbuf_r+0x24>
 8009f90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	602a      	str	r2, [r5, #0]
 8009f98:	061a      	lsls	r2, r3, #24
 8009f9a:	d410      	bmi.n	8009fbe <__swhatbuf_r+0x40>
 8009f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fa0:	e00e      	b.n	8009fc0 <__swhatbuf_r+0x42>
 8009fa2:	466a      	mov	r2, sp
 8009fa4:	f001 f9b6 	bl	800b314 <_fstat_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	dbf1      	blt.n	8009f90 <__swhatbuf_r+0x12>
 8009fac:	9a01      	ldr	r2, [sp, #4]
 8009fae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fb6:	425a      	negs	r2, r3
 8009fb8:	415a      	adcs	r2, r3
 8009fba:	602a      	str	r2, [r5, #0]
 8009fbc:	e7ee      	b.n	8009f9c <__swhatbuf_r+0x1e>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	6023      	str	r3, [r4, #0]
 8009fc4:	b016      	add	sp, #88	; 0x58
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}

08009fc8 <__smakebuf_r>:
 8009fc8:	898b      	ldrh	r3, [r1, #12]
 8009fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fcc:	079d      	lsls	r5, r3, #30
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	d507      	bpl.n	8009fe4 <__smakebuf_r+0x1c>
 8009fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	6123      	str	r3, [r4, #16]
 8009fdc:	2301      	movs	r3, #1
 8009fde:	6163      	str	r3, [r4, #20]
 8009fe0:	b002      	add	sp, #8
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	ab01      	add	r3, sp, #4
 8009fe6:	466a      	mov	r2, sp
 8009fe8:	f7ff ffc9 	bl	8009f7e <__swhatbuf_r>
 8009fec:	9900      	ldr	r1, [sp, #0]
 8009fee:	4605      	mov	r5, r0
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 fd95 	bl	800ab20 <_malloc_r>
 8009ff6:	b948      	cbnz	r0, 800a00c <__smakebuf_r+0x44>
 8009ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffc:	059a      	lsls	r2, r3, #22
 8009ffe:	d4ef      	bmi.n	8009fe0 <__smakebuf_r+0x18>
 800a000:	f023 0303 	bic.w	r3, r3, #3
 800a004:	f043 0302 	orr.w	r3, r3, #2
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	e7e3      	b.n	8009fd4 <__smakebuf_r+0xc>
 800a00c:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <__smakebuf_r+0x7c>)
 800a00e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	6020      	str	r0, [r4, #0]
 800a014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	6163      	str	r3, [r4, #20]
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	6120      	str	r0, [r4, #16]
 800a022:	b15b      	cbz	r3, 800a03c <__smakebuf_r+0x74>
 800a024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a028:	4630      	mov	r0, r6
 800a02a:	f001 f985 	bl	800b338 <_isatty_r>
 800a02e:	b128      	cbz	r0, 800a03c <__smakebuf_r+0x74>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f023 0303 	bic.w	r3, r3, #3
 800a036:	f043 0301 	orr.w	r3, r3, #1
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	89a0      	ldrh	r0, [r4, #12]
 800a03e:	4305      	orrs	r5, r0
 800a040:	81a5      	strh	r5, [r4, #12]
 800a042:	e7cd      	b.n	8009fe0 <__smakebuf_r+0x18>
 800a044:	080096f1 	.word	0x080096f1

0800a048 <malloc>:
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <malloc+0xc>)
 800a04a:	4601      	mov	r1, r0
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f000 bd67 	b.w	800ab20 <_malloc_r>
 800a052:	bf00      	nop
 800a054:	2000000c 	.word	0x2000000c

0800a058 <__ascii_mbtowc>:
 800a058:	b082      	sub	sp, #8
 800a05a:	b901      	cbnz	r1, 800a05e <__ascii_mbtowc+0x6>
 800a05c:	a901      	add	r1, sp, #4
 800a05e:	b142      	cbz	r2, 800a072 <__ascii_mbtowc+0x1a>
 800a060:	b14b      	cbz	r3, 800a076 <__ascii_mbtowc+0x1e>
 800a062:	7813      	ldrb	r3, [r2, #0]
 800a064:	600b      	str	r3, [r1, #0]
 800a066:	7812      	ldrb	r2, [r2, #0]
 800a068:	1e10      	subs	r0, r2, #0
 800a06a:	bf18      	it	ne
 800a06c:	2001      	movne	r0, #1
 800a06e:	b002      	add	sp, #8
 800a070:	4770      	bx	lr
 800a072:	4610      	mov	r0, r2
 800a074:	e7fb      	b.n	800a06e <__ascii_mbtowc+0x16>
 800a076:	f06f 0001 	mvn.w	r0, #1
 800a07a:	e7f8      	b.n	800a06e <__ascii_mbtowc+0x16>

0800a07c <memcpy>:
 800a07c:	440a      	add	r2, r1
 800a07e:	4291      	cmp	r1, r2
 800a080:	f100 33ff 	add.w	r3, r0, #4294967295
 800a084:	d100      	bne.n	800a088 <memcpy+0xc>
 800a086:	4770      	bx	lr
 800a088:	b510      	push	{r4, lr}
 800a08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a08e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a092:	4291      	cmp	r1, r2
 800a094:	d1f9      	bne.n	800a08a <memcpy+0xe>
 800a096:	bd10      	pop	{r4, pc}

0800a098 <_Balloc>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a09c:	4604      	mov	r4, r0
 800a09e:	460d      	mov	r5, r1
 800a0a0:	b976      	cbnz	r6, 800a0c0 <_Balloc+0x28>
 800a0a2:	2010      	movs	r0, #16
 800a0a4:	f7ff ffd0 	bl	800a048 <malloc>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a0ac:	b920      	cbnz	r0, 800a0b8 <_Balloc+0x20>
 800a0ae:	4b18      	ldr	r3, [pc, #96]	; (800a110 <_Balloc+0x78>)
 800a0b0:	4818      	ldr	r0, [pc, #96]	; (800a114 <_Balloc+0x7c>)
 800a0b2:	2166      	movs	r1, #102	; 0x66
 800a0b4:	f001 f8ee 	bl	800b294 <__assert_func>
 800a0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0bc:	6006      	str	r6, [r0, #0]
 800a0be:	60c6      	str	r6, [r0, #12]
 800a0c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0c2:	68f3      	ldr	r3, [r6, #12]
 800a0c4:	b183      	cbz	r3, 800a0e8 <_Balloc+0x50>
 800a0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ce:	b9b8      	cbnz	r0, 800a100 <_Balloc+0x68>
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0d6:	1d72      	adds	r2, r6, #5
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fc9d 	bl	800aa1a <_calloc_r>
 800a0e0:	b160      	cbz	r0, 800a0fc <_Balloc+0x64>
 800a0e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0e6:	e00e      	b.n	800a106 <_Balloc+0x6e>
 800a0e8:	2221      	movs	r2, #33	; 0x21
 800a0ea:	2104      	movs	r1, #4
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fc94 	bl	800aa1a <_calloc_r>
 800a0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f4:	60f0      	str	r0, [r6, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e4      	bne.n	800a0c6 <_Balloc+0x2e>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	6802      	ldr	r2, [r0, #0]
 800a102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a106:	2300      	movs	r3, #0
 800a108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a10c:	e7f7      	b.n	800a0fe <_Balloc+0x66>
 800a10e:	bf00      	nop
 800a110:	0800ba46 	.word	0x0800ba46
 800a114:	0800bba8 	.word	0x0800bba8

0800a118 <_Bfree>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a11c:	4605      	mov	r5, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	b976      	cbnz	r6, 800a140 <_Bfree+0x28>
 800a122:	2010      	movs	r0, #16
 800a124:	f7ff ff90 	bl	800a048 <malloc>
 800a128:	4602      	mov	r2, r0
 800a12a:	6268      	str	r0, [r5, #36]	; 0x24
 800a12c:	b920      	cbnz	r0, 800a138 <_Bfree+0x20>
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <_Bfree+0x3c>)
 800a130:	4809      	ldr	r0, [pc, #36]	; (800a158 <_Bfree+0x40>)
 800a132:	218a      	movs	r1, #138	; 0x8a
 800a134:	f001 f8ae 	bl	800b294 <__assert_func>
 800a138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a13c:	6006      	str	r6, [r0, #0]
 800a13e:	60c6      	str	r6, [r0, #12]
 800a140:	b13c      	cbz	r4, 800a152 <_Bfree+0x3a>
 800a142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a144:	6862      	ldr	r2, [r4, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a14c:	6021      	str	r1, [r4, #0]
 800a14e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	0800ba46 	.word	0x0800ba46
 800a158:	0800bba8 	.word	0x0800bba8

0800a15c <__multadd>:
 800a15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	690d      	ldr	r5, [r1, #16]
 800a162:	4607      	mov	r7, r0
 800a164:	460c      	mov	r4, r1
 800a166:	461e      	mov	r6, r3
 800a168:	f101 0c14 	add.w	ip, r1, #20
 800a16c:	2000      	movs	r0, #0
 800a16e:	f8dc 3000 	ldr.w	r3, [ip]
 800a172:	b299      	uxth	r1, r3
 800a174:	fb02 6101 	mla	r1, r2, r1, r6
 800a178:	0c1e      	lsrs	r6, r3, #16
 800a17a:	0c0b      	lsrs	r3, r1, #16
 800a17c:	fb02 3306 	mla	r3, r2, r6, r3
 800a180:	b289      	uxth	r1, r1
 800a182:	3001      	adds	r0, #1
 800a184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a188:	4285      	cmp	r5, r0
 800a18a:	f84c 1b04 	str.w	r1, [ip], #4
 800a18e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a192:	dcec      	bgt.n	800a16e <__multadd+0x12>
 800a194:	b30e      	cbz	r6, 800a1da <__multadd+0x7e>
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	42ab      	cmp	r3, r5
 800a19a:	dc19      	bgt.n	800a1d0 <__multadd+0x74>
 800a19c:	6861      	ldr	r1, [r4, #4]
 800a19e:	4638      	mov	r0, r7
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	f7ff ff79 	bl	800a098 <_Balloc>
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	b928      	cbnz	r0, 800a1b6 <__multadd+0x5a>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <__multadd+0x84>)
 800a1ae:	480d      	ldr	r0, [pc, #52]	; (800a1e4 <__multadd+0x88>)
 800a1b0:	21b5      	movs	r1, #181	; 0xb5
 800a1b2:	f001 f86f 	bl	800b294 <__assert_func>
 800a1b6:	6922      	ldr	r2, [r4, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	f104 010c 	add.w	r1, r4, #12
 800a1be:	0092      	lsls	r2, r2, #2
 800a1c0:	300c      	adds	r0, #12
 800a1c2:	f7ff ff5b 	bl	800a07c <memcpy>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff ffa5 	bl	800a118 <_Bfree>
 800a1ce:	4644      	mov	r4, r8
 800a1d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	615e      	str	r6, [r3, #20]
 800a1d8:	6125      	str	r5, [r4, #16]
 800a1da:	4620      	mov	r0, r4
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	0800bab8 	.word	0x0800bab8
 800a1e4:	0800bba8 	.word	0x0800bba8

0800a1e8 <__s2b>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4615      	mov	r5, r2
 800a1f0:	461f      	mov	r7, r3
 800a1f2:	2209      	movs	r2, #9
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	2201      	movs	r2, #1
 800a200:	429a      	cmp	r2, r3
 800a202:	db09      	blt.n	800a218 <__s2b+0x30>
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff ff47 	bl	800a098 <_Balloc>
 800a20a:	b940      	cbnz	r0, 800a21e <__s2b+0x36>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b19      	ldr	r3, [pc, #100]	; (800a274 <__s2b+0x8c>)
 800a210:	4819      	ldr	r0, [pc, #100]	; (800a278 <__s2b+0x90>)
 800a212:	21ce      	movs	r1, #206	; 0xce
 800a214:	f001 f83e 	bl	800b294 <__assert_func>
 800a218:	0052      	lsls	r2, r2, #1
 800a21a:	3101      	adds	r1, #1
 800a21c:	e7f0      	b.n	800a200 <__s2b+0x18>
 800a21e:	9b08      	ldr	r3, [sp, #32]
 800a220:	6143      	str	r3, [r0, #20]
 800a222:	2d09      	cmp	r5, #9
 800a224:	f04f 0301 	mov.w	r3, #1
 800a228:	6103      	str	r3, [r0, #16]
 800a22a:	dd16      	ble.n	800a25a <__s2b+0x72>
 800a22c:	f104 0909 	add.w	r9, r4, #9
 800a230:	46c8      	mov	r8, r9
 800a232:	442c      	add	r4, r5
 800a234:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a238:	4601      	mov	r1, r0
 800a23a:	3b30      	subs	r3, #48	; 0x30
 800a23c:	220a      	movs	r2, #10
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ff8c 	bl	800a15c <__multadd>
 800a244:	45a0      	cmp	r8, r4
 800a246:	d1f5      	bne.n	800a234 <__s2b+0x4c>
 800a248:	f1a5 0408 	sub.w	r4, r5, #8
 800a24c:	444c      	add	r4, r9
 800a24e:	1b2d      	subs	r5, r5, r4
 800a250:	1963      	adds	r3, r4, r5
 800a252:	42bb      	cmp	r3, r7
 800a254:	db04      	blt.n	800a260 <__s2b+0x78>
 800a256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25a:	340a      	adds	r4, #10
 800a25c:	2509      	movs	r5, #9
 800a25e:	e7f6      	b.n	800a24e <__s2b+0x66>
 800a260:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a264:	4601      	mov	r1, r0
 800a266:	3b30      	subs	r3, #48	; 0x30
 800a268:	220a      	movs	r2, #10
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ff76 	bl	800a15c <__multadd>
 800a270:	e7ee      	b.n	800a250 <__s2b+0x68>
 800a272:	bf00      	nop
 800a274:	0800bab8 	.word	0x0800bab8
 800a278:	0800bba8 	.word	0x0800bba8

0800a27c <__hi0bits>:
 800a27c:	0c03      	lsrs	r3, r0, #16
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	b9d3      	cbnz	r3, 800a2b8 <__hi0bits+0x3c>
 800a282:	0400      	lsls	r0, r0, #16
 800a284:	2310      	movs	r3, #16
 800a286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a28a:	bf04      	itt	eq
 800a28c:	0200      	lsleq	r0, r0, #8
 800a28e:	3308      	addeq	r3, #8
 800a290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a294:	bf04      	itt	eq
 800a296:	0100      	lsleq	r0, r0, #4
 800a298:	3304      	addeq	r3, #4
 800a29a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a29e:	bf04      	itt	eq
 800a2a0:	0080      	lsleq	r0, r0, #2
 800a2a2:	3302      	addeq	r3, #2
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	db05      	blt.n	800a2b4 <__hi0bits+0x38>
 800a2a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2ac:	f103 0301 	add.w	r3, r3, #1
 800a2b0:	bf08      	it	eq
 800a2b2:	2320      	moveq	r3, #32
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	4770      	bx	lr
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e7e4      	b.n	800a286 <__hi0bits+0xa>

0800a2bc <__lo0bits>:
 800a2bc:	6803      	ldr	r3, [r0, #0]
 800a2be:	f013 0207 	ands.w	r2, r3, #7
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	d00b      	beq.n	800a2de <__lo0bits+0x22>
 800a2c6:	07da      	lsls	r2, r3, #31
 800a2c8:	d423      	bmi.n	800a312 <__lo0bits+0x56>
 800a2ca:	0798      	lsls	r0, r3, #30
 800a2cc:	bf49      	itett	mi
 800a2ce:	085b      	lsrmi	r3, r3, #1
 800a2d0:	089b      	lsrpl	r3, r3, #2
 800a2d2:	2001      	movmi	r0, #1
 800a2d4:	600b      	strmi	r3, [r1, #0]
 800a2d6:	bf5c      	itt	pl
 800a2d8:	600b      	strpl	r3, [r1, #0]
 800a2da:	2002      	movpl	r0, #2
 800a2dc:	4770      	bx	lr
 800a2de:	b298      	uxth	r0, r3
 800a2e0:	b9a8      	cbnz	r0, 800a30e <__lo0bits+0x52>
 800a2e2:	0c1b      	lsrs	r3, r3, #16
 800a2e4:	2010      	movs	r0, #16
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	b90a      	cbnz	r2, 800a2ee <__lo0bits+0x32>
 800a2ea:	3008      	adds	r0, #8
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	071a      	lsls	r2, r3, #28
 800a2f0:	bf04      	itt	eq
 800a2f2:	091b      	lsreq	r3, r3, #4
 800a2f4:	3004      	addeq	r0, #4
 800a2f6:	079a      	lsls	r2, r3, #30
 800a2f8:	bf04      	itt	eq
 800a2fa:	089b      	lsreq	r3, r3, #2
 800a2fc:	3002      	addeq	r0, #2
 800a2fe:	07da      	lsls	r2, r3, #31
 800a300:	d403      	bmi.n	800a30a <__lo0bits+0x4e>
 800a302:	085b      	lsrs	r3, r3, #1
 800a304:	f100 0001 	add.w	r0, r0, #1
 800a308:	d005      	beq.n	800a316 <__lo0bits+0x5a>
 800a30a:	600b      	str	r3, [r1, #0]
 800a30c:	4770      	bx	lr
 800a30e:	4610      	mov	r0, r2
 800a310:	e7e9      	b.n	800a2e6 <__lo0bits+0x2a>
 800a312:	2000      	movs	r0, #0
 800a314:	4770      	bx	lr
 800a316:	2020      	movs	r0, #32
 800a318:	4770      	bx	lr
	...

0800a31c <__i2b>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	460c      	mov	r4, r1
 800a320:	2101      	movs	r1, #1
 800a322:	f7ff feb9 	bl	800a098 <_Balloc>
 800a326:	4602      	mov	r2, r0
 800a328:	b928      	cbnz	r0, 800a336 <__i2b+0x1a>
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <__i2b+0x24>)
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <__i2b+0x28>)
 800a32e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a332:	f000 ffaf 	bl	800b294 <__assert_func>
 800a336:	2301      	movs	r3, #1
 800a338:	6144      	str	r4, [r0, #20]
 800a33a:	6103      	str	r3, [r0, #16]
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	bf00      	nop
 800a340:	0800bab8 	.word	0x0800bab8
 800a344:	0800bba8 	.word	0x0800bba8

0800a348 <__multiply>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	4691      	mov	r9, r2
 800a34e:	690a      	ldr	r2, [r1, #16]
 800a350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a354:	429a      	cmp	r2, r3
 800a356:	bfb8      	it	lt
 800a358:	460b      	movlt	r3, r1
 800a35a:	460c      	mov	r4, r1
 800a35c:	bfbc      	itt	lt
 800a35e:	464c      	movlt	r4, r9
 800a360:	4699      	movlt	r9, r3
 800a362:	6927      	ldr	r7, [r4, #16]
 800a364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	6861      	ldr	r1, [r4, #4]
 800a36c:	eb07 060a 	add.w	r6, r7, sl
 800a370:	42b3      	cmp	r3, r6
 800a372:	b085      	sub	sp, #20
 800a374:	bfb8      	it	lt
 800a376:	3101      	addlt	r1, #1
 800a378:	f7ff fe8e 	bl	800a098 <_Balloc>
 800a37c:	b930      	cbnz	r0, 800a38c <__multiply+0x44>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b44      	ldr	r3, [pc, #272]	; (800a494 <__multiply+0x14c>)
 800a382:	4845      	ldr	r0, [pc, #276]	; (800a498 <__multiply+0x150>)
 800a384:	f240 115d 	movw	r1, #349	; 0x15d
 800a388:	f000 ff84 	bl	800b294 <__assert_func>
 800a38c:	f100 0514 	add.w	r5, r0, #20
 800a390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a394:	462b      	mov	r3, r5
 800a396:	2200      	movs	r2, #0
 800a398:	4543      	cmp	r3, r8
 800a39a:	d321      	bcc.n	800a3e0 <__multiply+0x98>
 800a39c:	f104 0314 	add.w	r3, r4, #20
 800a3a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3a4:	f109 0314 	add.w	r3, r9, #20
 800a3a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3ac:	9202      	str	r2, [sp, #8]
 800a3ae:	1b3a      	subs	r2, r7, r4
 800a3b0:	3a15      	subs	r2, #21
 800a3b2:	f022 0203 	bic.w	r2, r2, #3
 800a3b6:	3204      	adds	r2, #4
 800a3b8:	f104 0115 	add.w	r1, r4, #21
 800a3bc:	428f      	cmp	r7, r1
 800a3be:	bf38      	it	cc
 800a3c0:	2204      	movcc	r2, #4
 800a3c2:	9201      	str	r2, [sp, #4]
 800a3c4:	9a02      	ldr	r2, [sp, #8]
 800a3c6:	9303      	str	r3, [sp, #12]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d80c      	bhi.n	800a3e6 <__multiply+0x9e>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	dd03      	ble.n	800a3d8 <__multiply+0x90>
 800a3d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d05a      	beq.n	800a48e <__multiply+0x146>
 800a3d8:	6106      	str	r6, [r0, #16]
 800a3da:	b005      	add	sp, #20
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	f843 2b04 	str.w	r2, [r3], #4
 800a3e4:	e7d8      	b.n	800a398 <__multiply+0x50>
 800a3e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3ea:	f1ba 0f00 	cmp.w	sl, #0
 800a3ee:	d024      	beq.n	800a43a <__multiply+0xf2>
 800a3f0:	f104 0e14 	add.w	lr, r4, #20
 800a3f4:	46a9      	mov	r9, r5
 800a3f6:	f04f 0c00 	mov.w	ip, #0
 800a3fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3fe:	f8d9 1000 	ldr.w	r1, [r9]
 800a402:	fa1f fb82 	uxth.w	fp, r2
 800a406:	b289      	uxth	r1, r1
 800a408:	fb0a 110b 	mla	r1, sl, fp, r1
 800a40c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a410:	f8d9 2000 	ldr.w	r2, [r9]
 800a414:	4461      	add	r1, ip
 800a416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a41a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a41e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a422:	b289      	uxth	r1, r1
 800a424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a428:	4577      	cmp	r7, lr
 800a42a:	f849 1b04 	str.w	r1, [r9], #4
 800a42e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a432:	d8e2      	bhi.n	800a3fa <__multiply+0xb2>
 800a434:	9a01      	ldr	r2, [sp, #4]
 800a436:	f845 c002 	str.w	ip, [r5, r2]
 800a43a:	9a03      	ldr	r2, [sp, #12]
 800a43c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a440:	3304      	adds	r3, #4
 800a442:	f1b9 0f00 	cmp.w	r9, #0
 800a446:	d020      	beq.n	800a48a <__multiply+0x142>
 800a448:	6829      	ldr	r1, [r5, #0]
 800a44a:	f104 0c14 	add.w	ip, r4, #20
 800a44e:	46ae      	mov	lr, r5
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	f8bc b000 	ldrh.w	fp, [ip]
 800a458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a45c:	fb09 220b 	mla	r2, r9, fp, r2
 800a460:	4492      	add	sl, r2
 800a462:	b289      	uxth	r1, r1
 800a464:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a468:	f84e 1b04 	str.w	r1, [lr], #4
 800a46c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a470:	f8be 1000 	ldrh.w	r1, [lr]
 800a474:	0c12      	lsrs	r2, r2, #16
 800a476:	fb09 1102 	mla	r1, r9, r2, r1
 800a47a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a47e:	4567      	cmp	r7, ip
 800a480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a484:	d8e6      	bhi.n	800a454 <__multiply+0x10c>
 800a486:	9a01      	ldr	r2, [sp, #4]
 800a488:	50a9      	str	r1, [r5, r2]
 800a48a:	3504      	adds	r5, #4
 800a48c:	e79a      	b.n	800a3c4 <__multiply+0x7c>
 800a48e:	3e01      	subs	r6, #1
 800a490:	e79c      	b.n	800a3cc <__multiply+0x84>
 800a492:	bf00      	nop
 800a494:	0800bab8 	.word	0x0800bab8
 800a498:	0800bba8 	.word	0x0800bba8

0800a49c <__pow5mult>:
 800a49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a0:	4615      	mov	r5, r2
 800a4a2:	f012 0203 	ands.w	r2, r2, #3
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	d007      	beq.n	800a4bc <__pow5mult+0x20>
 800a4ac:	4c25      	ldr	r4, [pc, #148]	; (800a544 <__pow5mult+0xa8>)
 800a4ae:	3a01      	subs	r2, #1
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4b6:	f7ff fe51 	bl	800a15c <__multadd>
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	10ad      	asrs	r5, r5, #2
 800a4be:	d03d      	beq.n	800a53c <__pow5mult+0xa0>
 800a4c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4c2:	b97c      	cbnz	r4, 800a4e4 <__pow5mult+0x48>
 800a4c4:	2010      	movs	r0, #16
 800a4c6:	f7ff fdbf 	bl	800a048 <malloc>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	6270      	str	r0, [r6, #36]	; 0x24
 800a4ce:	b928      	cbnz	r0, 800a4dc <__pow5mult+0x40>
 800a4d0:	4b1d      	ldr	r3, [pc, #116]	; (800a548 <__pow5mult+0xac>)
 800a4d2:	481e      	ldr	r0, [pc, #120]	; (800a54c <__pow5mult+0xb0>)
 800a4d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4d8:	f000 fedc 	bl	800b294 <__assert_func>
 800a4dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4e0:	6004      	str	r4, [r0, #0]
 800a4e2:	60c4      	str	r4, [r0, #12]
 800a4e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4ec:	b94c      	cbnz	r4, 800a502 <__pow5mult+0x66>
 800a4ee:	f240 2171 	movw	r1, #625	; 0x271
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7ff ff12 	bl	800a31c <__i2b>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4fe:	4604      	mov	r4, r0
 800a500:	6003      	str	r3, [r0, #0]
 800a502:	f04f 0900 	mov.w	r9, #0
 800a506:	07eb      	lsls	r3, r5, #31
 800a508:	d50a      	bpl.n	800a520 <__pow5mult+0x84>
 800a50a:	4639      	mov	r1, r7
 800a50c:	4622      	mov	r2, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff ff1a 	bl	800a348 <__multiply>
 800a514:	4639      	mov	r1, r7
 800a516:	4680      	mov	r8, r0
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff fdfd 	bl	800a118 <_Bfree>
 800a51e:	4647      	mov	r7, r8
 800a520:	106d      	asrs	r5, r5, #1
 800a522:	d00b      	beq.n	800a53c <__pow5mult+0xa0>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	b938      	cbnz	r0, 800a538 <__pow5mult+0x9c>
 800a528:	4622      	mov	r2, r4
 800a52a:	4621      	mov	r1, r4
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7ff ff0b 	bl	800a348 <__multiply>
 800a532:	6020      	str	r0, [r4, #0]
 800a534:	f8c0 9000 	str.w	r9, [r0]
 800a538:	4604      	mov	r4, r0
 800a53a:	e7e4      	b.n	800a506 <__pow5mult+0x6a>
 800a53c:	4638      	mov	r0, r7
 800a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a542:	bf00      	nop
 800a544:	0800bcf8 	.word	0x0800bcf8
 800a548:	0800ba46 	.word	0x0800ba46
 800a54c:	0800bba8 	.word	0x0800bba8

0800a550 <__lshift>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	460c      	mov	r4, r1
 800a556:	6849      	ldr	r1, [r1, #4]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	4607      	mov	r7, r0
 800a562:	4691      	mov	r9, r2
 800a564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a568:	f108 0601 	add.w	r6, r8, #1
 800a56c:	42b3      	cmp	r3, r6
 800a56e:	db0b      	blt.n	800a588 <__lshift+0x38>
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff fd91 	bl	800a098 <_Balloc>
 800a576:	4605      	mov	r5, r0
 800a578:	b948      	cbnz	r0, 800a58e <__lshift+0x3e>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <__lshift+0xd8>)
 800a57e:	482b      	ldr	r0, [pc, #172]	; (800a62c <__lshift+0xdc>)
 800a580:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a584:	f000 fe86 	bl	800b294 <__assert_func>
 800a588:	3101      	adds	r1, #1
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	e7ee      	b.n	800a56c <__lshift+0x1c>
 800a58e:	2300      	movs	r3, #0
 800a590:	f100 0114 	add.w	r1, r0, #20
 800a594:	f100 0210 	add.w	r2, r0, #16
 800a598:	4618      	mov	r0, r3
 800a59a:	4553      	cmp	r3, sl
 800a59c:	db37      	blt.n	800a60e <__lshift+0xbe>
 800a59e:	6920      	ldr	r0, [r4, #16]
 800a5a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5a4:	f104 0314 	add.w	r3, r4, #20
 800a5a8:	f019 091f 	ands.w	r9, r9, #31
 800a5ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5b4:	d02f      	beq.n	800a616 <__lshift+0xc6>
 800a5b6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ba:	468a      	mov	sl, r1
 800a5bc:	f04f 0c00 	mov.w	ip, #0
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	fa02 f209 	lsl.w	r2, r2, r9
 800a5c6:	ea42 020c 	orr.w	r2, r2, ip
 800a5ca:	f84a 2b04 	str.w	r2, [sl], #4
 800a5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d2:	4298      	cmp	r0, r3
 800a5d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a5d8:	d8f2      	bhi.n	800a5c0 <__lshift+0x70>
 800a5da:	1b03      	subs	r3, r0, r4
 800a5dc:	3b15      	subs	r3, #21
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	f104 0215 	add.w	r2, r4, #21
 800a5e8:	4290      	cmp	r0, r2
 800a5ea:	bf38      	it	cc
 800a5ec:	2304      	movcc	r3, #4
 800a5ee:	f841 c003 	str.w	ip, [r1, r3]
 800a5f2:	f1bc 0f00 	cmp.w	ip, #0
 800a5f6:	d001      	beq.n	800a5fc <__lshift+0xac>
 800a5f8:	f108 0602 	add.w	r6, r8, #2
 800a5fc:	3e01      	subs	r6, #1
 800a5fe:	4638      	mov	r0, r7
 800a600:	612e      	str	r6, [r5, #16]
 800a602:	4621      	mov	r1, r4
 800a604:	f7ff fd88 	bl	800a118 <_Bfree>
 800a608:	4628      	mov	r0, r5
 800a60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a612:	3301      	adds	r3, #1
 800a614:	e7c1      	b.n	800a59a <__lshift+0x4a>
 800a616:	3904      	subs	r1, #4
 800a618:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a620:	4298      	cmp	r0, r3
 800a622:	d8f9      	bhi.n	800a618 <__lshift+0xc8>
 800a624:	e7ea      	b.n	800a5fc <__lshift+0xac>
 800a626:	bf00      	nop
 800a628:	0800bab8 	.word	0x0800bab8
 800a62c:	0800bba8 	.word	0x0800bba8

0800a630 <__mcmp>:
 800a630:	b530      	push	{r4, r5, lr}
 800a632:	6902      	ldr	r2, [r0, #16]
 800a634:	690c      	ldr	r4, [r1, #16]
 800a636:	1b12      	subs	r2, r2, r4
 800a638:	d10e      	bne.n	800a658 <__mcmp+0x28>
 800a63a:	f100 0314 	add.w	r3, r0, #20
 800a63e:	3114      	adds	r1, #20
 800a640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a64c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a650:	42a5      	cmp	r5, r4
 800a652:	d003      	beq.n	800a65c <__mcmp+0x2c>
 800a654:	d305      	bcc.n	800a662 <__mcmp+0x32>
 800a656:	2201      	movs	r2, #1
 800a658:	4610      	mov	r0, r2
 800a65a:	bd30      	pop	{r4, r5, pc}
 800a65c:	4283      	cmp	r3, r0
 800a65e:	d3f3      	bcc.n	800a648 <__mcmp+0x18>
 800a660:	e7fa      	b.n	800a658 <__mcmp+0x28>
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	e7f7      	b.n	800a658 <__mcmp+0x28>

0800a668 <__mdiff>:
 800a668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	460c      	mov	r4, r1
 800a66e:	4606      	mov	r6, r0
 800a670:	4611      	mov	r1, r2
 800a672:	4620      	mov	r0, r4
 800a674:	4690      	mov	r8, r2
 800a676:	f7ff ffdb 	bl	800a630 <__mcmp>
 800a67a:	1e05      	subs	r5, r0, #0
 800a67c:	d110      	bne.n	800a6a0 <__mdiff+0x38>
 800a67e:	4629      	mov	r1, r5
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff fd09 	bl	800a098 <_Balloc>
 800a686:	b930      	cbnz	r0, 800a696 <__mdiff+0x2e>
 800a688:	4b3a      	ldr	r3, [pc, #232]	; (800a774 <__mdiff+0x10c>)
 800a68a:	4602      	mov	r2, r0
 800a68c:	f240 2132 	movw	r1, #562	; 0x232
 800a690:	4839      	ldr	r0, [pc, #228]	; (800a778 <__mdiff+0x110>)
 800a692:	f000 fdff 	bl	800b294 <__assert_func>
 800a696:	2301      	movs	r3, #1
 800a698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a69c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	bfa4      	itt	ge
 800a6a2:	4643      	movge	r3, r8
 800a6a4:	46a0      	movge	r8, r4
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6ac:	bfa6      	itte	ge
 800a6ae:	461c      	movge	r4, r3
 800a6b0:	2500      	movge	r5, #0
 800a6b2:	2501      	movlt	r5, #1
 800a6b4:	f7ff fcf0 	bl	800a098 <_Balloc>
 800a6b8:	b920      	cbnz	r0, 800a6c4 <__mdiff+0x5c>
 800a6ba:	4b2e      	ldr	r3, [pc, #184]	; (800a774 <__mdiff+0x10c>)
 800a6bc:	4602      	mov	r2, r0
 800a6be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6c2:	e7e5      	b.n	800a690 <__mdiff+0x28>
 800a6c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6c8:	6926      	ldr	r6, [r4, #16]
 800a6ca:	60c5      	str	r5, [r0, #12]
 800a6cc:	f104 0914 	add.w	r9, r4, #20
 800a6d0:	f108 0514 	add.w	r5, r8, #20
 800a6d4:	f100 0e14 	add.w	lr, r0, #20
 800a6d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6e0:	f108 0210 	add.w	r2, r8, #16
 800a6e4:	46f2      	mov	sl, lr
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6f0:	fa1f f883 	uxth.w	r8, r3
 800a6f4:	fa11 f18b 	uxtah	r1, r1, fp
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	eba1 0808 	sub.w	r8, r1, r8
 800a6fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a706:	fa1f f888 	uxth.w	r8, r8
 800a70a:	1419      	asrs	r1, r3, #16
 800a70c:	454e      	cmp	r6, r9
 800a70e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a712:	f84a 3b04 	str.w	r3, [sl], #4
 800a716:	d8e7      	bhi.n	800a6e8 <__mdiff+0x80>
 800a718:	1b33      	subs	r3, r6, r4
 800a71a:	3b15      	subs	r3, #21
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	3304      	adds	r3, #4
 800a722:	3415      	adds	r4, #21
 800a724:	42a6      	cmp	r6, r4
 800a726:	bf38      	it	cc
 800a728:	2304      	movcc	r3, #4
 800a72a:	441d      	add	r5, r3
 800a72c:	4473      	add	r3, lr
 800a72e:	469e      	mov	lr, r3
 800a730:	462e      	mov	r6, r5
 800a732:	4566      	cmp	r6, ip
 800a734:	d30e      	bcc.n	800a754 <__mdiff+0xec>
 800a736:	f10c 0203 	add.w	r2, ip, #3
 800a73a:	1b52      	subs	r2, r2, r5
 800a73c:	f022 0203 	bic.w	r2, r2, #3
 800a740:	3d03      	subs	r5, #3
 800a742:	45ac      	cmp	ip, r5
 800a744:	bf38      	it	cc
 800a746:	2200      	movcc	r2, #0
 800a748:	441a      	add	r2, r3
 800a74a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a74e:	b17b      	cbz	r3, 800a770 <__mdiff+0x108>
 800a750:	6107      	str	r7, [r0, #16]
 800a752:	e7a3      	b.n	800a69c <__mdiff+0x34>
 800a754:	f856 8b04 	ldr.w	r8, [r6], #4
 800a758:	fa11 f288 	uxtah	r2, r1, r8
 800a75c:	1414      	asrs	r4, r2, #16
 800a75e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a762:	b292      	uxth	r2, r2
 800a764:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a768:	f84e 2b04 	str.w	r2, [lr], #4
 800a76c:	1421      	asrs	r1, r4, #16
 800a76e:	e7e0      	b.n	800a732 <__mdiff+0xca>
 800a770:	3f01      	subs	r7, #1
 800a772:	e7ea      	b.n	800a74a <__mdiff+0xe2>
 800a774:	0800bab8 	.word	0x0800bab8
 800a778:	0800bba8 	.word	0x0800bba8

0800a77c <__ulp>:
 800a77c:	b082      	sub	sp, #8
 800a77e:	ed8d 0b00 	vstr	d0, [sp]
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	4912      	ldr	r1, [pc, #72]	; (800a7d0 <__ulp+0x54>)
 800a786:	4019      	ands	r1, r3
 800a788:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a78c:	2900      	cmp	r1, #0
 800a78e:	dd05      	ble.n	800a79c <__ulp+0x20>
 800a790:	2200      	movs	r2, #0
 800a792:	460b      	mov	r3, r1
 800a794:	ec43 2b10 	vmov	d0, r2, r3
 800a798:	b002      	add	sp, #8
 800a79a:	4770      	bx	lr
 800a79c:	4249      	negs	r1, r1
 800a79e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	da04      	bge.n	800a7ba <__ulp+0x3e>
 800a7b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7b4:	fa41 f300 	asr.w	r3, r1, r0
 800a7b8:	e7ec      	b.n	800a794 <__ulp+0x18>
 800a7ba:	f1a0 0114 	sub.w	r1, r0, #20
 800a7be:	291e      	cmp	r1, #30
 800a7c0:	bfda      	itte	le
 800a7c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a7c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a7ca:	2101      	movgt	r1, #1
 800a7cc:	460a      	mov	r2, r1
 800a7ce:	e7e1      	b.n	800a794 <__ulp+0x18>
 800a7d0:	7ff00000 	.word	0x7ff00000

0800a7d4 <__b2d>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	6905      	ldr	r5, [r0, #16]
 800a7d8:	f100 0714 	add.w	r7, r0, #20
 800a7dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a7e0:	1f2e      	subs	r6, r5, #4
 800a7e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff fd48 	bl	800a27c <__hi0bits>
 800a7ec:	f1c0 0320 	rsb	r3, r0, #32
 800a7f0:	280a      	cmp	r0, #10
 800a7f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a870 <__b2d+0x9c>
 800a7f6:	600b      	str	r3, [r1, #0]
 800a7f8:	dc14      	bgt.n	800a824 <__b2d+0x50>
 800a7fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800a802:	42b7      	cmp	r7, r6
 800a804:	ea41 030c 	orr.w	r3, r1, ip
 800a808:	bf34      	ite	cc
 800a80a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a80e:	2100      	movcs	r1, #0
 800a810:	3015      	adds	r0, #21
 800a812:	fa04 f000 	lsl.w	r0, r4, r0
 800a816:	fa21 f10e 	lsr.w	r1, r1, lr
 800a81a:	ea40 0201 	orr.w	r2, r0, r1
 800a81e:	ec43 2b10 	vmov	d0, r2, r3
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a824:	42b7      	cmp	r7, r6
 800a826:	bf3a      	itte	cc
 800a828:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a82c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a830:	2100      	movcs	r1, #0
 800a832:	380b      	subs	r0, #11
 800a834:	d017      	beq.n	800a866 <__b2d+0x92>
 800a836:	f1c0 0c20 	rsb	ip, r0, #32
 800a83a:	fa04 f500 	lsl.w	r5, r4, r0
 800a83e:	42be      	cmp	r6, r7
 800a840:	fa21 f40c 	lsr.w	r4, r1, ip
 800a844:	ea45 0504 	orr.w	r5, r5, r4
 800a848:	bf8c      	ite	hi
 800a84a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a84e:	2400      	movls	r4, #0
 800a850:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a854:	fa01 f000 	lsl.w	r0, r1, r0
 800a858:	fa24 f40c 	lsr.w	r4, r4, ip
 800a85c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a860:	ea40 0204 	orr.w	r2, r0, r4
 800a864:	e7db      	b.n	800a81e <__b2d+0x4a>
 800a866:	ea44 030c 	orr.w	r3, r4, ip
 800a86a:	460a      	mov	r2, r1
 800a86c:	e7d7      	b.n	800a81e <__b2d+0x4a>
 800a86e:	bf00      	nop
 800a870:	3ff00000 	.word	0x3ff00000

0800a874 <__d2b>:
 800a874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a878:	4689      	mov	r9, r1
 800a87a:	2101      	movs	r1, #1
 800a87c:	ec57 6b10 	vmov	r6, r7, d0
 800a880:	4690      	mov	r8, r2
 800a882:	f7ff fc09 	bl	800a098 <_Balloc>
 800a886:	4604      	mov	r4, r0
 800a888:	b930      	cbnz	r0, 800a898 <__d2b+0x24>
 800a88a:	4602      	mov	r2, r0
 800a88c:	4b25      	ldr	r3, [pc, #148]	; (800a924 <__d2b+0xb0>)
 800a88e:	4826      	ldr	r0, [pc, #152]	; (800a928 <__d2b+0xb4>)
 800a890:	f240 310a 	movw	r1, #778	; 0x30a
 800a894:	f000 fcfe 	bl	800b294 <__assert_func>
 800a898:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a89c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8a0:	bb35      	cbnz	r5, 800a8f0 <__d2b+0x7c>
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	d028      	beq.n	800a8fa <__d2b+0x86>
 800a8a8:	4668      	mov	r0, sp
 800a8aa:	9600      	str	r6, [sp, #0]
 800a8ac:	f7ff fd06 	bl	800a2bc <__lo0bits>
 800a8b0:	9900      	ldr	r1, [sp, #0]
 800a8b2:	b300      	cbz	r0, 800a8f6 <__d2b+0x82>
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	f1c0 0320 	rsb	r3, r0, #32
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	430b      	orrs	r3, r1
 800a8c0:	40c2      	lsrs	r2, r0
 800a8c2:	6163      	str	r3, [r4, #20]
 800a8c4:	9201      	str	r2, [sp, #4]
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	61a3      	str	r3, [r4, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bf14      	ite	ne
 800a8ce:	2202      	movne	r2, #2
 800a8d0:	2201      	moveq	r2, #1
 800a8d2:	6122      	str	r2, [r4, #16]
 800a8d4:	b1d5      	cbz	r5, 800a90c <__d2b+0x98>
 800a8d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8da:	4405      	add	r5, r0
 800a8dc:	f8c9 5000 	str.w	r5, [r9]
 800a8e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8e4:	f8c8 0000 	str.w	r0, [r8]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	b003      	add	sp, #12
 800a8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8f4:	e7d5      	b.n	800a8a2 <__d2b+0x2e>
 800a8f6:	6161      	str	r1, [r4, #20]
 800a8f8:	e7e5      	b.n	800a8c6 <__d2b+0x52>
 800a8fa:	a801      	add	r0, sp, #4
 800a8fc:	f7ff fcde 	bl	800a2bc <__lo0bits>
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	6163      	str	r3, [r4, #20]
 800a904:	2201      	movs	r2, #1
 800a906:	6122      	str	r2, [r4, #16]
 800a908:	3020      	adds	r0, #32
 800a90a:	e7e3      	b.n	800a8d4 <__d2b+0x60>
 800a90c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a914:	f8c9 0000 	str.w	r0, [r9]
 800a918:	6918      	ldr	r0, [r3, #16]
 800a91a:	f7ff fcaf 	bl	800a27c <__hi0bits>
 800a91e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a922:	e7df      	b.n	800a8e4 <__d2b+0x70>
 800a924:	0800bab8 	.word	0x0800bab8
 800a928:	0800bba8 	.word	0x0800bba8

0800a92c <__ratio>:
 800a92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a930:	4688      	mov	r8, r1
 800a932:	4669      	mov	r1, sp
 800a934:	4681      	mov	r9, r0
 800a936:	f7ff ff4d 	bl	800a7d4 <__b2d>
 800a93a:	a901      	add	r1, sp, #4
 800a93c:	4640      	mov	r0, r8
 800a93e:	ec55 4b10 	vmov	r4, r5, d0
 800a942:	f7ff ff47 	bl	800a7d4 <__b2d>
 800a946:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a94a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a94e:	eba3 0c02 	sub.w	ip, r3, r2
 800a952:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a95c:	ec51 0b10 	vmov	r0, r1, d0
 800a960:	2b00      	cmp	r3, #0
 800a962:	bfd6      	itet	le
 800a964:	460a      	movle	r2, r1
 800a966:	462a      	movgt	r2, r5
 800a968:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a96c:	468b      	mov	fp, r1
 800a96e:	462f      	mov	r7, r5
 800a970:	bfd4      	ite	le
 800a972:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a976:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a97a:	4620      	mov	r0, r4
 800a97c:	ee10 2a10 	vmov	r2, s0
 800a980:	465b      	mov	r3, fp
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 ff8a 	bl	800089c <__aeabi_ddiv>
 800a988:	ec41 0b10 	vmov	d0, r0, r1
 800a98c:	b003      	add	sp, #12
 800a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a992 <__copybits>:
 800a992:	3901      	subs	r1, #1
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	1149      	asrs	r1, r1, #5
 800a998:	6914      	ldr	r4, [r2, #16]
 800a99a:	3101      	adds	r1, #1
 800a99c:	f102 0314 	add.w	r3, r2, #20
 800a9a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9a8:	1f05      	subs	r5, r0, #4
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	d30c      	bcc.n	800a9c8 <__copybits+0x36>
 800a9ae:	1aa3      	subs	r3, r4, r2
 800a9b0:	3b11      	subs	r3, #17
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3211      	adds	r2, #17
 800a9b8:	42a2      	cmp	r2, r4
 800a9ba:	bf88      	it	hi
 800a9bc:	2300      	movhi	r3, #0
 800a9be:	4418      	add	r0, r3
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4288      	cmp	r0, r1
 800a9c4:	d305      	bcc.n	800a9d2 <__copybits+0x40>
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}
 800a9c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9d0:	e7eb      	b.n	800a9aa <__copybits+0x18>
 800a9d2:	f840 3b04 	str.w	r3, [r0], #4
 800a9d6:	e7f4      	b.n	800a9c2 <__copybits+0x30>

0800a9d8 <__any_on>:
 800a9d8:	f100 0214 	add.w	r2, r0, #20
 800a9dc:	6900      	ldr	r0, [r0, #16]
 800a9de:	114b      	asrs	r3, r1, #5
 800a9e0:	4298      	cmp	r0, r3
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	db11      	blt.n	800aa0a <__any_on+0x32>
 800a9e6:	dd0a      	ble.n	800a9fe <__any_on+0x26>
 800a9e8:	f011 011f 	ands.w	r1, r1, #31
 800a9ec:	d007      	beq.n	800a9fe <__any_on+0x26>
 800a9ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9f2:	fa24 f001 	lsr.w	r0, r4, r1
 800a9f6:	fa00 f101 	lsl.w	r1, r0, r1
 800a9fa:	428c      	cmp	r4, r1
 800a9fc:	d10b      	bne.n	800aa16 <__any_on+0x3e>
 800a9fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d803      	bhi.n	800aa0e <__any_on+0x36>
 800aa06:	2000      	movs	r0, #0
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	e7f7      	b.n	800a9fe <__any_on+0x26>
 800aa0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa12:	2900      	cmp	r1, #0
 800aa14:	d0f5      	beq.n	800aa02 <__any_on+0x2a>
 800aa16:	2001      	movs	r0, #1
 800aa18:	e7f6      	b.n	800aa08 <__any_on+0x30>

0800aa1a <_calloc_r>:
 800aa1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa1c:	fba1 2402 	umull	r2, r4, r1, r2
 800aa20:	b94c      	cbnz	r4, 800aa36 <_calloc_r+0x1c>
 800aa22:	4611      	mov	r1, r2
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	f000 f87b 	bl	800ab20 <_malloc_r>
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	b930      	cbnz	r0, 800aa3e <_calloc_r+0x24>
 800aa30:	4628      	mov	r0, r5
 800aa32:	b003      	add	sp, #12
 800aa34:	bd30      	pop	{r4, r5, pc}
 800aa36:	220c      	movs	r2, #12
 800aa38:	6002      	str	r2, [r0, #0]
 800aa3a:	2500      	movs	r5, #0
 800aa3c:	e7f8      	b.n	800aa30 <_calloc_r+0x16>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	f7fc f854 	bl	8006aec <memset>
 800aa44:	e7f4      	b.n	800aa30 <_calloc_r+0x16>
	...

0800aa48 <_free_r>:
 800aa48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	d044      	beq.n	800aad8 <_free_r+0x90>
 800aa4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa52:	9001      	str	r0, [sp, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f1a1 0404 	sub.w	r4, r1, #4
 800aa5a:	bfb8      	it	lt
 800aa5c:	18e4      	addlt	r4, r4, r3
 800aa5e:	f000 fca7 	bl	800b3b0 <__malloc_lock>
 800aa62:	4a1e      	ldr	r2, [pc, #120]	; (800aadc <_free_r+0x94>)
 800aa64:	9801      	ldr	r0, [sp, #4]
 800aa66:	6813      	ldr	r3, [r2, #0]
 800aa68:	b933      	cbnz	r3, 800aa78 <_free_r+0x30>
 800aa6a:	6063      	str	r3, [r4, #4]
 800aa6c:	6014      	str	r4, [r2, #0]
 800aa6e:	b003      	add	sp, #12
 800aa70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa74:	f000 bca2 	b.w	800b3bc <__malloc_unlock>
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d908      	bls.n	800aa8e <_free_r+0x46>
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf01      	itttt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	1949      	addeq	r1, r1, r5
 800aa8a:	6021      	streq	r1, [r4, #0]
 800aa8c:	e7ed      	b.n	800aa6a <_free_r+0x22>
 800aa8e:	461a      	mov	r2, r3
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	b10b      	cbz	r3, 800aa98 <_free_r+0x50>
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d9fa      	bls.n	800aa8e <_free_r+0x46>
 800aa98:	6811      	ldr	r1, [r2, #0]
 800aa9a:	1855      	adds	r5, r2, r1
 800aa9c:	42a5      	cmp	r5, r4
 800aa9e:	d10b      	bne.n	800aab8 <_free_r+0x70>
 800aaa0:	6824      	ldr	r4, [r4, #0]
 800aaa2:	4421      	add	r1, r4
 800aaa4:	1854      	adds	r4, r2, r1
 800aaa6:	42a3      	cmp	r3, r4
 800aaa8:	6011      	str	r1, [r2, #0]
 800aaaa:	d1e0      	bne.n	800aa6e <_free_r+0x26>
 800aaac:	681c      	ldr	r4, [r3, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	6053      	str	r3, [r2, #4]
 800aab2:	4421      	add	r1, r4
 800aab4:	6011      	str	r1, [r2, #0]
 800aab6:	e7da      	b.n	800aa6e <_free_r+0x26>
 800aab8:	d902      	bls.n	800aac0 <_free_r+0x78>
 800aaba:	230c      	movs	r3, #12
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	e7d6      	b.n	800aa6e <_free_r+0x26>
 800aac0:	6825      	ldr	r5, [r4, #0]
 800aac2:	1961      	adds	r1, r4, r5
 800aac4:	428b      	cmp	r3, r1
 800aac6:	bf04      	itt	eq
 800aac8:	6819      	ldreq	r1, [r3, #0]
 800aaca:	685b      	ldreq	r3, [r3, #4]
 800aacc:	6063      	str	r3, [r4, #4]
 800aace:	bf04      	itt	eq
 800aad0:	1949      	addeq	r1, r1, r5
 800aad2:	6021      	streq	r1, [r4, #0]
 800aad4:	6054      	str	r4, [r2, #4]
 800aad6:	e7ca      	b.n	800aa6e <_free_r+0x26>
 800aad8:	b003      	add	sp, #12
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	200004b0 	.word	0x200004b0

0800aae0 <sbrk_aligned>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4e0e      	ldr	r6, [pc, #56]	; (800ab1c <sbrk_aligned+0x3c>)
 800aae4:	460c      	mov	r4, r1
 800aae6:	6831      	ldr	r1, [r6, #0]
 800aae8:	4605      	mov	r5, r0
 800aaea:	b911      	cbnz	r1, 800aaf2 <sbrk_aligned+0x12>
 800aaec:	f000 fb4c 	bl	800b188 <_sbrk_r>
 800aaf0:	6030      	str	r0, [r6, #0]
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f000 fb47 	bl	800b188 <_sbrk_r>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d00a      	beq.n	800ab14 <sbrk_aligned+0x34>
 800aafe:	1cc4      	adds	r4, r0, #3
 800ab00:	f024 0403 	bic.w	r4, r4, #3
 800ab04:	42a0      	cmp	r0, r4
 800ab06:	d007      	beq.n	800ab18 <sbrk_aligned+0x38>
 800ab08:	1a21      	subs	r1, r4, r0
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 fb3c 	bl	800b188 <_sbrk_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d101      	bne.n	800ab18 <sbrk_aligned+0x38>
 800ab14:	f04f 34ff 	mov.w	r4, #4294967295
 800ab18:	4620      	mov	r0, r4
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	200004b4 	.word	0x200004b4

0800ab20 <_malloc_r>:
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	1ccd      	adds	r5, r1, #3
 800ab26:	f025 0503 	bic.w	r5, r5, #3
 800ab2a:	3508      	adds	r5, #8
 800ab2c:	2d0c      	cmp	r5, #12
 800ab2e:	bf38      	it	cc
 800ab30:	250c      	movcc	r5, #12
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	4607      	mov	r7, r0
 800ab36:	db01      	blt.n	800ab3c <_malloc_r+0x1c>
 800ab38:	42a9      	cmp	r1, r5
 800ab3a:	d905      	bls.n	800ab48 <_malloc_r+0x28>
 800ab3c:	230c      	movs	r3, #12
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	2600      	movs	r6, #0
 800ab42:	4630      	mov	r0, r6
 800ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab48:	4e2e      	ldr	r6, [pc, #184]	; (800ac04 <_malloc_r+0xe4>)
 800ab4a:	f000 fc31 	bl	800b3b0 <__malloc_lock>
 800ab4e:	6833      	ldr	r3, [r6, #0]
 800ab50:	461c      	mov	r4, r3
 800ab52:	bb34      	cbnz	r4, 800aba2 <_malloc_r+0x82>
 800ab54:	4629      	mov	r1, r5
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff ffc2 	bl	800aae0 <sbrk_aligned>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	4604      	mov	r4, r0
 800ab60:	d14d      	bne.n	800abfe <_malloc_r+0xde>
 800ab62:	6834      	ldr	r4, [r6, #0]
 800ab64:	4626      	mov	r6, r4
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	d140      	bne.n	800abec <_malloc_r+0xcc>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4638      	mov	r0, r7
 800ab70:	eb04 0803 	add.w	r8, r4, r3
 800ab74:	f000 fb08 	bl	800b188 <_sbrk_r>
 800ab78:	4580      	cmp	r8, r0
 800ab7a:	d13a      	bne.n	800abf2 <_malloc_r+0xd2>
 800ab7c:	6821      	ldr	r1, [r4, #0]
 800ab7e:	3503      	adds	r5, #3
 800ab80:	1a6d      	subs	r5, r5, r1
 800ab82:	f025 0503 	bic.w	r5, r5, #3
 800ab86:	3508      	adds	r5, #8
 800ab88:	2d0c      	cmp	r5, #12
 800ab8a:	bf38      	it	cc
 800ab8c:	250c      	movcc	r5, #12
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ffa5 	bl	800aae0 <sbrk_aligned>
 800ab96:	3001      	adds	r0, #1
 800ab98:	d02b      	beq.n	800abf2 <_malloc_r+0xd2>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	442b      	add	r3, r5
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	e00e      	b.n	800abc0 <_malloc_r+0xa0>
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	1b52      	subs	r2, r2, r5
 800aba6:	d41e      	bmi.n	800abe6 <_malloc_r+0xc6>
 800aba8:	2a0b      	cmp	r2, #11
 800abaa:	d916      	bls.n	800abda <_malloc_r+0xba>
 800abac:	1961      	adds	r1, r4, r5
 800abae:	42a3      	cmp	r3, r4
 800abb0:	6025      	str	r5, [r4, #0]
 800abb2:	bf18      	it	ne
 800abb4:	6059      	strne	r1, [r3, #4]
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	bf08      	it	eq
 800abba:	6031      	streq	r1, [r6, #0]
 800abbc:	5162      	str	r2, [r4, r5]
 800abbe:	604b      	str	r3, [r1, #4]
 800abc0:	4638      	mov	r0, r7
 800abc2:	f104 060b 	add.w	r6, r4, #11
 800abc6:	f000 fbf9 	bl	800b3bc <__malloc_unlock>
 800abca:	f026 0607 	bic.w	r6, r6, #7
 800abce:	1d23      	adds	r3, r4, #4
 800abd0:	1af2      	subs	r2, r6, r3
 800abd2:	d0b6      	beq.n	800ab42 <_malloc_r+0x22>
 800abd4:	1b9b      	subs	r3, r3, r6
 800abd6:	50a3      	str	r3, [r4, r2]
 800abd8:	e7b3      	b.n	800ab42 <_malloc_r+0x22>
 800abda:	6862      	ldr	r2, [r4, #4]
 800abdc:	42a3      	cmp	r3, r4
 800abde:	bf0c      	ite	eq
 800abe0:	6032      	streq	r2, [r6, #0]
 800abe2:	605a      	strne	r2, [r3, #4]
 800abe4:	e7ec      	b.n	800abc0 <_malloc_r+0xa0>
 800abe6:	4623      	mov	r3, r4
 800abe8:	6864      	ldr	r4, [r4, #4]
 800abea:	e7b2      	b.n	800ab52 <_malloc_r+0x32>
 800abec:	4634      	mov	r4, r6
 800abee:	6876      	ldr	r6, [r6, #4]
 800abf0:	e7b9      	b.n	800ab66 <_malloc_r+0x46>
 800abf2:	230c      	movs	r3, #12
 800abf4:	603b      	str	r3, [r7, #0]
 800abf6:	4638      	mov	r0, r7
 800abf8:	f000 fbe0 	bl	800b3bc <__malloc_unlock>
 800abfc:	e7a1      	b.n	800ab42 <_malloc_r+0x22>
 800abfe:	6025      	str	r5, [r4, #0]
 800ac00:	e7de      	b.n	800abc0 <_malloc_r+0xa0>
 800ac02:	bf00      	nop
 800ac04:	200004b0 	.word	0x200004b0

0800ac08 <__ssputs_r>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	688e      	ldr	r6, [r1, #8]
 800ac0e:	429e      	cmp	r6, r3
 800ac10:	4682      	mov	sl, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	4690      	mov	r8, r2
 800ac16:	461f      	mov	r7, r3
 800ac18:	d838      	bhi.n	800ac8c <__ssputs_r+0x84>
 800ac1a:	898a      	ldrh	r2, [r1, #12]
 800ac1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac20:	d032      	beq.n	800ac88 <__ssputs_r+0x80>
 800ac22:	6825      	ldr	r5, [r4, #0]
 800ac24:	6909      	ldr	r1, [r1, #16]
 800ac26:	eba5 0901 	sub.w	r9, r5, r1
 800ac2a:	6965      	ldr	r5, [r4, #20]
 800ac2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac34:	3301      	adds	r3, #1
 800ac36:	444b      	add	r3, r9
 800ac38:	106d      	asrs	r5, r5, #1
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	bf38      	it	cc
 800ac3e:	461d      	movcc	r5, r3
 800ac40:	0553      	lsls	r3, r2, #21
 800ac42:	d531      	bpl.n	800aca8 <__ssputs_r+0xa0>
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7ff ff6b 	bl	800ab20 <_malloc_r>
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	b950      	cbnz	r0, 800ac64 <__ssputs_r+0x5c>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	f8ca 3000 	str.w	r3, [sl]
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac64:	6921      	ldr	r1, [r4, #16]
 800ac66:	464a      	mov	r2, r9
 800ac68:	f7ff fa08 	bl	800a07c <memcpy>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	6126      	str	r6, [r4, #16]
 800ac7a:	6165      	str	r5, [r4, #20]
 800ac7c:	444e      	add	r6, r9
 800ac7e:	eba5 0509 	sub.w	r5, r5, r9
 800ac82:	6026      	str	r6, [r4, #0]
 800ac84:	60a5      	str	r5, [r4, #8]
 800ac86:	463e      	mov	r6, r7
 800ac88:	42be      	cmp	r6, r7
 800ac8a:	d900      	bls.n	800ac8e <__ssputs_r+0x86>
 800ac8c:	463e      	mov	r6, r7
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	4632      	mov	r2, r6
 800ac92:	4641      	mov	r1, r8
 800ac94:	f000 fb72 	bl	800b37c <memmove>
 800ac98:	68a3      	ldr	r3, [r4, #8]
 800ac9a:	1b9b      	subs	r3, r3, r6
 800ac9c:	60a3      	str	r3, [r4, #8]
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	4433      	add	r3, r6
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	2000      	movs	r0, #0
 800aca6:	e7db      	b.n	800ac60 <__ssputs_r+0x58>
 800aca8:	462a      	mov	r2, r5
 800acaa:	f000 fb8d 	bl	800b3c8 <_realloc_r>
 800acae:	4606      	mov	r6, r0
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d1e1      	bne.n	800ac78 <__ssputs_r+0x70>
 800acb4:	6921      	ldr	r1, [r4, #16]
 800acb6:	4650      	mov	r0, sl
 800acb8:	f7ff fec6 	bl	800aa48 <_free_r>
 800acbc:	e7c7      	b.n	800ac4e <__ssputs_r+0x46>
	...

0800acc0 <_svfiprintf_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	4698      	mov	r8, r3
 800acc6:	898b      	ldrh	r3, [r1, #12]
 800acc8:	061b      	lsls	r3, r3, #24
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	4607      	mov	r7, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	4614      	mov	r4, r2
 800acd2:	d50e      	bpl.n	800acf2 <_svfiprintf_r+0x32>
 800acd4:	690b      	ldr	r3, [r1, #16]
 800acd6:	b963      	cbnz	r3, 800acf2 <_svfiprintf_r+0x32>
 800acd8:	2140      	movs	r1, #64	; 0x40
 800acda:	f7ff ff21 	bl	800ab20 <_malloc_r>
 800acde:	6028      	str	r0, [r5, #0]
 800ace0:	6128      	str	r0, [r5, #16]
 800ace2:	b920      	cbnz	r0, 800acee <_svfiprintf_r+0x2e>
 800ace4:	230c      	movs	r3, #12
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	e0d1      	b.n	800ae92 <_svfiprintf_r+0x1d2>
 800acee:	2340      	movs	r3, #64	; 0x40
 800acf0:	616b      	str	r3, [r5, #20]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	2320      	movs	r3, #32
 800acf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad00:	2330      	movs	r3, #48	; 0x30
 800ad02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aeac <_svfiprintf_r+0x1ec>
 800ad06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad0a:	f04f 0901 	mov.w	r9, #1
 800ad0e:	4623      	mov	r3, r4
 800ad10:	469a      	mov	sl, r3
 800ad12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad16:	b10a      	cbz	r2, 800ad1c <_svfiprintf_r+0x5c>
 800ad18:	2a25      	cmp	r2, #37	; 0x25
 800ad1a:	d1f9      	bne.n	800ad10 <_svfiprintf_r+0x50>
 800ad1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad20:	d00b      	beq.n	800ad3a <_svfiprintf_r+0x7a>
 800ad22:	465b      	mov	r3, fp
 800ad24:	4622      	mov	r2, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ff6d 	bl	800ac08 <__ssputs_r>
 800ad2e:	3001      	adds	r0, #1
 800ad30:	f000 80aa 	beq.w	800ae88 <_svfiprintf_r+0x1c8>
 800ad34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad36:	445a      	add	r2, fp
 800ad38:	9209      	str	r2, [sp, #36]	; 0x24
 800ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80a2 	beq.w	800ae88 <_svfiprintf_r+0x1c8>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4e:	f10a 0a01 	add.w	sl, sl, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	9307      	str	r3, [sp, #28]
 800ad56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5c:	4654      	mov	r4, sl
 800ad5e:	2205      	movs	r2, #5
 800ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad64:	4851      	ldr	r0, [pc, #324]	; (800aeac <_svfiprintf_r+0x1ec>)
 800ad66:	f7f5 fa63 	bl	8000230 <memchr>
 800ad6a:	9a04      	ldr	r2, [sp, #16]
 800ad6c:	b9d8      	cbnz	r0, 800ada6 <_svfiprintf_r+0xe6>
 800ad6e:	06d0      	lsls	r0, r2, #27
 800ad70:	bf44      	itt	mi
 800ad72:	2320      	movmi	r3, #32
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad78:	0711      	lsls	r1, r2, #28
 800ad7a:	bf44      	itt	mi
 800ad7c:	232b      	movmi	r3, #43	; 0x2b
 800ad7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad82:	f89a 3000 	ldrb.w	r3, [sl]
 800ad86:	2b2a      	cmp	r3, #42	; 0x2a
 800ad88:	d015      	beq.n	800adb6 <_svfiprintf_r+0xf6>
 800ad8a:	9a07      	ldr	r2, [sp, #28]
 800ad8c:	4654      	mov	r4, sl
 800ad8e:	2000      	movs	r0, #0
 800ad90:	f04f 0c0a 	mov.w	ip, #10
 800ad94:	4621      	mov	r1, r4
 800ad96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad9a:	3b30      	subs	r3, #48	; 0x30
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d94e      	bls.n	800ae3e <_svfiprintf_r+0x17e>
 800ada0:	b1b0      	cbz	r0, 800add0 <_svfiprintf_r+0x110>
 800ada2:	9207      	str	r2, [sp, #28]
 800ada4:	e014      	b.n	800add0 <_svfiprintf_r+0x110>
 800ada6:	eba0 0308 	sub.w	r3, r0, r8
 800adaa:	fa09 f303 	lsl.w	r3, r9, r3
 800adae:	4313      	orrs	r3, r2
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	46a2      	mov	sl, r4
 800adb4:	e7d2      	b.n	800ad5c <_svfiprintf_r+0x9c>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	1d19      	adds	r1, r3, #4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	9103      	str	r1, [sp, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfbb      	ittet	lt
 800adc2:	425b      	neglt	r3, r3
 800adc4:	f042 0202 	orrlt.w	r2, r2, #2
 800adc8:	9307      	strge	r3, [sp, #28]
 800adca:	9307      	strlt	r3, [sp, #28]
 800adcc:	bfb8      	it	lt
 800adce:	9204      	strlt	r2, [sp, #16]
 800add0:	7823      	ldrb	r3, [r4, #0]
 800add2:	2b2e      	cmp	r3, #46	; 0x2e
 800add4:	d10c      	bne.n	800adf0 <_svfiprintf_r+0x130>
 800add6:	7863      	ldrb	r3, [r4, #1]
 800add8:	2b2a      	cmp	r3, #42	; 0x2a
 800adda:	d135      	bne.n	800ae48 <_svfiprintf_r+0x188>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	1d1a      	adds	r2, r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	9203      	str	r2, [sp, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfb8      	it	lt
 800ade8:	f04f 33ff 	movlt.w	r3, #4294967295
 800adec:	3402      	adds	r4, #2
 800adee:	9305      	str	r3, [sp, #20]
 800adf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aebc <_svfiprintf_r+0x1fc>
 800adf4:	7821      	ldrb	r1, [r4, #0]
 800adf6:	2203      	movs	r2, #3
 800adf8:	4650      	mov	r0, sl
 800adfa:	f7f5 fa19 	bl	8000230 <memchr>
 800adfe:	b140      	cbz	r0, 800ae12 <_svfiprintf_r+0x152>
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	eba0 000a 	sub.w	r0, r0, sl
 800ae06:	fa03 f000 	lsl.w	r0, r3, r0
 800ae0a:	9b04      	ldr	r3, [sp, #16]
 800ae0c:	4303      	orrs	r3, r0
 800ae0e:	3401      	adds	r4, #1
 800ae10:	9304      	str	r3, [sp, #16]
 800ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae16:	4826      	ldr	r0, [pc, #152]	; (800aeb0 <_svfiprintf_r+0x1f0>)
 800ae18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1c:	2206      	movs	r2, #6
 800ae1e:	f7f5 fa07 	bl	8000230 <memchr>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d038      	beq.n	800ae98 <_svfiprintf_r+0x1d8>
 800ae26:	4b23      	ldr	r3, [pc, #140]	; (800aeb4 <_svfiprintf_r+0x1f4>)
 800ae28:	bb1b      	cbnz	r3, 800ae72 <_svfiprintf_r+0x1b2>
 800ae2a:	9b03      	ldr	r3, [sp, #12]
 800ae2c:	3307      	adds	r3, #7
 800ae2e:	f023 0307 	bic.w	r3, r3, #7
 800ae32:	3308      	adds	r3, #8
 800ae34:	9303      	str	r3, [sp, #12]
 800ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae38:	4433      	add	r3, r6
 800ae3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3c:	e767      	b.n	800ad0e <_svfiprintf_r+0x4e>
 800ae3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae42:	460c      	mov	r4, r1
 800ae44:	2001      	movs	r0, #1
 800ae46:	e7a5      	b.n	800ad94 <_svfiprintf_r+0xd4>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	3401      	adds	r4, #1
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	f04f 0c0a 	mov.w	ip, #10
 800ae54:	4620      	mov	r0, r4
 800ae56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae5a:	3a30      	subs	r2, #48	; 0x30
 800ae5c:	2a09      	cmp	r2, #9
 800ae5e:	d903      	bls.n	800ae68 <_svfiprintf_r+0x1a8>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0c5      	beq.n	800adf0 <_svfiprintf_r+0x130>
 800ae64:	9105      	str	r1, [sp, #20]
 800ae66:	e7c3      	b.n	800adf0 <_svfiprintf_r+0x130>
 800ae68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e7f0      	b.n	800ae54 <_svfiprintf_r+0x194>
 800ae72:	ab03      	add	r3, sp, #12
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	462a      	mov	r2, r5
 800ae78:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <_svfiprintf_r+0x1f8>)
 800ae7a:	a904      	add	r1, sp, #16
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7fb fedd 	bl	8006c3c <_printf_float>
 800ae82:	1c42      	adds	r2, r0, #1
 800ae84:	4606      	mov	r6, r0
 800ae86:	d1d6      	bne.n	800ae36 <_svfiprintf_r+0x176>
 800ae88:	89ab      	ldrh	r3, [r5, #12]
 800ae8a:	065b      	lsls	r3, r3, #25
 800ae8c:	f53f af2c 	bmi.w	800ace8 <_svfiprintf_r+0x28>
 800ae90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae92:	b01d      	add	sp, #116	; 0x74
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <_svfiprintf_r+0x1f8>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	4638      	mov	r0, r7
 800aea4:	f7fc f96e 	bl	8007184 <_printf_i>
 800aea8:	e7eb      	b.n	800ae82 <_svfiprintf_r+0x1c2>
 800aeaa:	bf00      	nop
 800aeac:	0800bd04 	.word	0x0800bd04
 800aeb0:	0800bd0e 	.word	0x0800bd0e
 800aeb4:	08006c3d 	.word	0x08006c3d
 800aeb8:	0800ac09 	.word	0x0800ac09
 800aebc:	0800bd0a 	.word	0x0800bd0a

0800aec0 <__sfputc_r>:
 800aec0:	6893      	ldr	r3, [r2, #8]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	b410      	push	{r4}
 800aec8:	6093      	str	r3, [r2, #8]
 800aeca:	da08      	bge.n	800aede <__sfputc_r+0x1e>
 800aecc:	6994      	ldr	r4, [r2, #24]
 800aece:	42a3      	cmp	r3, r4
 800aed0:	db01      	blt.n	800aed6 <__sfputc_r+0x16>
 800aed2:	290a      	cmp	r1, #10
 800aed4:	d103      	bne.n	800aede <__sfputc_r+0x1e>
 800aed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeda:	f7fd bbe9 	b.w	80086b0 <__swbuf_r>
 800aede:	6813      	ldr	r3, [r2, #0]
 800aee0:	1c58      	adds	r0, r3, #1
 800aee2:	6010      	str	r0, [r2, #0]
 800aee4:	7019      	strb	r1, [r3, #0]
 800aee6:	4608      	mov	r0, r1
 800aee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <__sfputs_r>:
 800aeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef0:	4606      	mov	r6, r0
 800aef2:	460f      	mov	r7, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	18d5      	adds	r5, r2, r3
 800aef8:	42ac      	cmp	r4, r5
 800aefa:	d101      	bne.n	800af00 <__sfputs_r+0x12>
 800aefc:	2000      	movs	r0, #0
 800aefe:	e007      	b.n	800af10 <__sfputs_r+0x22>
 800af00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af04:	463a      	mov	r2, r7
 800af06:	4630      	mov	r0, r6
 800af08:	f7ff ffda 	bl	800aec0 <__sfputc_r>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d1f3      	bne.n	800aef8 <__sfputs_r+0xa>
 800af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af14 <_vfiprintf_r>:
 800af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	460d      	mov	r5, r1
 800af1a:	b09d      	sub	sp, #116	; 0x74
 800af1c:	4614      	mov	r4, r2
 800af1e:	4698      	mov	r8, r3
 800af20:	4606      	mov	r6, r0
 800af22:	b118      	cbz	r0, 800af2c <_vfiprintf_r+0x18>
 800af24:	6983      	ldr	r3, [r0, #24]
 800af26:	b90b      	cbnz	r3, 800af2c <_vfiprintf_r+0x18>
 800af28:	f7fe fc16 	bl	8009758 <__sinit>
 800af2c:	4b89      	ldr	r3, [pc, #548]	; (800b154 <_vfiprintf_r+0x240>)
 800af2e:	429d      	cmp	r5, r3
 800af30:	d11b      	bne.n	800af6a <_vfiprintf_r+0x56>
 800af32:	6875      	ldr	r5, [r6, #4]
 800af34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af36:	07d9      	lsls	r1, r3, #31
 800af38:	d405      	bmi.n	800af46 <_vfiprintf_r+0x32>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d402      	bmi.n	800af46 <_vfiprintf_r+0x32>
 800af40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af42:	f7ff f81a 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	071b      	lsls	r3, r3, #28
 800af4a:	d501      	bpl.n	800af50 <_vfiprintf_r+0x3c>
 800af4c:	692b      	ldr	r3, [r5, #16]
 800af4e:	b9eb      	cbnz	r3, 800af8c <_vfiprintf_r+0x78>
 800af50:	4629      	mov	r1, r5
 800af52:	4630      	mov	r0, r6
 800af54:	f7fd fbfe 	bl	8008754 <__swsetup_r>
 800af58:	b1c0      	cbz	r0, 800af8c <_vfiprintf_r+0x78>
 800af5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af5c:	07dc      	lsls	r4, r3, #31
 800af5e:	d50e      	bpl.n	800af7e <_vfiprintf_r+0x6a>
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	b01d      	add	sp, #116	; 0x74
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6a:	4b7b      	ldr	r3, [pc, #492]	; (800b158 <_vfiprintf_r+0x244>)
 800af6c:	429d      	cmp	r5, r3
 800af6e:	d101      	bne.n	800af74 <_vfiprintf_r+0x60>
 800af70:	68b5      	ldr	r5, [r6, #8]
 800af72:	e7df      	b.n	800af34 <_vfiprintf_r+0x20>
 800af74:	4b79      	ldr	r3, [pc, #484]	; (800b15c <_vfiprintf_r+0x248>)
 800af76:	429d      	cmp	r5, r3
 800af78:	bf08      	it	eq
 800af7a:	68f5      	ldreq	r5, [r6, #12]
 800af7c:	e7da      	b.n	800af34 <_vfiprintf_r+0x20>
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	0598      	lsls	r0, r3, #22
 800af82:	d4ed      	bmi.n	800af60 <_vfiprintf_r+0x4c>
 800af84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af86:	f7fe fff9 	bl	8009f7c <__retarget_lock_release_recursive>
 800af8a:	e7e9      	b.n	800af60 <_vfiprintf_r+0x4c>
 800af8c:	2300      	movs	r3, #0
 800af8e:	9309      	str	r3, [sp, #36]	; 0x24
 800af90:	2320      	movs	r3, #32
 800af92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af96:	f8cd 800c 	str.w	r8, [sp, #12]
 800af9a:	2330      	movs	r3, #48	; 0x30
 800af9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b160 <_vfiprintf_r+0x24c>
 800afa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afa4:	f04f 0901 	mov.w	r9, #1
 800afa8:	4623      	mov	r3, r4
 800afaa:	469a      	mov	sl, r3
 800afac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb0:	b10a      	cbz	r2, 800afb6 <_vfiprintf_r+0xa2>
 800afb2:	2a25      	cmp	r2, #37	; 0x25
 800afb4:	d1f9      	bne.n	800afaa <_vfiprintf_r+0x96>
 800afb6:	ebba 0b04 	subs.w	fp, sl, r4
 800afba:	d00b      	beq.n	800afd4 <_vfiprintf_r+0xc0>
 800afbc:	465b      	mov	r3, fp
 800afbe:	4622      	mov	r2, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ff93 	bl	800aeee <__sfputs_r>
 800afc8:	3001      	adds	r0, #1
 800afca:	f000 80aa 	beq.w	800b122 <_vfiprintf_r+0x20e>
 800afce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd0:	445a      	add	r2, fp
 800afd2:	9209      	str	r2, [sp, #36]	; 0x24
 800afd4:	f89a 3000 	ldrb.w	r3, [sl]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 80a2 	beq.w	800b122 <_vfiprintf_r+0x20e>
 800afde:	2300      	movs	r3, #0
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295
 800afe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe8:	f10a 0a01 	add.w	sl, sl, #1
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	9307      	str	r3, [sp, #28]
 800aff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aff4:	931a      	str	r3, [sp, #104]	; 0x68
 800aff6:	4654      	mov	r4, sl
 800aff8:	2205      	movs	r2, #5
 800affa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affe:	4858      	ldr	r0, [pc, #352]	; (800b160 <_vfiprintf_r+0x24c>)
 800b000:	f7f5 f916 	bl	8000230 <memchr>
 800b004:	9a04      	ldr	r2, [sp, #16]
 800b006:	b9d8      	cbnz	r0, 800b040 <_vfiprintf_r+0x12c>
 800b008:	06d1      	lsls	r1, r2, #27
 800b00a:	bf44      	itt	mi
 800b00c:	2320      	movmi	r3, #32
 800b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b012:	0713      	lsls	r3, r2, #28
 800b014:	bf44      	itt	mi
 800b016:	232b      	movmi	r3, #43	; 0x2b
 800b018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b01c:	f89a 3000 	ldrb.w	r3, [sl]
 800b020:	2b2a      	cmp	r3, #42	; 0x2a
 800b022:	d015      	beq.n	800b050 <_vfiprintf_r+0x13c>
 800b024:	9a07      	ldr	r2, [sp, #28]
 800b026:	4654      	mov	r4, sl
 800b028:	2000      	movs	r0, #0
 800b02a:	f04f 0c0a 	mov.w	ip, #10
 800b02e:	4621      	mov	r1, r4
 800b030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b034:	3b30      	subs	r3, #48	; 0x30
 800b036:	2b09      	cmp	r3, #9
 800b038:	d94e      	bls.n	800b0d8 <_vfiprintf_r+0x1c4>
 800b03a:	b1b0      	cbz	r0, 800b06a <_vfiprintf_r+0x156>
 800b03c:	9207      	str	r2, [sp, #28]
 800b03e:	e014      	b.n	800b06a <_vfiprintf_r+0x156>
 800b040:	eba0 0308 	sub.w	r3, r0, r8
 800b044:	fa09 f303 	lsl.w	r3, r9, r3
 800b048:	4313      	orrs	r3, r2
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	46a2      	mov	sl, r4
 800b04e:	e7d2      	b.n	800aff6 <_vfiprintf_r+0xe2>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	1d19      	adds	r1, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	9103      	str	r1, [sp, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfbb      	ittet	lt
 800b05c:	425b      	neglt	r3, r3
 800b05e:	f042 0202 	orrlt.w	r2, r2, #2
 800b062:	9307      	strge	r3, [sp, #28]
 800b064:	9307      	strlt	r3, [sp, #28]
 800b066:	bfb8      	it	lt
 800b068:	9204      	strlt	r2, [sp, #16]
 800b06a:	7823      	ldrb	r3, [r4, #0]
 800b06c:	2b2e      	cmp	r3, #46	; 0x2e
 800b06e:	d10c      	bne.n	800b08a <_vfiprintf_r+0x176>
 800b070:	7863      	ldrb	r3, [r4, #1]
 800b072:	2b2a      	cmp	r3, #42	; 0x2a
 800b074:	d135      	bne.n	800b0e2 <_vfiprintf_r+0x1ce>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	1d1a      	adds	r2, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9203      	str	r2, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfb8      	it	lt
 800b082:	f04f 33ff 	movlt.w	r3, #4294967295
 800b086:	3402      	adds	r4, #2
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b170 <_vfiprintf_r+0x25c>
 800b08e:	7821      	ldrb	r1, [r4, #0]
 800b090:	2203      	movs	r2, #3
 800b092:	4650      	mov	r0, sl
 800b094:	f7f5 f8cc 	bl	8000230 <memchr>
 800b098:	b140      	cbz	r0, 800b0ac <_vfiprintf_r+0x198>
 800b09a:	2340      	movs	r3, #64	; 0x40
 800b09c:	eba0 000a 	sub.w	r0, r0, sl
 800b0a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	4303      	orrs	r3, r0
 800b0a8:	3401      	adds	r4, #1
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	482c      	ldr	r0, [pc, #176]	; (800b164 <_vfiprintf_r+0x250>)
 800b0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0b6:	2206      	movs	r2, #6
 800b0b8:	f7f5 f8ba 	bl	8000230 <memchr>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d03f      	beq.n	800b140 <_vfiprintf_r+0x22c>
 800b0c0:	4b29      	ldr	r3, [pc, #164]	; (800b168 <_vfiprintf_r+0x254>)
 800b0c2:	bb1b      	cbnz	r3, 800b10c <_vfiprintf_r+0x1f8>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	3307      	adds	r3, #7
 800b0c8:	f023 0307 	bic.w	r3, r3, #7
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d2:	443b      	add	r3, r7
 800b0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d6:	e767      	b.n	800afa8 <_vfiprintf_r+0x94>
 800b0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0dc:	460c      	mov	r4, r1
 800b0de:	2001      	movs	r0, #1
 800b0e0:	e7a5      	b.n	800b02e <_vfiprintf_r+0x11a>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	3401      	adds	r4, #1
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f04f 0c0a 	mov.w	ip, #10
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f4:	3a30      	subs	r2, #48	; 0x30
 800b0f6:	2a09      	cmp	r2, #9
 800b0f8:	d903      	bls.n	800b102 <_vfiprintf_r+0x1ee>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0c5      	beq.n	800b08a <_vfiprintf_r+0x176>
 800b0fe:	9105      	str	r1, [sp, #20]
 800b100:	e7c3      	b.n	800b08a <_vfiprintf_r+0x176>
 800b102:	fb0c 2101 	mla	r1, ip, r1, r2
 800b106:	4604      	mov	r4, r0
 800b108:	2301      	movs	r3, #1
 800b10a:	e7f0      	b.n	800b0ee <_vfiprintf_r+0x1da>
 800b10c:	ab03      	add	r3, sp, #12
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	462a      	mov	r2, r5
 800b112:	4b16      	ldr	r3, [pc, #88]	; (800b16c <_vfiprintf_r+0x258>)
 800b114:	a904      	add	r1, sp, #16
 800b116:	4630      	mov	r0, r6
 800b118:	f7fb fd90 	bl	8006c3c <_printf_float>
 800b11c:	4607      	mov	r7, r0
 800b11e:	1c78      	adds	r0, r7, #1
 800b120:	d1d6      	bne.n	800b0d0 <_vfiprintf_r+0x1bc>
 800b122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b124:	07d9      	lsls	r1, r3, #31
 800b126:	d405      	bmi.n	800b134 <_vfiprintf_r+0x220>
 800b128:	89ab      	ldrh	r3, [r5, #12]
 800b12a:	059a      	lsls	r2, r3, #22
 800b12c:	d402      	bmi.n	800b134 <_vfiprintf_r+0x220>
 800b12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b130:	f7fe ff24 	bl	8009f7c <__retarget_lock_release_recursive>
 800b134:	89ab      	ldrh	r3, [r5, #12]
 800b136:	065b      	lsls	r3, r3, #25
 800b138:	f53f af12 	bmi.w	800af60 <_vfiprintf_r+0x4c>
 800b13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b13e:	e711      	b.n	800af64 <_vfiprintf_r+0x50>
 800b140:	ab03      	add	r3, sp, #12
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	462a      	mov	r2, r5
 800b146:	4b09      	ldr	r3, [pc, #36]	; (800b16c <_vfiprintf_r+0x258>)
 800b148:	a904      	add	r1, sp, #16
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7fc f81a 	bl	8007184 <_printf_i>
 800b150:	e7e4      	b.n	800b11c <_vfiprintf_r+0x208>
 800b152:	bf00      	nop
 800b154:	0800baec 	.word	0x0800baec
 800b158:	0800bb0c 	.word	0x0800bb0c
 800b15c:	0800bacc 	.word	0x0800bacc
 800b160:	0800bd04 	.word	0x0800bd04
 800b164:	0800bd0e 	.word	0x0800bd0e
 800b168:	08006c3d 	.word	0x08006c3d
 800b16c:	0800aeef 	.word	0x0800aeef
 800b170:	0800bd0a 	.word	0x0800bd0a
 800b174:	00000000 	.word	0x00000000

0800b178 <nan>:
 800b178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b180 <nan+0x8>
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	00000000 	.word	0x00000000
 800b184:	7ff80000 	.word	0x7ff80000

0800b188 <_sbrk_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d06      	ldr	r5, [pc, #24]	; (800b1a4 <_sbrk_r+0x1c>)
 800b18c:	2300      	movs	r3, #0
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	f7f6 fe8a 	bl	8001eac <_sbrk>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d102      	bne.n	800b1a2 <_sbrk_r+0x1a>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	b103      	cbz	r3, 800b1a2 <_sbrk_r+0x1a>
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	200004b8 	.word	0x200004b8

0800b1a8 <__sread>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b0:	f000 f93a 	bl	800b428 <_read_r>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	bfab      	itete	ge
 800b1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b1bc:	181b      	addge	r3, r3, r0
 800b1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1c2:	bfac      	ite	ge
 800b1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1c6:	81a3      	strhlt	r3, [r4, #12]
 800b1c8:	bd10      	pop	{r4, pc}

0800b1ca <__swrite>:
 800b1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ce:	461f      	mov	r7, r3
 800b1d0:	898b      	ldrh	r3, [r1, #12]
 800b1d2:	05db      	lsls	r3, r3, #23
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4616      	mov	r6, r2
 800b1da:	d505      	bpl.n	800b1e8 <__swrite+0x1e>
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f000 f8b8 	bl	800b358 <_lseek_r>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	f000 b837 	b.w	800b270 <_write_r>

0800b202 <__sseek>:
 800b202:	b510      	push	{r4, lr}
 800b204:	460c      	mov	r4, r1
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	f000 f8a5 	bl	800b358 <_lseek_r>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	bf15      	itete	ne
 800b214:	6560      	strne	r0, [r4, #84]	; 0x54
 800b216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b21e:	81a3      	strheq	r3, [r4, #12]
 800b220:	bf18      	it	ne
 800b222:	81a3      	strhne	r3, [r4, #12]
 800b224:	bd10      	pop	{r4, pc}

0800b226 <__sclose>:
 800b226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22a:	f000 b851 	b.w	800b2d0 <_close_r>

0800b22e <strncmp>:
 800b22e:	b510      	push	{r4, lr}
 800b230:	b17a      	cbz	r2, 800b252 <strncmp+0x24>
 800b232:	4603      	mov	r3, r0
 800b234:	3901      	subs	r1, #1
 800b236:	1884      	adds	r4, r0, r2
 800b238:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b23c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b240:	4290      	cmp	r0, r2
 800b242:	d101      	bne.n	800b248 <strncmp+0x1a>
 800b244:	42a3      	cmp	r3, r4
 800b246:	d101      	bne.n	800b24c <strncmp+0x1e>
 800b248:	1a80      	subs	r0, r0, r2
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d1f3      	bne.n	800b238 <strncmp+0xa>
 800b250:	e7fa      	b.n	800b248 <strncmp+0x1a>
 800b252:	4610      	mov	r0, r2
 800b254:	e7f9      	b.n	800b24a <strncmp+0x1c>

0800b256 <__ascii_wctomb>:
 800b256:	b149      	cbz	r1, 800b26c <__ascii_wctomb+0x16>
 800b258:	2aff      	cmp	r2, #255	; 0xff
 800b25a:	bf85      	ittet	hi
 800b25c:	238a      	movhi	r3, #138	; 0x8a
 800b25e:	6003      	strhi	r3, [r0, #0]
 800b260:	700a      	strbls	r2, [r1, #0]
 800b262:	f04f 30ff 	movhi.w	r0, #4294967295
 800b266:	bf98      	it	ls
 800b268:	2001      	movls	r0, #1
 800b26a:	4770      	bx	lr
 800b26c:	4608      	mov	r0, r1
 800b26e:	4770      	bx	lr

0800b270 <_write_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	; (800b290 <_write_r+0x20>)
 800b274:	4604      	mov	r4, r0
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	f7f6 fbb0 	bl	80019e4 <_write>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_write_r+0x1e>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_write_r+0x1e>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	200004b8 	.word	0x200004b8

0800b294 <__assert_func>:
 800b294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b296:	4614      	mov	r4, r2
 800b298:	461a      	mov	r2, r3
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <__assert_func+0x2c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4605      	mov	r5, r0
 800b2a0:	68d8      	ldr	r0, [r3, #12]
 800b2a2:	b14c      	cbz	r4, 800b2b8 <__assert_func+0x24>
 800b2a4:	4b07      	ldr	r3, [pc, #28]	; (800b2c4 <__assert_func+0x30>)
 800b2a6:	9100      	str	r1, [sp, #0]
 800b2a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2ac:	4906      	ldr	r1, [pc, #24]	; (800b2c8 <__assert_func+0x34>)
 800b2ae:	462b      	mov	r3, r5
 800b2b0:	f000 f81e 	bl	800b2f0 <fiprintf>
 800b2b4:	f000 f8ca 	bl	800b44c <abort>
 800b2b8:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <__assert_func+0x38>)
 800b2ba:	461c      	mov	r4, r3
 800b2bc:	e7f3      	b.n	800b2a6 <__assert_func+0x12>
 800b2be:	bf00      	nop
 800b2c0:	2000000c 	.word	0x2000000c
 800b2c4:	0800bd15 	.word	0x0800bd15
 800b2c8:	0800bd22 	.word	0x0800bd22
 800b2cc:	0800bd50 	.word	0x0800bd50

0800b2d0 <_close_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4d06      	ldr	r5, [pc, #24]	; (800b2ec <_close_r+0x1c>)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	602b      	str	r3, [r5, #0]
 800b2dc:	f7f6 fdb1 	bl	8001e42 <_close>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_close_r+0x1a>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_close_r+0x1a>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	200004b8 	.word	0x200004b8

0800b2f0 <fiprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	b503      	push	{r0, r1, lr}
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	ab03      	add	r3, sp, #12
 800b2f8:	4805      	ldr	r0, [pc, #20]	; (800b310 <fiprintf+0x20>)
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	6800      	ldr	r0, [r0, #0]
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	f7ff fe07 	bl	800af14 <_vfiprintf_r>
 800b306:	b002      	add	sp, #8
 800b308:	f85d eb04 	ldr.w	lr, [sp], #4
 800b30c:	b003      	add	sp, #12
 800b30e:	4770      	bx	lr
 800b310:	2000000c 	.word	0x2000000c

0800b314 <_fstat_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d07      	ldr	r5, [pc, #28]	; (800b334 <_fstat_r+0x20>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	4611      	mov	r1, r2
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	f7f6 fd9a 	bl	8001e5a <_fstat>
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	d102      	bne.n	800b330 <_fstat_r+0x1c>
 800b32a:	682b      	ldr	r3, [r5, #0]
 800b32c:	b103      	cbz	r3, 800b330 <_fstat_r+0x1c>
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	200004b8 	.word	0x200004b8

0800b338 <_isatty_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4d06      	ldr	r5, [pc, #24]	; (800b354 <_isatty_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	602b      	str	r3, [r5, #0]
 800b344:	f7f6 fd99 	bl	8001e7a <_isatty>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_isatty_r+0x1a>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_isatty_r+0x1a>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	200004b8 	.word	0x200004b8

0800b358 <_lseek_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	; (800b378 <_lseek_r+0x20>)
 800b35c:	4604      	mov	r4, r0
 800b35e:	4608      	mov	r0, r1
 800b360:	4611      	mov	r1, r2
 800b362:	2200      	movs	r2, #0
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	f7f6 fd92 	bl	8001e90 <_lseek>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_lseek_r+0x1e>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_lseek_r+0x1e>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	200004b8 	.word	0x200004b8

0800b37c <memmove>:
 800b37c:	4288      	cmp	r0, r1
 800b37e:	b510      	push	{r4, lr}
 800b380:	eb01 0402 	add.w	r4, r1, r2
 800b384:	d902      	bls.n	800b38c <memmove+0x10>
 800b386:	4284      	cmp	r4, r0
 800b388:	4623      	mov	r3, r4
 800b38a:	d807      	bhi.n	800b39c <memmove+0x20>
 800b38c:	1e43      	subs	r3, r0, #1
 800b38e:	42a1      	cmp	r1, r4
 800b390:	d008      	beq.n	800b3a4 <memmove+0x28>
 800b392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b39a:	e7f8      	b.n	800b38e <memmove+0x12>
 800b39c:	4402      	add	r2, r0
 800b39e:	4601      	mov	r1, r0
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	d100      	bne.n	800b3a6 <memmove+0x2a>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ae:	e7f7      	b.n	800b3a0 <memmove+0x24>

0800b3b0 <__malloc_lock>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	; (800b3b8 <__malloc_lock+0x8>)
 800b3b2:	f7fe bde2 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	200004ac 	.word	0x200004ac

0800b3bc <__malloc_unlock>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	; (800b3c4 <__malloc_unlock+0x8>)
 800b3be:	f7fe bddd 	b.w	8009f7c <__retarget_lock_release_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	200004ac 	.word	0x200004ac

0800b3c8 <_realloc_r>:
 800b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	4614      	mov	r4, r2
 800b3d0:	460e      	mov	r6, r1
 800b3d2:	b921      	cbnz	r1, 800b3de <_realloc_r+0x16>
 800b3d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d8:	4611      	mov	r1, r2
 800b3da:	f7ff bba1 	b.w	800ab20 <_malloc_r>
 800b3de:	b92a      	cbnz	r2, 800b3ec <_realloc_r+0x24>
 800b3e0:	f7ff fb32 	bl	800aa48 <_free_r>
 800b3e4:	4625      	mov	r5, r4
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	f000 f835 	bl	800b45a <_malloc_usable_size_r>
 800b3f0:	4284      	cmp	r4, r0
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	d802      	bhi.n	800b3fc <_realloc_r+0x34>
 800b3f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3fa:	d812      	bhi.n	800b422 <_realloc_r+0x5a>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4640      	mov	r0, r8
 800b400:	f7ff fb8e 	bl	800ab20 <_malloc_r>
 800b404:	4605      	mov	r5, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	d0ed      	beq.n	800b3e6 <_realloc_r+0x1e>
 800b40a:	42bc      	cmp	r4, r7
 800b40c:	4622      	mov	r2, r4
 800b40e:	4631      	mov	r1, r6
 800b410:	bf28      	it	cs
 800b412:	463a      	movcs	r2, r7
 800b414:	f7fe fe32 	bl	800a07c <memcpy>
 800b418:	4631      	mov	r1, r6
 800b41a:	4640      	mov	r0, r8
 800b41c:	f7ff fb14 	bl	800aa48 <_free_r>
 800b420:	e7e1      	b.n	800b3e6 <_realloc_r+0x1e>
 800b422:	4635      	mov	r5, r6
 800b424:	e7df      	b.n	800b3e6 <_realloc_r+0x1e>
	...

0800b428 <_read_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d07      	ldr	r5, [pc, #28]	; (800b448 <_read_r+0x20>)
 800b42c:	4604      	mov	r4, r0
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	2200      	movs	r2, #0
 800b434:	602a      	str	r2, [r5, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	f7f6 fce6 	bl	8001e08 <_read>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_read_r+0x1e>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_read_r+0x1e>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	200004b8 	.word	0x200004b8

0800b44c <abort>:
 800b44c:	b508      	push	{r3, lr}
 800b44e:	2006      	movs	r0, #6
 800b450:	f000 f834 	bl	800b4bc <raise>
 800b454:	2001      	movs	r0, #1
 800b456:	f7f6 fccd 	bl	8001df4 <_exit>

0800b45a <_malloc_usable_size_r>:
 800b45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45e:	1f18      	subs	r0, r3, #4
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfbc      	itt	lt
 800b464:	580b      	ldrlt	r3, [r1, r0]
 800b466:	18c0      	addlt	r0, r0, r3
 800b468:	4770      	bx	lr

0800b46a <_raise_r>:
 800b46a:	291f      	cmp	r1, #31
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4604      	mov	r4, r0
 800b470:	460d      	mov	r5, r1
 800b472:	d904      	bls.n	800b47e <_raise_r+0x14>
 800b474:	2316      	movs	r3, #22
 800b476:	6003      	str	r3, [r0, #0]
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
 800b47e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b480:	b112      	cbz	r2, 800b488 <_raise_r+0x1e>
 800b482:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b486:	b94b      	cbnz	r3, 800b49c <_raise_r+0x32>
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f831 	bl	800b4f0 <_getpid_r>
 800b48e:	462a      	mov	r2, r5
 800b490:	4601      	mov	r1, r0
 800b492:	4620      	mov	r0, r4
 800b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b498:	f000 b818 	b.w	800b4cc <_kill_r>
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d00a      	beq.n	800b4b6 <_raise_r+0x4c>
 800b4a0:	1c59      	adds	r1, r3, #1
 800b4a2:	d103      	bne.n	800b4ac <_raise_r+0x42>
 800b4a4:	2316      	movs	r3, #22
 800b4a6:	6003      	str	r3, [r0, #0]
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	e7e7      	b.n	800b47c <_raise_r+0x12>
 800b4ac:	2400      	movs	r4, #0
 800b4ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	4798      	blx	r3
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e7e0      	b.n	800b47c <_raise_r+0x12>
	...

0800b4bc <raise>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <raise+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f7ff bfd2 	b.w	800b46a <_raise_r>
 800b4c6:	bf00      	nop
 800b4c8:	2000000c 	.word	0x2000000c

0800b4cc <_kill_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	; (800b4ec <_kill_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f6 fc7b 	bl	8001dd4 <_kill>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_kill_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_kill_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200004b8 	.word	0x200004b8

0800b4f0 <_getpid_r>:
 800b4f0:	f7f6 bc68 	b.w	8001dc4 <_getpid>

0800b4f4 <_init>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	bf00      	nop
 800b4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fa:	bc08      	pop	{r3}
 800b4fc:	469e      	mov	lr, r3
 800b4fe:	4770      	bx	lr

0800b500 <_fini>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr
